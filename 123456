AT_W = 0x2

AT_A = 0x20

AT_S = 0x40

AT_D = 0x80

AT_Q = 0x1

AT_E = 0x4

AT_T = 0x10

AT_F = 0x100

AT_Z = 0x200

AT_X = 0x400

AT_C = 0x800

AT_V = 0x1000

AT_Space = 0x20000

AT_Tab = 0x4000

AT_Cap = 0x1000002

AT_Shift = 0x8000

AT_LMB = 0x40000

AT_RMB = 0x80000

AT_Alt = 0x8



function FaceTg(mob)

	local mx,my,mz = Pos()

	local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

	SetFace(angle)

	setYaw(angle)

end



function ActorList()

	--print(9000)

	local list = Groud_info()

	--print(9001)

	if list then

		list = GetAllPosInfo(list)

	end

	return list

end



function ScriptStop()

	local file = io.open(DllPath().."\\timeline.txt", "w")

	if file then

		file:write(os.date())

		file:close()

	end

	Delay(1)

	return StopScript()

end



function KeyDown(num)

	--change_MousePosition(0)

	--change_Keydwon(num)

	Key_dwon(num)

end



function KeyUp(num)

	--change_MousePosition(0)

	--change_Keyup(num)

	Key_up(num)

end



function KeyPress(num,t)

	KeyDown(num)

	if not t then

		Delay(math.random(20,75))

	else

		Delay(t)

	end

	KeyUp(num)

end



function  print(str,notime)

	local shit = tostring(str)

	µ÷ÊÔÊä³ö(shit)

end



function  print2(str,notime)

	local shit = tostring(str)

	µ÷ÊÔÊä³ö(shit)

end



function  Ö¸Áî±í_dugview(str)

  Out_Print(str)

end





function  Ö¸Áî±í_Ð´±êÌâ(str)

  Out_Title(str)

end



function  Ö¸Áî±í_¼ÓÔØ×Ô¶¨Òå½Å±¾(str)

	Loadlib(str)

	--Loadlib("\\Script\\lib\\api.lua")

end



function  Ö¸Áî±í_Í£Ö¹½Å±¾(str)

	--Loadlib(str)

	--Loadlib("\\Script\\lib\\api.lua")

end



function  Ö¸Áî±í_Ê±¼ä(str)

	return GetTime()

end



function  Ö¸Áî±í_µÈ´ý(t)

	Delay(t)

end



function Ö¸Áî±í_»·¾³ÊôÐÔ±í()

   local list=Groud_obj()

	for i = 1,#list do

		local obj=list[i].obj

		local name=obj_name(obj)

		local Type=obj_type(obj)		

		local deadtype= obj_deadtype(obj)

		local x=obj_x(Type,obj)

		local y=obj_y(Type,obj)

		local z=obj_z(Type,obj)		

		µ÷ÊÔÊä³ö("ÀàÐÍ:"..Type.."Ãû×Ö:"..name.."ËÀÍö:"..deadtype.."×ø±ê:"..x..","..y..","..z)

	end

end



function Ö¸Áî±í_×î½ü¹Ö()

   local x1=role_x()

   local y1=role_y()

	local z1=role_z()

	local longdist=9999	

	local retname= nil

	local retobj=nil

   local list=Groud_obj()

	for i = 1,#list do

		local obj=list[i].obj

		local Type=obj_type(obj)

		local deadtype= obj_deadtype(obj)

		if 	Type==1  and deadtype==0 then

			local name=obj_name(obj)

			if not table.match(Bot.MobBL,name) then

				local x=obj_x(Type,obj)

				local y=obj_y(Type,obj)

				local z=obj_z(Type,obj)	

				local dist=	Dist2(x1,y1,x,y)

				if dist<=longdist then

					longdist=dist

					retobj=obj

					retname=name		

				end

			end

		end

	end

	if retobj then

		µ÷ÊÔÊä³ö("¾àÀë:"..longdist.."Ãû×Ö:"..tostring(retname).." ¶ÔÏó:2x"..tostring(retobj))

		--Atk(retobj)

		return retobj

	end

end



function ActorList2()

	print(9001)

	local list=Groud_obj()

	print(9002)

	local list2 = {}

	for i = 1,#list do

		print(9003)

		local obj=list[i].obj

		local mobface = 0

		if IsBadReadAddr(obj) then

			print(9004)

			print("¶ÔÏó:"..obj)

			local Type=obj_type(obj)

			print(9005)

			local deadtype= obj_deadtype(obj)

			print(9006)

			local mobname=obj_name(obj)

			print(9007)

			local x=obj_x(Type,obj)

			print(9008)

			local y=obj_y(Type,obj)

			print(9009)

			local z=obj_z(Type,obj)

			print(9010)

			if Type == 1 then

				print(4001)

				mobface = obj_Position(obj)

				print(4002)

				print(mobface)

			end

			print(9011)

			table.insert(list2,{actor=obj,sign=Type,dead=deadtype,name=mobname,mx=x,my=y,mz=z,face=mobface,hp=999,maxhp=999,rdtype=3})

		else

			print(998877665544)

		end

	end

	print(9012)

	return list2

end



function MobPos(Type,obj)

	if obj then

		return obj_x(Type,obj),obj_y(Type,obj),obj_z(Type,obj)

	end

end



function Ö¸Áî±í_¶ÔÏóÀàÐÍ(obj)

	return obj_type(obj)

end



function Ö¸Áî±í_¶ÔÏóÃû×Ö(obj)

	return obj_name(obj)

end



function Ö¸Áî±í_¶ÔÏó×ø±ê(obj)

	local x=obj_x(Type,obj)

	local y=obj_y(Type,obj)

	local z=obj_z(Type,obj)

	return x,y,z

end



function Ö¸Áî±í_¶ÔÏóËÀÍö±êÖ¾(obj)

	return obj_deadtype(obj)

end



function IsDead(obj)

	if obj_deadtype(obj) == 1 then

		return true

	else

		return false

	end

end



function  Ö¸Áî±í_½ÇÉ«Ãû×Ö()

	return role_name()

end



function  Pos(n)

	local x=role_x()

	x=x-x%0.01

	local y=role_y()

	y=y-y%0.01

	local z=role_z()

	z=z-z%0.01

	if not n then

		return x,y,z

	else

		return math.floor(x),math.floor(y),math.floor(z)

	end

end



function PosX()

	local i = role_x()

	return i-i%0.01

end



function PosY()

	local i = role_y()

	return i-i%0.01

end



function PosZ()

	local i = role_z()

	return i-i%0.01

end



function PosTable(n,h,r)

	if not n then n = 1 end

	if not h then h = 0 else h = h*100 end

	local shit =""

	if r then 

		shit =",r="..r

	end

	local str = "{No="..n..",x="..tostring(PosX()..",y="..PosY()..",z="..PosZ()+h)..shit.."},"

	print(str)

end



function PosInfo(n,h)

	print(PosX()..","..PosY()..","..PosZ())

end



function  ActionName()

	return action_name()

end



function  Ö¸Áî±í_µ±Ç°¶¯×÷ID()

	return action_id()

end





function  Ö¸Áî±í_Ö±Ïß×ßÂ·(x,y,z)

   Walk(x,y,z)

end



function Ö¸Áî±í_ºê(str)

	Dolua(str)	

end



function Ö¸Áî±í_ºê·µ»Ø(str)

	return Retlua(str)	

end



function Atk(obj)

	print("Auto atk 1")

	Attack(obj)

	print("Auto atk 2")

end



function Ö¸Áî±í_ÐÞ¸Ä_Êó±ê×´Ì¬(date)--date= 0,1

   change_MousePosition(date)

end



function SetFace(date)--date= 0,2PI

   change_RolePosition(date)

end



function Ö¸Áî±í_ÄÚ´æµØÖ·_¿É¶Á(addr)--·µ»ØÄÚ´æÏÂÒ»²ãµØÖ·ÊÇ·ñÎ´¿Õ

   IsBadReadAddr(addr)

end



function ±éÀú²âÊÔ()

	local tick = 0

	while not ScriptStop() do

		local mx,my,mz = Pos()

		local mob = GetMob(mx,my,mz,35)

		if mob then

			if GetTime() - tick >= 1000 then

				DrawNewPos(mob.mx,mob.my,mob.mz)

				tick = GetTime()

			end

		end

		Delay(200)

	end

end



function Ainput(num,time)

	change_RoleFalg(num)

	if not time then

		local i=math.random(25,80)

		Delay(i)

	else

		Delay(time)

	end

	Areset()

	Bot.AFlagUpT = nil

end



function Ahold(num)

	change_RoleFalg(num)

	Bot.ACFlagHold = true

	if not Bot.AFlagT then Bot.AFlagT = GetTime() end

end



function Ahold2(num,t)

	if not t then t = 200 end

	if not Bot.AFlagHoldT then

		Bot.ACFlagHold = true

		Bot.AFlagHoldT = GetTime()

		change_RoleFalg(num)

	else

		if GetTime() - Bot.AFlagHoldT >= t then

			Areset()

			Bot.AFlagUpT = nil

			Bot.AFlagHoldT = nil

		end

	end

end



function Areset()

	change_RoleFalg(0)

	Bot.ACFlagHold = false

	Bot.AFlagT = nil

end



function ChangeAnimSpeed(num)

	if Bot.AnimationSpeedHack then

		AnimSpeed(num)

	end

end



function IsKeyPressed(num)

	local code = string.format([[

if isKeyPressed(%i) then

	return 1

else

	return 2

end

]],num)

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function GetcrossHairPos()

	local code = [[

local pos = crossHair_GetTargetPosition()

return "{x="..pos.x..",y="..pos.z..",z="..pos.y.."}"

]]

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	if type(b) == "function" then

		return b()

	else

		return nil

	end

else

	return nil

end

end

function GetItemInfo(slot)

	local code = string.format([[

	local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(%i)

    if itemWrapper then

		name = (itemWrapper:getStaticStatus()):getName()

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		count = Int64toInt32((itemWrapper:get()):getCount_s64())

    end

	local ret = "{name="..'"'..tostring(name)..'"'..",id="..itemId..",count="..count.."}"

	return ret

]],slot)

local str = Retlua(code)

local b = load("return " .. str)

if b then

	return b()

else

	return nil

end

end



function GetItemName(i)

	local code = string.format([[

	local name = nil

    local itemWrapper = getInventoryItem(%i)

    if itemWrapper then

		name = (itemWrapper:getStaticStatus()):getName()

		return name

    end

]],i)

local str = Retlua(code)

if str == "nil" then

	return nil

else

	return str

end

end



function GetItemId(i)

	local code = string.format([[

	local itemId = 0

    local itemWrapper = getInventoryItem(%i)

    if itemWrapper then

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		return itemId

    end

]],i)

return tonumber(Retlua(code))

end



function GetItemCount(i)

	local code = string.format([[

	local count = 0

    local itemWrapper = getInventoryItem(%i)

    if itemWrapper then

		count = Int64toInt32((itemWrapper:get()):getCount_s64())

		return count

    end

]],i)

return tonumber(Retlua(code))

end



function GetBagList()

	local code =string.format([[

ret = "{"

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

for i =2,invenSize do

    local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

	local itemType = 0

	local toolType = 0

	local dura = 100

    if itemWrapper then

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		name = (itemWrapper:getStaticStatus()):getName()

		itemType = itemWrapper:getStaticStatus():getItemType()

		local istool = itemWrapper:getStaticStatus():isCollectTool()

		local curdura = itemWrapper:get():getEndurance()

		if curdura then dura = curdura end

		if istool then

			toolType = itemWrapper:getStaticStatus():getCollectToolType()

		end

		count = Int64toInt32((itemWrapper:get()):getCount_s64())

		ret = ret.."{id="..itemId..",count="..count..",type="..itemType..",toolType="..toolType..",dura="..dura.."},"

    end

end

ret = ret.."}"

return ret

]])

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	if type(b) == "function" then

		return b()

	else

		return nil

	end

else

	return nil

end

end



function GetBagListId()

	local code =string.format([[

ret = "{"

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

for i =2,invenSize do

    local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		ret= ret..itemId..","

    end

end

ret = ret.."}"

return ret

]])

local str = Retlua(code)

local b = load("return " .. str)

return b()

end



function HasVillaInvite()

	local list = {1123,1105,1121,1103,1133,1115,1134,1116,1124,1106,1131,1113,1120,1102,1127,1109,1119,1101,1125,1107,1130,1112,1128,1110,1135,1117,1122,1104,1129,1111,1132,1114,1126,1108}

	local bag = GetBagListId()

	for i =1,#bag do

		if table.find(list,bag[i]) then

			return true

		end

	end

	return false

end



function CombineScroll()

	local code = string.format([[

InventoryWindow_Show()

InventoryWindow_Close()

local has = false

local ID_Relic = 40218

local ID_Book = 40220

local ID_Scroll = 40228

local ID_Doll = 40383

local list = {ID_Relic,ID_Book,ID_Scroll,ID_Doll}

local invenSize= getSelfPlayer():get():getInventoryByType(1):size()

invenSize = invenSize-1

local freeslot = getInventoryFreeCount()

HandleLUp_AutoSortFunctionPanel_SetCategoryView(0,false)

ToClient_SetIsUseSort(0,false) local crap = PaGlobal_InvenAutoSort if crap then crap:syncUI(0) crap:updateSlot(0) end

for i =2,invenSize do

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		for a=1,#list do

			if itemId == list[a] then

				if i > 63 then

					DragManager:setDragInfo(Panel_Window_Inventory_All, 0, i, "Icon/" .. itemWrapper:getStaticStatus():getIconPath(), PaGlobalFunc_Inventory_All_GroundClick, getSelfPlayer():getActorKey())

					HandleEventLUp_Inventory_All_LUpEvent(0)

				else

					count = Int64toInt32((itemWrapper:get()):getCount_s64())

					if count >= 5 then

						PaGlobalFunc_CombineBag_Open()

						HandleEventPressMove_Inventory_All_PressMoveEvent(i-2)

						HandleEventLUp_CombineBag_DropHandler(1)

						HandleEventPressMove_Inventory_All_PressMoveEvent(i-2)

						HandleEventLUp_CombineBag_DropHandler(6)

						HandleEventPressMove_Inventory_All_PressMoveEvent(i-2)

						HandleEventLUp_CombineBag_DropHandler(5)

						HandleEventPressMove_Inventory_All_PressMoveEvent(i-2)

						HandleEventLUp_CombineBag_DropHandler(7)

						HandleEventPressMove_Inventory_All_PressMoveEvent(i-2)

						HandleEventLUp_CombineBag_DropHandler(11)

						local amount = 1

						if count >= 100 then 

							if freeslot >= 25 then 

								amount = 20 

							else

								if freeslot >=5 then

									amount = freeslot

								else

									amount = 1

								end

							end 

						else 

							amount = math.floor(count/5) 

						end

						PaGlobalFunc_CombineBag_MakePuzzle(amount,1)

						PaGlobalFunc_CombineBag_Close()

						has = true

					end

					break

				end

			end

		end

	end

end

return tostring(has)

]])

local str = Retlua(code)

if str == "true" then

	return true

else

	return false

end

end



function UseItem(a)

	local code = string.format([[

local str = "%s"

if tonumber(str) then str = tonumber(str) end

for i =2,192 do

    local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		name = (itemWrapper:getStaticStatus()):getName()

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		if name == str or itemId == str then

			inventoryUseItem(0,i, nil, true)

		end

    end

end

]],a)

Dolua(code)

end



function HasItem(id)

	local list = GetBagListId()

	if table.find(list,id) then

		return true

	else

		return false

	end

end



function ClickItem(num)

	local code = string.format([[

inventoryUseItem(0,%i, nil, true)

]],num)

Dolua(code)

end



function RightClickItem(id)

	local code = string.format([[

local id = %i

for i =2,192 do

    local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		name = (itemWrapper:getStaticStatus()):getName()

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		if itemId == id then

			HandleEventRUp_Inventory_All_RUpEvent(i-2)

		end

    end

end

]],id)

Dolua(code)

end



State,LastState,TempState,TempLastState = -1,-1,nil,nil

local summonuid = {35003,60068,60141,24554,24339,24344,29190,60168,24337,20853,20870,60148,60197,60151,24355,60208,60201,60143,60135,60142,60144,24353,24357,60213,20839,20840,24506,60177,26618,26001,20750,24967,20187,24827,24970,20563,25014,25035,20418,20180,26003,20311,24062,60206,20900,60188,20530,20528,20529,22907,24827,24968,24402,24403,24404,21246,20899,27173,27622,27621,60137,60134,60147,60136,60120,25107,23057,29191,60119,60187}

local ignoreGM = {"WAGMI","DrGMAX","GMio","xionGMao"}

Stateinfo = ""

Bot = {}

Bot.tx,Bot.ty,Bot.tz,Bot.tr = nil,nil,nil,nil

Bot.TpNavi = false

Bot.tp = true

Bot.pathInterval = 200

Bot.IsTp = false

Bot.playerdetection = true

Bot.MobBL = {"ºÚ¾«ì`µÄÄÜÁ¿","Dead Wolf","Black Spirit's Energy","Summon","ÕÙ¾«F","²Ý´ÌÎo","¸ð¿ËÍÍ¿´ÊØéL","¿¨ÄªË¹","À­ÆæÂå","ÅÑÍ½µÄ±Oªz","µÂÀû¿±Ä¸É½Ñò","¿´ÊØÈË¹Å ","´óµØÖ®Öé","µÂÀû¿±¹«É½Ñò"}

Bot.MyName = nil

Bot.MyMount = nil

Bot.NaviToFS = false

Bot.Npc = nil

Bot.SaveList = {}

Bot.SellList = {}

Bot.MaidSave = {}

Bot.MaidMpSave = {}

Bot.MiniMize = false

Bot.minimizeT = GetTime()

Bot.Password = nil

Bot.OpenReward = {16075,16074}

Bot.DeleteItem = {}

Bot.TakeFromMarket = {}

Bot.ScrollId = nil

Bot.ScrollQuest = nil

Bot.ScrollTgName = nil

Bot.ScrollPos = nil

Bot.ScrollTgWaitInfo = nil

Bot.QuestInfo = ""

Bot.HasCamp = false

Bot.BuyCampBuff = false

Bot.BuyVillaBuff = false

Bot.CampBuffBuy = {}

Bot.VillaBuffBuy = {}

Bot.GrindSkipTimer = nil

Bot.GrindPullTimer = nil

Bot.SwapPet = false

Bot.PDRecord = {}

Bot.SamePlayerDetectWithinShortTime = false

Bot.SwapChannelAtPD = true

Bot.SwapChannelAtMob = {}

Bot.NeedSwapChannelatMobDetected = false

Bot.SwapChannelAtPDTimer = 20

Bot.FarmHF = false

Bot.IsQuestBot = false

Bot.DoLoot = false

Bot.DoLootTp = false

Bot.AfterGrindT = nil

Bot.IsGatherBot = false

Bot.AutoBuff = nil

Bot.GatherEndNoEnergy = false

Bot.GrindEndTimer = nil

Bot.GrinderNeedEnd = false

Bot.GoBackMainPathByRestockPath = false

Bot.RestockDone = false

Bot.ACFlagHold = false

Bot.BackAtk = false

Bot.IsNav = false

Bot.BackAtkInterval = 500

Bot.DontRestock = false

Bot.FocusCloestMob = false

Bot.HighestZ = nil

Bot.EquipRodSlot = nil

Bot.Fishx,Bot.Fishy,Bot.Fishz = nil,nil,nil

Bot.GrindMobPriority = {28232}

Bot.FishAngle = nil

Bot.IsFishingBot = false

Bot.FastFishing = false

Bot.NpcPos = nil

Bot.PlayerWhiteList = {}

Bot.NoHpChangeGiveUpTimer = 15000

Bot.CombatTp1 = false

Bot.ComboT1 = 0

Bot.ComboT2 = 0

Bot.ComboT3 = 0

Bot.ComboIdx = 1

Bot.ComboMatch = false

Bot.ComboTimer = 2500

Bot.ComboTimer2 = 110

Bot.ComboCountT1 = nil

Bot.ComboTO = nil

Bot.SkillDist = 500

Bot.StuffT = nil

Bot.SkillRushBack = false

Bot.SkipSpotOnMobCount = 0

Bot.OnGMDetectTick = nil

Bot.ComboMove1 = 0

Bot.ComboMoveT = 0

Bot.CombatCurAct = ""

Bot.ComboMoveX,Bot.ComboMoveY,Bot.ComboMoveZ = 0,0,0

Bot.ComboTx,Bot.ComboTy,Bot.ComboTz = nil,nil,nil

Bot.UseAlchemyStone = false

Bot.UseItemCollectScroll = false

Bot.ItemCollectScrollLv = 1

Bot.AnimationSpeedHack = false

Bot.AvoidLowHp = true

Bot.AvoidLowHpPrc = 20

Bot.OverWriteGrindRange = false

Bot.OverWriteGrindRangeRadius = 15

Bot.TentBuff = false

Bot.ReviveSwapChannel = false

Bot.EscapeAtSwim = false

Bot.SwimTick = nil

Bot.WatchDogRegistered = false

Bot.GatherTarget = {}

Bot.TempGrind = false

Bot.StartT = nil

Bot.Click1 = false

Bot.Click2 = false

Bot.DontSpamQS = false

Bot.InvestNode = false

Bot.InvestNodeId = nil

Bot.SaveNewbie = {45302,16001,45298,44306,44311,752023,54031,721003,50803,5960,50802,721002,50801,4917,50807,766104,766105,766106}

Bot.TpOnStuck = true

Bot.SwapChannelTime = 0

Bot.SeasonT = 0

Bot.KS = false

Bot.AFlagT = nil

Bot.AFlagUpT = nil

Bot.AFlagHoldT = nil

Bot.needRegenSp = false

Bot.IsKnowledgeBot = false

Bot.OrcTick = 0

Bot.SetQuickSlot0 = false

Bot.ResetQST = nil

Bot.LastAct = nil

Bot.SamePlayer = nil

Bot.DontTempGrind = false

Bot.DisableWaterEscape = false

Bot.LastCS,Bot.LastTop = nil,nil

Bot.Lastx,Bot.Lasty,Bot.Lastz = nil,nil,nil

Bot.NovaBurnLife = true

Bot.FrontMob = {}

Bot.BackMob = {}

Bot.MobCount = 0

Bot.FarMob = nil

Bot.RandomPath = true

Bot.Randomizer = 100

Bot.Randomx,Bot.Randomy = 0,0

Bot.TpPriorityMob = false

Bot.DbgSkill = false

Bot.GoCharSelectIfSwapCD = false

Bot.SM = false

Bot.SMCenter = {}

Bot.SwapCD = nil

Bot.TpAddtionH = 20

Bot.PvpTarget = {}

Bot.LastRushBack= nil

Bot.KSMob = nil

Bot.KSData = true

Bot.NpcBL = {}

Bot.LastNpcGid = nil

Bot.FreePvpMode = false

Bot.MapData = {}

Bot.MeshData = {}

Bot.SaveArtific = false

Bot.AutoChurch = true

Bot.ignoreGM = {}

Bot.DontSwapChannelAfterRevive = false

Bot.ChurchBuff = {}

Bot.GatherActionPriority = {2,3,4,5,6,7,0}

Bot.TpFromMesh = false

function compareByDist(a, b)

  return a.dist < b.dist

end



local skillT = 0

local PDTick = 0

local combatx,combaty,combatz = nil,nil,nil

local ResetPlayerNameT = 0

local actorBlackList = {}

local actorBLT = 0

local drawBLT = 0

local drawBLCount = 0

local getRewardT = 0

local printT = 0

local PDRTick = 0

local PathSkillT = 0

local lootgidList = {}

local lootgidresetT = 0

local gatherbuffT = 0

local botstartT = nil

local combatTp1 = 0

local npcBLResetT = 0

local npcBL = {}

local npcBL1 = {}

local randomCombatT = 0

local untentT = 0

local loadsetTick = 0

local TempBL = {}

local TempBLT = 0

local MemTick = 0

local openNpcTick = 0

CBIdx = 1

LastCB = nil

CBTick = nil



function ResetTempBL()

	if GetTime() - TempBLT >= 60000 then

		TempBL = {}

		TempBLT = GetTime()

	end

end



local ZerkerSkill = {

{name="Ç¿:Ò°ÊÞ»¯",group={2108}},

{name="¿ÉÅÂµÄ±©¾ý",group={2029,2025},act=AT_Shift+AT_Q},

{name="ÂÓÊ³ÕßµÄá÷ÁÔ",group={2052},act=AT_S+AT_F},

{name="¼«:·è¿ñµÄÆÆ»µÕß",group={2021},act=AT_Shift+AT_S+AT_LMB},

{name="·è¿ñµÄÆÆ»µÕß",group={2049,2047},act=AT_S+AT_LMB},

{name="ÃÍÁÒµÄ¹¥»÷",group={2046,2010,2044},act=AT_RMB},

{name="Ç¿:¹Å´úµÄ²¨¶¯",group={2113},act=AT_C+AT_S},

{name="Ç¿:»Ä·Ï»¯",group={2114},act=AT_C+AT_W},

{name="·ÉÇÝ·çÕ¶",group={2110,2009,2013},act=AT_S+AT_RMB},

{name="ÑÒÊ¯ÍÆ»÷",group={2042,2040},act=AT_W+AT_F},

{name="À×µç½»¼Ó",group={2057,2053},act=AT_LMB+AT_RMB},

{name="·ßÅ­µÄÕñ¶¯",group={2003}},

--{name="¾ÞÑÒ",group={2060},act=AT_Q},



{name="Ç¿:ÎÞ·¨Í£Ö¹µÄÒ°ÊÞ",group={2112},act=AT_C},

{name="á÷ÁÔÈõÕß",group={2093,2011},act=AT_Shift+AT_F},

{name="Í·é³",group={2039,2038},act=AT_W+AT_RMB},

{name="Öâ»÷",group={2043},act=AT_A+AT_RMB},

{name="×êÈÛÑÒ",group={2111,2004},act=AT_Shift+AT_Space},

}



local Witch = {

{name="Ä§Á¦µÄµÆÌ¨",group={5532}},

{name="¹êÁÑµÄ²¨ÌÎ",group={5543},act=AT_S+AT_LMB+AT_RMB},

{name="·ºÀÄµÄÃÍ¶¾",group={5536},act=AT_E},

{name="À×µçÍ»Ï®",group={5544},act=AT_S+AT_RMB},

{name="µçÁ÷²¨¶¯",group={5545},act=AT_Shift+AT_F},

{name="¶Û»¯",group={5534},act=AT_Shift+AT_Q},

{name="Æ½ºâ±À»µ",group={5541},act=AT_Shift+AT_LMB},

{name="À×µç·ç±©",group={5544},act=AT_S+AT_F},

{name="ÉÁµçµÄÏ´Àñ",group={5548},act=AT_W+AT_RMB},

{name="ÆÙÁ÷",group={5542},act=AT_W+AT_F},

{name="ÊÔÁ¶µÄèäèô",group={5546},act=AT_Shift+AT_RMB},

{name="°¢µÂÀ¥µÄ¾«Éñ",group={5535},act=AT_Shift+AT_E},

}



local MaeguSkill = {

{name="Ð×É·",group={13031,13030},act=AT_S+AT_Space},

{name="ÌìµÀÖ®Îè",group={13041,13035},act=AT_W+AT_RMB},

{name="Ç¿:»¨ÉÈ",group={13069},act=AT_W+AT_C},

{name="Ç¿:°²Áé",group={13070},act=AT_Shift+AT_C},

{name="Ç¿:ºüÀêÉñÁé:½èÁ¦",group={13040}},

{name="Ç¿:¹íÐý·ç",group={13052,13014},act=AT_Shift+AT_F},

{name="ºüÀêÉñÁé:°ÑÏ·",group={13045,13028},act=AT_RMB},

{name="°Ù»¨ÃÖÂþ",group={13049,13016},act=AT_W+AT_E},

{name="»ê·ÉÆÇÉ¢",group={13046,13020},act=AT_S+AT_LMB},

{name="ÎÞÓÇ½Ù",group={13051,13010},act=AT_Shift+AT_LMB},

{name="»ðÇò",group={13048,13012},act=AT_Shift+AT_Q},

{name="Àû×¦»®»÷",group={13043,13033},act=AT_S+AT_F},

{name="Àû×¦»®»÷",group={13042,13004},act=AT_A+AT_LMB},

}



local NovaAwk = {

{name="åçÐÇ",group={10584},act=AT_F+AT_W},

{name="ÍõÊÒ½£Êõ:Ï®",group={10594},act=AT_F},

{name="ÂäÏÂµÄÐÇËé",group={10588},act=AT_Shift+AT_RMB},

{name="Ï®»÷Ö®»·",group={10583},act=AT_RMB+AT_W},

{name="ÍõÊÒ½£Êõ:·´",group={10603},act=AT_S+AT_Q},

{name="¿³»÷Ö®»·",group={10581},act=AT_Q},

{name="ÍõÊÒ½£Êõ:Á¬",group={10586},act=AT_S+AT_LMB},

{name="±ù¶³Ö®»·",group={10585},act=AT_Shift+AT_Q},

{name="ÍõÊÒ½£Êõ:ËÙ",group={10587},act=AT_S+AT_F},

{name="ÐÇÁê",group={10602},act=AT_Shift+AT_LMB},

{name="ÐÇ»·",group={10600},act=AT_RMB},

{name="È¼ÉÕÉúÃü",group={10590},act=AT_Shift+AT_E},

}



local MusaSkill = {

{name="Ì¨·çÑÛ",group={3130}},

{name="ÆÆ»Ù",group={3125,3003,3026},act=AT_Q+AT_LMB},

{name="Äæ¼«",group={3121,3040},act=AT_S+AT_LMB},

{name="Ã¤´Ì",group={3094,3045},act=AT_W+AT_Space},

{name="ºóÍËÕ¶»÷",group={3129,3018},act=AT_S+AT_Space},

{name="Õ¶»÷",group={3120,3022},act=AT_E},

{name="Ã¤Õ¶",group={3127,3056,3012},act=AT_E+AT_S},

{name="Ó¥×¦",group={3124,3032},act=AT_W+AT_Shift+AT_LMB},

{name="ÁÒ·ç",group={3123,3013},act=AT_RMB+AT_LMB},

{name="±©·ç",group={3122,3051},act=AT_S+AT_RMB+AT_LMB},

{name="»¨ÎèÕ¶",group={3126,3043},act=AT_Shift+AT_RMB+AT_LMB},

{name="É½ÔÀÕ¶",group={3021},act=AT_Shift+AT_F},

{name="ÁúÑ×Õó",group={3131},act=AT_S+AT_C},

{name="ÎäÊ¿µÄ¾«Éñ",group={3102,3014},act=AT_Shift+AT_E},



{name="±©·ç:»ð",group={3058}},

{name="Ðý·çÕ¶",group={3128,3011,3051}},

{name="Ç¿Õ¶",group={3095,3052,3046}},

}



local MeahuaSkill = {

{name="Ã·»¨Éñ½£",group={3627}},

{name="ºìÔÂ",group={3624,3540},act=AT_RMB+AT_LMB+AT_S},

{name="Âä»¨Õ¶",group={3526},act=AT_F+AT_Shift},

{name="ì«·ç¿³»÷",group={3626,3504},act=AT_A+AT_LMB},

{name="Õ¶Ê×",group={3625,3546},act=AT_RMB+AT_LMB},

{name="Ñ©»¨Ç§¶Ñ",group={3630},act=AT_W+AT_C},

{name="»¨ÎèÕ¶",group={3619,3533},act=AT_RMB+AT_LMB+AT_Shift},

{name="ÀÓÓ¡",group={3629},act=AT_S+AT_C},

{name="Äæ¼«",group={3618,3530},act=AT_S+AT_LMB},

{name="Ã¤Õ¶",group={3622,3545,3544},act=AT_S+AT_E},

{name="Ã·»¨µÄ¾«Éñ",group={3601,3548},act=AT_E+AT_Shift},

{name="Ã¤´Ì",group={3621,3534}},

}



local WitchSucc = {

{name="Ç¿:´óµØÖ®¼ý",group={5613},act=AT_RMB+AT_LMB},

{name="Ä§Á¦µÄµÆÌ¨",group={5532}},

--{name="µØÃæµÄ»ØÓ¦",group={5615,5530},act=AT_A+AT_LMB},

{name="ÔªËØ¹¬µî",group={5591}},

{name="¿ìËÙÄîÖä",group={5531}},

{name="Ç¿:µçÁ÷²¨¶¯",group={5621},act=AT_W+AT_C},

{name="±£»¤ÁìÓò",group={5518},act=AT_Shift+AT_Q},

{name="Ç¿:¶à³äÄ§·¨¼ý",group={5631},act=AT_S+AT_RMB},

{name="Ä§Á¦µÄ¶ÜÅÆ",group={5520}},

{name="Ç¿:ÂäÏÂÁ÷ÐÇ",group={5644,5502},act=AT_S+AT_LMB+AT_RMB},

{name="±©·çÑ©",group={5606,5512},act=AT_Shift+AT_LMB+AT_RMB},

{name="±¼ÌÚ´óµØ",group={5632},act=AT_F},

{name="Ç¿:Æ½ºâ±À»µ",group={5619},act=AT_S+AT_C},

{name="±ùÀäµÄÎí",group={5605,5511},act=AT_S+AT_Q},

{name="Ç¿:»ðÑæÇò",group={5598,5506},act=AT_S+AT_LMB},

{name="Ç¿:»ðÑæ±¬·¢",group={5600},act=AT_Shift+AT_LMB},

{name="µØÕð",group={5640,5501},act=AT_Shift+AT_F},

{name="¶³½á",group={5603,5510},act=AT_S+AT_E},

{name="Ç¿:²ÐÁôÉÁµç",group={5642}},

{name="Ç¿:À×µç",group={5608,5507},act=AT_S+AT_F},

{name="Ç¿:ÉÁµç·ç±©",group={5646},act=AT_Shift+AT_C},

{name="Ä§Á¦µÄÐÄÔà",group={5528}},

}



local StrikerSkill = {

{name="¶·Éñ½µÁÙ",group={7048},act=AT_E+AT_Shift},

{name="¶þÖØ·ÖÉí",group={7063},act=AT_Q+AT_Shift},

{name="¼«Òå",group={7129}},

{name="ÊÆ²»¿Éµ²µÄ·Ü¶·",group={7049}},

{name="ÁúµÇ¸ó",group={7064},act=AT_S+AT_F},

{name="¿³¸«",group={7053},act=AT_F+AT_Shift},

{name="¿àº£±ÀÀ£",group={7052},act=AT_F},

{name="¶·ÉñµÄÄÅº°",group={7062},act=AT_S+AT_RMB},

{name="ÂÝÐýµ¯",group={7054},act=AT_LMB+AT_Shift},

{name="Çï·çÂäÒ¶",group={7137},act=AT_LMB},

{name="Âä³¾",group={7058},act=AT_RMB},

{name="»áÐÄÈ­",group={7051},act=AT_LMB+AT_S},

{name="±¬ÁÑÁ¬´ò",group={7055},act=AT_RMB+AT_Shift},

{name="Á÷:¶¥·ç",group={7059},act=AT_Space},

}



local RangerAwkSkill = {

{name="ÊØ»¤Õß",group={1579}},

{name="´ó×ÔÈ»µÄÕ½Àõ",group={1591},act=AT_Shift+AT_LMB},

{name="¾«ÁéµÄ·ßÅ­",group={1587},act=AT_Shift+AT_RMB},

{name="ì«·çÂÖÎè",group={1589},act=AT_W+AT_F},

{name="ºôÐ¥µÄ·ç",group={1580},act=AT_Q},

{name="ÔÙ´´Ôì",group={1596}},

{name="·çÖÐÖ®ÈÐ",group={1628},act=AT_Shift+AT_F},

{name="¾«ÁéµÄÒøºÓ",group={1594},act=AT_Shift+AT_E},

{name="ÎÞÇéµÄµ¶ÈÐ",group={1586},act=AT_S+AT_LMB},

{name="ëøÂû½á",group={1590},act=AT_F},

{name="·çÖ®Â·",id=2737,act=AT_Shift+AT_X},

}



local GuardianSkill = {

{name="Í»ÆÆÕóµØ",group={9550},act=AT_S+AT_F},

{name="Å·Ä·°¢µÄÄÜÁ¿",group={9583},act=AT_Shift+AT_E},

{name="ÑªÓüÉîÔ¨",group={9577,9532},act=AT_Shift+AT_Q},

{name="ÎÞÇéµÄÃÍ»÷",id=5236,act=AT_Shift+AT_X},

{name="Ñ©É½¿³»÷",group={9573,9511},act=AT_Shift+AT_LMB},

{name="´óµØÃÍ»÷",group={9575,9524},act=AT_Shift+AT_F},

{name="¿³¶ÏËÄÖ«",group={9576,9530},act=AT_Shift+AT_RMB},

--{name="½ø»÷",group={9536},act=AT_W+AT_F},



{name="ËéÂ­",group={9578,9546},act=AT_S+AT_LMB},

{name="ÃÍÁÒ»ÓÎè",group={9574},act=AT_RMB+AT_LMB},

}



local GuardianAwkSkill = {

{name="Å·Ä·°¢µÄÔ®Öú",group={9553},act=AT_Shift+AT_E},

{name="¾»»¯Ö®»ð",group={9559},act=AT_Shift+AT_F},

{name="ÁúÖ®ÑÀ",group={9605},act=AT_Shift+AT_LMB},

{name="¹âÈÙµÄÒÇÊ½",group={9554},act=AT_S+AT_LMB},

{name="ÇáÃï",group={9555},act=AT_S+AT_RMB},

{name="ÁÒÑæÖ®ÑÀ",group={9556},act=AT_Shift+AT_RMB},

{name="ÃðÉñÖ®Â·",group={9557},act=AT_Shift+AT_Q},

{name="ÇæÌìÖù",group={9566},act=AT_S+AT_F},

{name="»ðÉñ²½·¥",group={9598},act=AT_RMB},



{name="·çÑ©",group={9568},act=AT_W+AT_RMB},

--{name="ÐÄ¾ªµ¨Õ½",group={9552},act=AT_Shift+AT_S},

}

local ScholarSkill = {

{name="Gravity Rush",id=8208,act=AT_Shift+AT_X},

{name="Flow:Golden path",id=8212,act=AT_Shift+AT_Z},

{name="Gravity Distortion",id=8210},

{name="Gravity Field",group={14017,14016},act=AT_S+AT_RMB},

--{name="Flow:Golden Thrunder",group={14063}},

--{name="Hammer Throw",group={14031,14030},act=AT_S+AT_F},

{name="Hammer Punch",group={14009,14008},act=AT_E},

{name="Hammer in the knee",group={14015,14014},act=AT_W+AT_E},

{name="Core Fusion",group={14059},act=AT_C},

--{name="Hammer Rush",group={14074},act=AT_W+AT_C},

{name="Hammer Smash",group={14064},act=AT_Shift+AT_LMB},

{name="Infinite Power",group={14065},act=AT_Shift+AT_RMB},

{name="Hammer Spin",group={14066},act=AT_Shift+AT_C},

--{name="One Giant leap",group={14068},act=AT_Shift+AT_Q},

{name="Golden Thrunder",group={14063}},

{name="Hammerfall",group={14067},act=AT_Shift+AT_F},

--{name="Golden Pillar",group={14062},act=AT_RMB},--»ØÀ¶

}



local LahnAwkSkill = {

{name="ÓÅÑÅµÄÆøÖÊ",group={8066},act=AT_Q},

{name="ÎüÒýÖ®Îè",group={8126}},

{name="ÆÆÃðÕß",group={8083},act=AT_Shift+AT_E},

{name="ÌúÁ´ÂÖ",group={8077},act=AT_RMB},

{name="ÉñÔÂÎè",group={8081},act=AT_F},

{name="±¯ÃùÊø¸¿",group={8086},act=AT_S+AT_RMB},

{name="²»¹é",group={8084},act=AT_Shift+AT_F},

{name="Ä©ÈÕ²½·¥",group={8073},act=AT_RMB+AT_W},

{name="ËÀÍöÖ®Îè",group={8078},act=AT_W+AT_F},

{name="¿ñÂÒ",group={8075},act=AT_Shift+AT_LMB},

{name="½µÁÙ",group={8079},act=AT_Shift+AT_RMB},

{name="´óµØÖ®éä",group={8072},act=AT_S+AT_LMB},

{name="´ÌÐÄ",group={8087},act=AT_RMB+AT_LMB},

{name="Êø¸¿Ö®Á´",group={8124},act=AT_Shift+AT_Q},

{name="ÆÆÏÉÑÛ",id=3325,act=AT_Shift+AT_X},

{name="°×Â¶",id=3327,act=AT_Shift+AT_Z},

{name="»êÆÇÉñÎä",id=4032},

}



local DarkKnightAwkSkill = {

{name="Í³ÖÎÕß",group={6547}},

{name="ÕÀ·ÅµÄºÚÃµ¹å",group={6628}},

{name="±´µÏ¶ûµÄÏÝÚå",group={6543},act=AT_S+AT_F},

{name="Ô¹ºÞµÄÄ§ÕÆ",group={6546},act=AT_Shift+AT_F},

{name="½ÓÁ¬²»¶ÏµÄ¾øÍû",group={6545},act=AT_RMB},

--{name="±»Ëø×¡µÄÁé»ê",group={6544}},

{name="»Æ»èµÄ¼²×ß",group={6542},act=AT_F},

{name="ºÚ°µÐÇÔÆ",group={6624},act=AT_Shift+AT_Q},

{name="ÔÖÄÑµÄÖÖ×Ó",group={6536},act=AT_Shift+AT_E},

--{name="Á÷:Ôú¸ùµÄÔÖÄÑ",group={6539}},

{name="¾«ÁéµÄÒÅ²ú",group={6533},act=AT_Shift+AT_RMB},

{name="·ÉÉ¢µÄºÚ°µ",group={6535},act=AT_Shift+AT_LMB},

--{name="Á÷:±©»÷",group={6538}},

--{name="Á÷:ºÚ°µ·¢É¢",group={6627},

{name="¾«ÁéÉ¢»¨",group={6532},act=AT_S+AT_RMB},

{name="Á÷:¾«ÁéÉ¢»¨",group={6537}},

{name="Õ¥È¡Ö®ÊÖ",group={6531},act=AT_S+AT_LMB},

{name="¾«Áéá÷ÁÔ",group={6534},act=AT_W+AT_RMB},

{name="ÃüÔËµÄ³µÂÖ",group={6569,6510}},

{name="¶éÂä´óµØ",group={6571,6526}},

}



local NinjaSucc = {

--{name="Ãé×¼ÐÄÔà",group={5090,4528}},

{name="ÖÂÃüÒ»»÷",group={5063,4519},act=AT_W+AT_RMB+AT_LMB},

--{name="Á÷:¶àÖØÖÂÃüÒ»»÷",group={4520}},

{name="ºü×¦",group={5062,4522},act=AT_Shift+AT_RMB},

{name="°µÓ°¼ùÌ¤",group={4575,4523},act=AT_S+AT_E},

{name="°µÓ°·ÖÁÑ",group={4580,4531}},

{name="°µÉ±Ê×Áì",group={5038,5055},act=AT_Shift+AT_F},

--{name="Êø¸¿µÄÏÝÚå",group={4583,4505}},

{name="ºÚ°µÔÂ¹â",group={5057,4538},act=AT_Shift+AT_C},

{name="ÍöÕßÕ¶Ê×",group={5061,5007},act=AT_Shift+AT_E},

{name="»ØÐýµ¶ÈÐ",group={5058,5003}},

{name="Ò¹ÐÐ:ÎÞÏ¢",group={5092},act=AT_F},

{name="¶ñ¶¾Ö®Ø°Ê×",group={5052},act=AT_W+AT_C},

{name="³àÉ±½£Óê",group={5066},act=AT_S+AT_RMB},

{name="ÂÒÎè",group={5067},act=AT_S+AT_C},

{name="ÑÌÄ»",group={5064,4529}},

{name="ÊÖÀï½£:ÌÓÍö",group={5060,5002},act=AT_S+AT_Q},

{name="ÊÖÀï½£:É±Òâ",group={5059,5001},act=AT_Q},

{name="»Ø±ÜÊÖÀï½£É±Òâ",group={5065},act=AT_A+AT_Q},

--{name="µØÃæ´Ì",group={4582,4503},act=AT_S+AT_F},

{name="Ä¾Í··ÖÉí",group={4504},act=AT_Shift+AT_Q},

{name="ÊÖÀï½£:ÔÂ¹âÏéÔÆ",id=2756,act=AT_Shift+AT_X},

{name="ÈÌÊõ:Õ¶Ê×",id=2811,act=AT_Shift+AT_Z},

{name="¹í×¦",id=4038},

--{name="ÈÌÕß²½·¥",group={5004},act=AT_W+AT_RMB},

--{name="Àä¿áµÄÒâÖ¾",group={4586,4539},act=AT_Shift+AT_Space},

--{name="ÊÖÀï½£µÄ×·»÷",group={4542}},

--{name="¹íÓ°Î¢²½",group={4507}},

--{name="µØÃæÂäÏÂ",group={4571,4518},act=AT_E},

}



local WarriorSucc = {

{name="¶·Ö¾ÔöÇ¿",group={600},act=AT_Shift+AT_E},

{name="µØÃæÕ¶",group={609,560},act=AT_S+AT_E},

{name="×ÆÈÈ",group={607},act=AT_W+AT_C},

{name="»ØÐýÕ¶",group={598,548},act=AT_S+AT_RMB},

{name="ÃÍÕ¶",group={597,547},act=AT_LMB+AT_RMB},

{name="·´»÷×ËÌ¬",group={603,510},act=AT_S+AT_LMB},

{name="·è¿ñÖ®Ç¹",id=2734,act=AT_Shift+AT_X},

{name="»Æ»èÕ¶",id=4054},

{name="Ê×¼¶´Ì»÷",group={523},act=AT_Shift+AT_LMB},

{name="»Æ»èÖ®éä",group={599,521},act=AT_C},

{name="·ÛËé",group={608},act=AT_S+AT_C},

{name="¶ÜÅÆ³å»÷",group={631,511},act=AT_W+AT_RMB},

{name="µØÃæÃÍ»÷",group={601,550},act=AT_Shift+AT_F},

}



local DrakaniaAwk = {

{name="È¼ÉÕµÄ¶·Ö¾",group={12581}},

{name="ÆÆÃðµÄÍ»½ø",group={12574},act=AT_W+AT_E},

{name="Ñ¤ÀÃµÄÖÕ½á",group={12577},act=AT_Shift+AT_F},

{name="ÄæÁÛ´Ì»÷",group={12568},act=AT_Shift+AT_LMB},

--{name="ÁúÖ®²½·¥",group={12555},act=AT_Shift+AT_A},

{name="»®¿ª´óµØµÄÅØÏø",group={12575},act=AT_S+AT_F},

{name="ËºÁÑ»ð»¨",group={12573},act=AT_F},

{name="Á÷:±¯×³µÄÀû×¦",group={12576},act=AT_LMB+AT_RMB},

{name="ÆÆ·çÖ®Ã¬",group={12571},act=AT_S+AT_RMB},

{name="ÒÅ²ú¼Ì³Ð",group={12593},act=AT_Space},

{name="Á÷:ÁúÍþ",group={12606},act=AT_Shift+AT_E},

{name="ÆÆÃðÖ®Òýµ¼Õß",group={12580},act=AT_Shift+AT_Q},

{name="ÆÆÃðµÄÍ»½ø",group={12588},act=AT_S+AT_E},

{name="ËÀÍöÐû¸æ",group={12585},act=AT_S+AT_LMB},

{name="ÄæÁÛ´Ì»÷",group={12583},act=AT_Shift+AT_LMB},

{name="Á÷:¶ÏÔÆ",group={12590},act=AT_RMB+AT_LMB},

{name="¿Ì¹ÇÅ­Ô¹",group={12584},act=AT_Shift+AT_RMB},

{name="ÆÆ·çÖ®Ã¬",group={12586},act=AT_S+AT_RMB},

}



local Shai = {

{name="Ì«ÑôÔÂÁÁÐÇÐÇ",group={9034},act=AT_F},

{name="º°ÉùÕðÌì",group={9035},act=AT_S+AT_F},

{name="ÎÒµÄÖ÷³¡",group={9036},act=AT_RMB},

{name="ÏÄÓê",group={9028},act=AT_S+AT_RMB},

}



local DosaSucc = {

{name="Á÷:ÔÆ½«¾ü",group={14154},act=AT_C},

{name="Å¨Îí",group={14120,14119},act=AT_W+AT_F},

{name="»¨Îí",group={14129,14128},act=AT_W+AT_RMB},

{name="²øÔÆ",group={14155,14103},act=AT_RMB},

{name="ÇïÏì",group={14164,14130},act=AT_Shift+AT_E},

{name="¶¬¾ÛÓê",group={14161,14124},act=AT_Shift+AT_F},

{name="´ºËª",group={14165,14137},act=AT_Shift+AT_LMB},

{name="ÏÄ·ç",group={14162,14126},act=AT_Shift+AT_RMB},

{name="Ì«¼«",group={14163,14135},act=AT_Shift+AT_Q},

{name="ÏòÏÂ¿³»÷",group={14106,14105},act=AT_F},

}



function LahnSuccCombo(p,mob)

	Bot.SkillDist = 800

	local function LahnReal2()

		if SkillCDOK(8006) then

			Ainput(AT_F)

		elseif SkillCDOK(8021) then

			Ainput(AT_S+AT_F)

		elseif SkillGroupCDOK({8009,8007}) then

			Ainput(AT_S+AT_LMB)

		elseif SkillCDOK(8126) then

			Ainput(AT_Shift+AT_LMB)

		elseif SkillCDOKByID(3325) then

			Ainput(AT_Shift+AT_X)

		elseif SkillCDOKByID(3327) then

			Ainput(AT_Shift+AT_Z)

		elseif SkillCDOKByID(4032) then

			QuickSlotSkillGroup(4032)

		elseif SkillGroupCDOK({8044,8042}) then

			Ainput(AT_RMB)

		elseif SkillGroupCDOK({8016,8014}) then

			Ainput(AT_LMB+AT_RMB)

		end

	end

	local function LahnSuccReal(p,mob)

		if SkillCDOK(8096) then

			Ainput(AT_E)

		elseif SkillCDOK(8031) then

			Ainput(AT_Shift+AT_Q)

		elseif SkillCDOK(8103) then

			Ainput(AT_C)

		elseif SkillCDOK(8051) then

			 Ainput(AT_A+AT_RMB)

		else

			LahnReal2()

		end

	end

	if CheckAT("BT_UP_Skill_BladeThrough") or CheckAT("BT_UP_Skill_Att_FullBloom") then

		if SkillGroupCDOK({8051,8050,8042}) then

			local i= math.random(1,2) if i == 1 then Ainput(AT_A+AT_RMB) else Ainput(AT_D+AT_RMB) end

		else

			LahnReal2()

		end

	elseif CheckAT("BT_Skill_Att_Sword_Att") then

		LahnReal2()

	elseif CheckAT("BT_UP_Skill_Att_Kick") then

		if CheckAT("Final") then Ahold(AT_S+AT_F) else Ahold(AT_F) end

	elseif CheckAT("BT_UP_Skill_Att_Crack") then

		if CheckAT("Combo_D") then Ahold(AT_S+AT_LMB) else Ahold(AT_S+AT_F) end

	elseif CheckAT("BT_UP_Skill_Att_Bash") then

		if CheckAT("Bash_D") then 

			if SkillCDOK(8126) then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle+3.14)

				setYaw(angle+3.14)

				Ainput(AT_Shift+AT_LMB)

			else

				if SkillCDOKByID(3325) then

					Ainput(AT_Shift+AT_X)

				elseif SkillCDOKByID(3327) then

					Ainput(AT_Shift+AT_Z)

				elseif SkillCDOKByID(4032) then

					QuickSlotSkillGroup(4032)

				end

			end 

		else 

			Ahold(AT_S+AT_LMB) 

		end

	elseif CheckAT("BT_Fusion_Skill_Dash") or CheckAT("BT_Fusion_Skill_Crack") or CheckAT("BT_Fusion_Skill_Penetration") or CheckAT("Fusion_Att_Sweep") then

		Ahold(AT_RMB)

	elseif CheckAT("BT_Skill_AbyssOne") then

		if CheckAT("_End") then

			Bot.SkillRushBack = false

			Ahold(AT_RMB)

		end

	elseif CheckAT("BT_UP_Skill_Att_Sword_Att") then

		Ahold(AT_RMB)

	elseif CheckAT("BT_UP_Skill_Cancel_Attack") then

		if CheckAT("Attack_C") then

			Ainput(AT_LMB+AT_RMB)

		else

			Ahold(AT_RMB)

		end

	elseif CheckAT("BT_UP_Skill_Att_Pulverize") then

		if CheckAT("End") then

			if p.Mp >= 150 then

				if not HasBuff(12033) then

					Ainput(AT_Q)

				end

			end

			if SkillCDOK(8031) then

				Ainput(AT_Shift+AT_Q)

			elseif SkillCDOK(8103) then

				Ainput(AT_C)

			end

		end

	elseif CheckAT("Airwalk") then

		Ainput(AT_F)

	else

		LahnSuccReal(p,mob)

	end

end



function HasasinAwkCombo(p,mob)

	Bot.SkillDist = 800

	if not CheckAT("ARO") and not CheckAT("BT_Skill_SpinKick_Att") then

		QuickSlotSkillGroup(10074,1)

	else

		if CheckAT("BT_ARO_Skill_Kick") then

			Bot.ComboIdx = 1

			if SkillCDOK(10110) then

				Ainput(AT_LMB)

			else

				Ainput(AT_S+AT_LMB)

			end

		elseif CheckAT("BT_Skill_SpinKick_Att") then

			if SkillCDOK(10110) then

				Ainput(AT_Space)

			else

				QuickSlotSkillGroup(10074,1)

			end

		elseif CheckAT("BT_ARO_Skill_SlidingAtt") then

			if CheckAT("_Upper") then

				if Bot.ComboIdx == 1 then

					Ainput(AT_RMB)

				elseif Bot.ComboIdx == 2 then

					Ainput(AT_RMB)

				elseif Bot.ComboIdx == 4 then

					Ainput(AT_Shift+AT_LMB)

				end

			else

				Bot.ComboIdx = 4

				Ainput(AT_RMB)

			end

		elseif CheckAT("BT_ARO_Skill_Lunge") then

			if Bot.ComboIdx == 1 then

				Ainput(AT_S+AT_LMB)

			elseif Bot.ComboIdx == 2 then

				if SkillCDOK(10110) then

					Ainput(AT_Space)

				else

					Bot.ComboIdx = 3

				end

			elseif Bot.ComboIdx == 3 then

				if SkillCDOK(10069) then

					Ahold(AT_Shift+AT_RMB)

				elseif SkillCDOK(10063) then

					Ainput(AT_W+AT_RMB)

				elseif SkillCDOK(10064) then

					Ainput(AT_Shift+AT_LMB)

				elseif SkillCDOK(10074) then

					Ainput(AT_Q)

				end

			elseif Bot.ComboIdx == 4 then

				Ainput(AT_Space)

			elseif Bot.ComboIdx == 5 then

				Ainput(AT_Shift+AT_LMB)

			end

		elseif CheckAT("BT_ARO_Skill_Charge") then

			if not CheckAT("Jump") then

				Ainput(AT_LMB)

			else

				if SkillCDOK(10074) then

					Ainput(AT_Q)

				else

					Ainput(AT_S+AT_F)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Shoot") then

			Ainput(AT_S+AT_F)

		elseif CheckAT("BT_ARO_Skill_Ground") then

			if not CheckAT("End") and not CheckAT("Att") then

				Ahold(AT_Shift+AT_RMB)

			else

				if SkillCDOK(10063) then

					Ainput(AT_W+AT_RMB)

				else

					Ainput(AT_W+AT_F)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Whirlwind") then

			Ainput(AT_W+AT_F)

		elseif CheckAT("BT_ARO_Skill_Link") then

			if not CheckAT("00_Jin") and not CheckAT("01_Jin") and not CheckAT("Sit_01") and not CheckAT("Cool") then

				Ainput(AT_S+AT_LMB)

			else

				Ainput(AT_Shift+AT_F)

			end

		elseif CheckAT("BT_ARO_Skill_SpinBash_A") then

			if not CheckAT("Flow") then

				Ainput(AT_F)

			else

				Ainput(AT_S+AT_RMB)

			end

		elseif CheckAT("BT_ARO_Skill_SpinBash_B") then

			Bot.ComboIdx = 2

			Ainput(AT_RMB)

		else

			if SkillCDOK(10060) then

				Ainput(AT_Shift+AT_Q)

			elseif SkillCDOK(10071) then

				Ainput(AT_S+AT_F)

			elseif SkillCDOK(10066) then

				Ainput(AT_Shift+AT_F)

			elseif SkillCDOK(10068) then

				Ainput(AT_S+AT_RMB)

			elseif SkillCDOK(10069) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillCDOK(10063) then

				Ainput(AT_W+AT_RMB)

			elseif SkillCDOK(10064) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(10074) then

				Ainput(AT_Q)

			end

		end

	end

end



function TamerAwkCombo(p,mob)

	Bot.SkillDist = 800

	if p then

		if p.HpPrc <= 70 then

			if SkillCDOKByID(2741) then

				Ainput(AT_Shift+AT_X)

			elseif SkillCDOKByID(4040) then

				QuickSlotSkill(4040)

			end

		end

	end

	if Bot.SkillRushBack then

		if not CheckAT("Move_Evade") or CheckAT("Evade_B_B") then

			Bot.SkillRushBack = false

		end

	end

	if Bot.TpPriorityMob then

		if CheckAT("BT_ARO_Skill_Somersault") then

			if GetTime() - combatTp1 >= 100 then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				combatTp1 = GetTime()

			end

		end

	end

	local function TamerOrder()

		if SkillCDOK(2552) then

			Ainput(AT_Shift+AT_E)

		elseif SkillCDOK(2564) then

			QuickSlotSkillGroup(2564)

		elseif SkillCDOK(2561) then

			Ainput(AT_W+AT_F)

		elseif SkillCDOK(2639) then

			Ainput(AT_Shift+AT_F)

		elseif SkillCDOK(2555) then

			Ainput(AT_S+AT_LMB)

		elseif SkillCDOK(2557) then

			Ainput(AT_Shift+AT_RMB)

		end

	end

	local function TamerRealCombo(p,mob)

		if not CheckAT("ARO") then

			if SkillCDOK(2561) then

				Ainput(AT_W+AT_F)

			else

				Ainput(AT_W+AT_C)

			end

		else

			if CheckAT("BT_ARO_Skill_SummonHaetae") then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle+3.14)

				setYaw(angle+3.14)

				Ainput(AT_Shift+AT_S)

			elseif CheckAT("BT_ARO_Skill_Somersault") then

				if not CheckAT("End_Att") then

					Ainput(AT_LMB)

				else

					TamerOrder()

				end

			elseif CheckAT("BT_ARO_Skill_Move_Evade_B") then

				Ainput(AT_W+AT_F)

			elseif CheckAT("BT_ARO_ATTACK_Fog") then

				if not CheckAT("Cut") then

					Ainput(AT_LMB)

				else

					Bot.ComboIdx = 1

					Ainput(AT_F)

				end

			elseif CheckAT("BT_ARO_Skill_Lever") then

				if not CheckAT("_01") then

					if SkillCDOK(2563) then

						Ainput(AT_F)

					else

						local i =math.random(1,2)

						if i ==1 then Ainput(AT_RMB) else Ainput(AT_A+AT_RMB) end	

					end

				else

					if Bot.ComboIdx == 1 then

						local i =math.random(1,2)

						if i ==1 then Ainput(AT_RMB) else Ainput(AT_A+AT_RMB) end	

					elseif Bot.ComboIdx == 2 then

						if SkillCDOK(2564) then

							QuickSlotSkillGroup(2564)

						else

							Bot.SkillRushBack = true

							local mx,my,mz = Pos()

							local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

							SetFace(angle+3.14)

							setYaw(angle+3.14)

							Ainput(AT_Shift+AT_S)

						end

					end

				end

			elseif CheckAT("BT_ARO_Skill_Bash") then

				if CheckAT("Lv_2") then

					Ainput(AT_Shift+AT_Q)

				end

			elseif CheckAT("BT_ARO_Skill_Lunge_Eco") then

				Ainput(AT_S+AT_LMB)

			elseif CheckAT("BT_ARO_Skill_Stick_Smash") then

				Ainput(AT_Shift+AT_RMB)

			elseif CheckAT("BT_ARO_Skill_Crush") then

				Ainput(AT_S+AT_LMB)

			elseif CheckAT("BT_ARO_Skill_Flow_Crush_D") then

				Ainput(AT_Shift+AT_F)

			elseif CheckAT("BT_ARO_Skill_Vagary") then

				if not CheckAT("Consecutively") then

					Ainput(AT_RMB)

				else

					Ainput(AT_Space)

				end

			elseif CheckAT("BT_ARO_Skill_Lunge") then

				Bot.ComboIdx = 2

				Ainput(AT_F)

			else

				TamerOrder()

			end

		end

	end

	if p.SummonCount == 0 then

		if SkillCDOK(2546) then

			QuickSlotSkillGroup(2546)

		else

			TamerRealCombo(p,mob)

		end

	else

		--if SkillCDOK(2507) then

			--QuickSlotSkillGroup(2507)

		--else

			TamerRealCombo(p,mob)

		--end

	end

end



function WoosaCombo(p,mob)

	Bot.SkillDist = 800

	if CheckAT("BT_UP_Skill_WhirlWind") then

		if not CheckAT("_A_") then

			if CheckAT("WhirlWind_Ing") or CheckAT("End") then

				Ainput(AT_F)

			end

		else

			if CheckAT("_A_Att1") or CheckAT("_A_Att2") or CheckAT("_A_Move") or CheckAT("_A_End") then

				if SkillCDOK(13517) then

					Ainput(AT_RMB)

				elseif SkillGroupCDOK({13553,13518}) then

					Ainput(AT_S+AT_E)

				else

					Ainput(AT_Shift+AT_LMB)

				end

			elseif CheckAT("_A_3") or CheckAT("_A_3_") then

				Ainput(AT_S+AT_LMB)

			end

		end

	elseif CheckAT("BT_Skill_WhirlWind_A_Flow") then

		if SkillGroupCDOK({13553,13518}) then

			Ainput(AT_S+AT_E)

		else

			Ainput(AT_Shift+AT_LMB)

		end

	elseif CheckAT("BT_UP_Skill_Combo_E") then

		if CheckAT("_E_02") then

			Ainput(AT_F)

		else

			Ainput(AT_F)

		end

	elseif CheckAT("BT_Skill_Combo_E") then

		Ainput(AT_F)

	elseif CheckAT("BT_UP_Skill_Lightning") then

		Ainput(AT_Shift+AT_F)

	elseif CheckAT("BT_UP_Skill_CauseWind_A") then

		Ainput(AT_Shift+AT_LMB)

	elseif CheckAT("BT_UP_Skill_CauseWind_B") then

		Ainput(AT_W+AT_E)

	elseif CheckAT("BT_UP_Skill_Throw_Sword") then

		if CheckAT("Sword_A") then

			Ainput(AT_E)

		elseif CheckAT("Sword_B") then

			Ainput(AT_E)

		end

	elseif CheckAT("BT_Skill_Throw_Sword") then

		Ainput(AT_E)

	elseif CheckAT("BT_Skill_Combo_A_") then

		if CheckAT("_A_02") then

			Ainput(AT_Shift+AT_RMB)

		else

			Ainput(AT_E)

		end

	elseif CheckAT("BT_UP_Skill_Throw_Fan_B") then

		Ainput(AT_W+AT_C)

	elseif CheckAT("BT_Skill_Charm_Throw_C") then

		if CheckAT("C_3_Att") or CheckAT("End") then

			Ainput(AT_Space)

		end

	elseif CheckAT("BT_UP_Skill_Throw_Fan_C") then

		if not CheckAT("Power_Att") and not CheckAT("End") then

			Ahold(AT_Space)

		else

			Ainput(AT_C)

		end

	elseif CheckAT("BT_Skill_Charm_Throw_B_") then

		Ainput(AT_Shift+AT_Q)

	else

		if SkillCDOK(13562) then

			QuickSlotSkillGroup(13562)

		elseif SkillGroupCDOK({13560,13508}) then

			Ainput(AT_Shift+AT_Q)

		elseif SkillGroupCDOK({13558,13532}) then

			Ainput(AT_F)

		elseif SkillGroupCDOK({13552,13534}) then

			Ainput(AT_S+AT_F)

		elseif SkillGroupCDOK({13551,13543}) then

			Ainput(AT_Shift+AT_F)

		elseif SkillGroupCDOK({13550,13511}) then

			Ainput(AT_W+AT_E)

		elseif SkillGroupCDOK({13556,13538}) then

			Ainput(AT_Shift+AT_E)

		elseif SkillGroupCDOK({13561,13535}) then

			Ainput(AT_Shift+AT_RMB)

		elseif SkillGroupCDOK({13553,13518}) then

			Ainput(AT_S+AT_E)

		elseif SkillGroupCDOK({13559,13506}) then

			Ainput(AT_S+AT_LMB)

		elseif SkillGroupCDOK({13554,13504}) then

			Ainput(AT_Shift+AT_LMB)

		elseif SkillCDOK(13580) then

			Ainput(AT_W+AT_C)

		elseif SkillCDOK(13579) then

			Ainput(AT_C)

		end

	end

end



function ArcherCombo(p,mob)

	Bot.SkillDist = 1100

	if Bot.TpPriorityMob then

		if CheckAT("BT_ARO_Att_Skill_Rolling_Shoot") or CheckAT("BT_ARO_Att_Skill_New_C") then

			if GetTime() - combatTp1 >= 300 then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				combatTp1 = GetTime()

			end

		end

	end

	local function SkillSet(p,mob)

		if not CheckAT("ARO") and not CheckAT("Aro") then

			if SkillCDOK(8594) then

				QuickSlotSkillGroup(8594)

			elseif SkillGroupCDOK({8514,8513}) then

				Ainput(AT_Shift+AT_F)

			elseif SkillGroupCDOK({8531,8530}) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillCDOK(8595) then

				Ainput(AT_Shift+AT_Q)

			elseif SkillCDOK(8567) then

				Ainput(AT_W+AT_RMB)

			elseif SkillGroupCDOK({8510,8509}) then

				Ainput(AT_W+AT_E)

			elseif SkillGroupCDOK({8592,8544}) then

				local i = math.random(1,2) if i ==1 then Ainput(AT_A+AT_F) else Ainput(AT_D+AT_F) end

			elseif SkillGroupCDOK({8517,8516}) then

				Ainput(AT_Shift+AT_E)

			elseif SkillCDOK(8516) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(8556) then

				Ainput(AT_S+AT_F)

			else

				Ainput(AT_W+AT_C)

			end

		else

			if SkillCDOK(8594) then

				QuickSlotSkillGroup(8594)

			elseif SkillCDOK(8516) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(8566) then

				Ainput(AT_Shift+AT_E)

			elseif SkillCDOK(8591) then

				Ainput(AT_S+AT_Q)

			elseif SkillCDOK(8553) then

				Ainput(AT_Shift+AT_Q)

			elseif SkillCDOK(8559) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillGroupCDOK({8510,8509}) then

				Ainput(AT_W+AT_E)

			else

				Ainput(AT_W+AT_C)

			end

		end

	end

	if Bot.SkillRushBack then

		if not Bot.ComboCountT1 then Bot.ComboCountT1 = GetTime() else if GetTime() - Bot.ComboCountT1 >= 200 then  Bot.SkillRushBack = false end end

	else

		Bot.ComboCountT1 = nil

	end

	if CheckAT("BT_ARO_Att_Skill_New") then

		if CheckAT("New_C_Att") or CheckAT("End") then

			Bot.ComboIdx = 1

			local i = math.random(1,2) if i == 1 then Ainput(AT_A+AT_RMB) else Ainput(AT_D+AT_RMB) end

		else

			if CheckAT("A_Att") or CheckAT("B_Att") then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle+3.14)

				setYaw(angle+3.14)

				Ainput(AT_RMB)

			else

				Bot.SkillRushBack = false

			end

		end

	elseif CheckAT("BT_ARO_ATTACK_STAND_F") then

		if CheckAT("SHOOT") then

			if Bot.ComboIdx == 3 then

				if SkillCDOK(8594) then

					QuickSlotSkillGroup(8594)

				else

					Ainput(AT_W+AT_RMB)

				end

			else

				if SkillCDOK(8552) then

					Ainput(AT_Q)

				else

					Ainput(AT_W+AT_E)

				end

			end

		end

	elseif CheckAT("BT_ARO_Skill_Buff") then

		Ainput(AT_W+AT_E)

	elseif CheckAT("BT_Skill_Att_SlidingMultishot_") then

		Ainput(AT_Shift+AT_F)

	elseif CheckAT("BT_Skill_Att_DodgeSoulExplosion") then

		if SkillGroupCDOK({8531,8530}) then

			Ainput(AT_Shift+AT_RMB)

		elseif SkillCDOK(8595) then

			Ainput(AT_Shift+AT_Q)

		else

			Ainput(AT_W+AT_RMB)

		end

	elseif CheckAT("BT_Skill_Att_NapalmShoot_") then

		if SkillCDOK(8595) then

			Ainput(AT_Shift+AT_Q)

		else

			Bot.ComboIdx = 1

			Ainput(AT_Space)

		end

	elseif CheckAT("BT_Skill_Att_Dagger_") then

		local i = math.random(1,2) if i ==1 then Ainput(AT_A+AT_F) else Ainput(AT_D+AT_F) end

	elseif CheckAT("BT_Skill_AbyssOne") then

		Ainput(AT_W+AT_RMB)

	elseif CheckAT("BT_ARO_Skill_CrescentKick_") then

		Ainput(AT_RMB)

	elseif CheckAT("BT_Skill_Att_LeftHand_F_") then

		Ainput(AT_Space)

	elseif CheckAT("BT_ARO_Skill_Att_Skill_Normal_Spear_Att") then

		if SkillCDOK(8568) then

			Ainput(AT_RMB)

		else

			SkillSet(p,mob)

		end

	elseif CheckAT("BT_Skill_Att_MachineGun_") then

		Ainput(AT_Shift+AT_E)

	elseif CheckAT("BT_Skill_Att_Bombing_") then

		Ainput(AT_Shift+AT_LMB)

	elseif CheckAT("BT_ARO_Skill_Att_Skill_ChainAtt_Jump") then

		if SkillCDOK(8590) then

			Ainput(AT_W+AT_F)

		else

			Ainput(AT_Shift+AT_E)

		end

	elseif CheckAT("BT_ARO_Att_Skill_Gildong") then

		Ainput(AT_Shift+AT_E)

	elseif CheckAT("BT_ARO_Skill_Splash_Shot") or CheckAT("BT_ARO_RUN_BACK") then

		Ainput(AT_S+AT_Q)

	elseif CheckAT("BT_ARO_Skill_Splash_LongShot_") then

		Ainput(AT_Shift+AT_Q)

	elseif CheckAT("BT_ARO_Skill_ChargingHalf_") then

		Ainput(AT_Shift+AT_RMB)

	elseif CheckAT("BT_ARO_Skill_Stand_Shoot_") or CheckAT("BT_ARO_Skill_Sliding_Shoot") then

		if not CheckAT("Att_") then

			if not CheckAT("Shoot_Ing2") then

				Ahold(AT_Shift+AT_RMB)

			else

				Areset()

			end

		else

			Bot.SkillRushBack = true

			local mx,my,mz = Pos()

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			SetFace(angle+3.14)

			setYaw(angle+3.14)

			Ainput(AT_RMB)

		end

	elseif CheckAT("BT_ARO_Skill_JumpAtt_02_") then

		if SkillCDOK(8557) then

			Ainput(AT_RMB)

		elseif SkillCDOK(8594) then

			QuickSlotSkillGroup(8594)

		elseif SkillGroupCDOK({8514,8513}) then

			Ainput(AT_Shift+AT_F)

		else

			Ainput(AT_W+AT_RMB)

		end

	elseif CheckAT("BT_ARO_Skill_SG") then

		Bot.ComboIdx = 2 local i = math.random(1,2) if i == 1 then Ainput(AT_A+AT_RMB) else Ainput(AT_D+AT_RMB) end

	elseif CheckAT("BT_ARO_Att_Skill_Rolling_Shoot") then

		if Bot.ComboIdx == 2 then

			Bot.ComboIdx = 3

			Ainput(AT_RMB)

		else

			Ainput(AT_RMB)

		end

	else

		SkillSet(p,mob)

	end

end



function MysticAwkCombo(p,mob)

	Bot.SkillDist = 850

	if p then

		if p.MpPrc <= 20 then

			

		end

		if p.HpPrc <= 70 then

			

		end

	end

	local function DMG(mob)

	local list = {

{name="Skill_Recovery",group={7566}},

{name="BT_ARO_Skill_Buff",group={7548},act=AT_Shift+AT_E},

{name="DragonSummon",group={7560}},

{name="Skill_Gather",group={7564},act=AT_E+AT_S},

{name="Foward_D_KICK_Jin",group={7553},act=AT_Shift+AT_LMB,nocd=1},

{name="Consecutively_D",group={7551},act=AT_RMB+AT_Shift,nocd=1},

{name="_SpritBomb",group={7519},act=AT_Space},

{name="_GroundAtt",group={7562},act=AT_Shift+AT_Q},

{name="_Drill_Kick",group={7558},act=AT_W+AT_F},

{name="Hand_Combo_End",group={7561},act=AT_RMB},

{name="B_Charging",group={7635},act=AT_RMB},

{name="DragonSpinKick",group={7633},act=AT_LMB},

{name="Skill_Charging",group={7554},act=AT_RMB+AT_LMB},

{name="AbyssOne",group={7555}},

{name="_Fusion2",id=2774,act=AT_Shift+AT_X},

{name="Erupt_Start",group={7586},act=AT_Q+AT_Shift},

{name="Fusion_Skill",id=2936,act=AT_Shift+AT_Z},

{name="Kick_Combo_",id=4059},

{name="Skill_Elbow",group={7529},act=AT_LMB},

{name="Att_Keysi",group={7585},act=AT_RMB+AT_LMB},

{name="Power_Dunk",group={7556},act=AT_RMB+AT_W},

{name="Skill_Kick_",group={7636},act=AT_RMB+AT_S},

{name="_Spin_Att_B",group={7563},act=AT_F,nocd=1},

}

DoSkillOrder(list,mob)

end

	if not CheckAT("Aro") and not CheckAT("ARO") and not CheckAT("AbyssOne") and not CheckAT("Erupt") and not CheckAT("Fusion") and not CheckAT("Att_Keysi") and not CheckAT("Kick_Combo") and not CheckAT("Elbow") then

		if SkillCDOK(7556) then

			QuickSlotSkillGroup(7556)

		elseif SkillCDOK(7633) then

			QuickSlotSkillGroup(7633)

		elseif SkillCDOK(7558) then

			QuickSlotSkillGroup(7558)

		elseif SkillCDOK(7566) then

			QuickSlotSkillGroup(7566)

		else

			Ainput(AT_C+AT_W)

		end

	else

		DMG(mob)

	end

end



function WizardAwkCombo(p,mob)

	Bot.SkillDist = 850

	if p then

		if p.MpPrc <= 20 then

			WitchRegnMp()

		end

		if p.HpPrc <= 70 then

			WitchRegnHp()

		end

	end

	local function DMG(mob)

	local list = {

{name="BT_ARO_Skill_Buff",group={6003},act=AT_Shift+AT_E},

{name="Summon_Magic_Lighthouse",group={5532}},

{name="BT_ARO_Skill_Field_Att",group={6004},act=AT_E},

{name="BT_ARO_Casting_E_",group={6010},act=AT_F+AT_Shift},

{name="BT_ARO_FireBomb_",group={6020},act=AT_S+AT_Q},

{name="BT_ARO_Casting_A_",group={6008},act=AT_Shift+AT_LMB},

{name="BT_ARO_Casting_B_",group={6012},act=AT_W+AT_F},

{name="BT_ARO_skill_Flood_Assert",group={6045},act=AT_S+AT_RMB},

{name="BT_ARO_WaterRain_",group={6017},act=AT_W+AT_RMB},

{name="BT_ARO_Casting_C_",group={6013},act=AT_S+AT_F},

{name="BT_ARO_Casting_A_",group={6008},act=AT_Shift+AT_LMB},

{name="BT_ARO_Casting_D_",group={6009},act=AT_S+AT_LMB+AT_RMB},

{name="BT_ARO_Casting_F_",group={6011},act=AT_Shift+AT_RMB},

{name="_F_AdditionAttack",group={6015},act=AT_RMB},

{name="BT_ARO_skill_Flood_Assert",group={6045},act=AT_S+AT_RMB},

{name="BT_ARO_Casting_E_",group={6010},act=AT_F+AT_Shift},

{name="BT_ARO_Casting_A_",group={6008},act=AT_Shift+AT_LMB},

{name="BT_ARO_Casting_B_",group={6012},act=AT_W+AT_F},

}

DoSkillOrder(list,mob)

end

	if not CheckAT("Aro") and not CheckAT("ARO") then

		QuickSlotSkillGroup(6011,1)

	else

		DMG(mob)

	end

end



function DosaRegenHp(p,mob)

	if SkillGroupCDOK({14164,14130}) then

		Ainput(AT_Shift+AT_E)

		return true

	elseif SkillGroupCDOK({14163,14135}) then

		Ainput(AT_Shift+AT_Q)

		return true

	else

		return false

	end

end



function DosaRegenMp(p,mob)

	local function baseregen()

		if SkillGroupCDOK({14120,14119}) then

			if p.Sp >= 100 then

				Ainput(AT_W+AT_F)

			else

				if SkillGroupCDOK({14123,14122}) then

					Ainput(AT_E)

				else

					Ainput(AT_LMB)

				end

			end

		elseif SkillGroupCDOK({14123,14122}) then

			Ainput(AT_E)

		else

			Ainput(AT_LMB)

		end

	end

	if CheckAT("BT_Skill_Combo_E_") then

		if CheckAT("_03") then

			baseregen()

		else

			Ainput(AT_E)

		end

	else	

		baseregen()

	end

end



function DosaCombo(p,mob)

	Bot.SkillDist = 850

	if SkillCDOK(14152) then

		QuickSlotSkillGroup(14152)

	end

	if CheckAT("BT_Skill_Fog_Dash_") then

		Bot.ComboIdx = 1

		Ainput(AT_LMB)

	end

	if Bot.TpPriorityMob then

		if CheckAT("BT_Skill_Passive_Move") then

			if mob.face then

				local mx,my,mz = Pos()

				local nx = mob.mx + 25*math.cos(-(mob.face+4.71))

				local ny = mob.my + 25*math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

			end

		end

	end

	if Bot.SkillRushBack then

		if CheckAT("BT_Skill_Passive_Move") then

			Bot.SkillRushBack = false

		end

	end

	if p then

		if p.HpPrc <= 70 then

			DosaRegenHp(p,mob)

		end

	end

	if CheckAT("BT_UP_Skill_F_") or CheckAT("BT_UP_Skill_I_") then

		Bot.SkillRushBack = true

		local mx,my,mz = Pos()

		local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

		SetFace(angle+3.14)

		setYaw(angle+3.14)

		Ainput(AT_S)

	end

	local buff = GetBuffList()

	if not HasBuff(10468,buff) then

		Bot.ComboIdx = 1

		if CheckAT("BT_Skill_Cancle_O") then

			Ainput(AT_W+AT_F)

		elseif CheckAT("BT_Skill_Combo_C_") then

			if CheckAT("C_03") then

				Ainput(AT_W+AT_RMB)

			else

				if SkillCDOK(14121) then

					Ainput(AT_F)

				else

					Ainput(AT_W+AT_RMB)

				end

			end

		elseif CheckAT("BT_Skill_Combo_F_") then

			Ainput(AT_RMB)

		else	

			if SkillCDOK(14154) then

				Ainput(AT_C)

			elseif SkillGroupCDOK({14120,14119}) then

				Ainput(AT_W+AT_F)

			elseif SkillGroupCDOK({14129,14128}) then

				Ainput(AT_W+AT_RMB)

			else

				Ainput(AT_RMB)

			end

		end

	else

		--print(Bot.ComboIdx)

		if Bot.ComboIdx == 1 then

			if CheckAT("BT_UP_Skill_Combo_A_") then

				if CheckAT("_03") then

					Bot.ComboIdx = 2

					Ainput(AT_Shift+AT_E)

				else

					Ainput(AT_RMB)

				end

			else

				Ainput(AT_RMB)

			end

		elseif Bot.ComboIdx == 2 then

			if CheckAT("BT_UP_Skill_F_") then



			elseif CheckAT("F_Passive_Att") then

				Bot.ComboIdx = 3

				Ainput(AT_Shift+AT_F)

			elseif not CheckAT("Passive_Move") then

				if SkillGroupCDOK({14164,14130}) then

					Ainput(AT_Shift+AT_E)

				else

					Bot.ComboIdx = 3

				end

			end

		elseif Bot.ComboIdx == 3 then

			if CheckAT("BT_UP_Skill_A_") then

				Ainput(AT_W)

			elseif CheckAT("A_Passive_Att") then

				Bot.ComboIdx = 4

				Ainput(AT_Shift+AT_LMB)

			elseif not CheckAT("Passive_Move") then

				if SkillGroupCDOK({14161,14124}) then

					Ainput(AT_Shift+AT_F)

				else

					Bot.ComboIdx = 4

				end

			end

		elseif Bot.ComboIdx == 4 then

			if CheckAT("BT_UP_Skill_J") then

				Ainput(AT_W)

			elseif CheckAT("J_Passive_Att") then

				Bot.ComboIdx = 5

				Ainput(AT_Shift+AT_RMB)

			elseif not CheckAT("Passive_Move") then

				if SkillGroupCDOK({14165,14137}) then

					Ainput(AT_Shift+AT_LMB)

				else

					Bot.ComboIdx = 5

				end

			end

		elseif Bot.ComboIdx == 5 then

			if CheckAT("BT_UP_Skill_C_") then

				Bot.ComboIdx = 6

				Ainput(AT_Shift+AT_Q)

			else

				if SkillGroupCDOK({14162,14126}) then

					Ainput(AT_Shift+AT_RMB)

				else

					Bot.ComboIdx = 6

				end

			end

		elseif Bot.ComboIdx == 6 then

			if CheckAT("BT_UP_Skill_I_") then



			elseif CheckAT("I_Passive_Att") then

				Bot.ComboIdx = 7

				Ainput(AT_Space)

			else

				if SkillGroupCDOK({14163,14135}) then

					Ainput(AT_Shift+AT_Q)

				else

					Bot.ComboIdx = 7

				end

			end

		elseif Bot.ComboIdx == 7 then

			if CheckAT("BT_UP_Skill_Combo_H_") then

				Bot.ComboIdx = 8

				Ainput(AT_C)

			elseif CheckAT("WAIT") or CheckAT("RUN") or CheckAT("JUMP") then

				Ainput(AT_S+AT_LMB)

			else

				if SkillCDOK(14168) then

					Ainput(AT_Space)

				else

					Bot.ComboIdx = 8

				end

			end

		elseif Bot.ComboIdx == 8 then

			if CheckAT("BT_Skill_Cancle_O_") then

				Bot.ComboIdx = 9

				Ainput(AT_RMB)

			else

				if SkillCDOK(14154) then

					Ainput(AT_C)

				else

					Bot.ComboIdx = 9

				end

			end

		elseif Bot.ComboIdx == 9 then

			if CheckAT("BT_UP_Skill_Combo_A_") then

				if CheckAT("_03") then

					Bot.ComboIdx = 10

					Ainput(AT_F)

				else

					Ainput(AT_RMB)

				end

			else

				Ainput(AT_RMB)

			end

		elseif Bot.ComboIdx == 10 then

			if CheckAT("BT_UP_Skill_Combo_B_") then

				Ainput(AT_F)

			elseif CheckAT("_03_Att") then

				Bot.ComboIdx = 11

				Ainput(AT_W+AT_RMB)

			else

				if SkillGroupCDOK({14156,14107}) then

					Ainput(AT_F)

				else

					Bot.ComboIdx = 11

				end

			end

		elseif Bot.ComboIdx == 11 then

			if CheckAT("BT_Skill_Combo_F_") then

				Bot.ComboIdx = 12

				Ainput(AT_Space)

			else

				if SkillGroupCDOK({14129,14128}) then

					Ainput(AT_W+AT_RMB)

				else

					Bot.ComboIdx = 12

				end

			end

		elseif Bot.ComboIdx == 12 then

			if CheckAT("BT_UP_Skill_Combo_H_") then

				Bot.ComboIdx = 2

				Ainput(AT_Shift+AT_E)

			elseif CheckAT("WAIT") or CheckAT("RUN") or CheckAT("JUMP") then

				Ainput(AT_S+AT_LMB)

			else

				if SkillCDOK(14168) then

					Ainput(AT_Space)

				else

					Bot.ComboIdx = 2

				end

			end

		end

	end

end



function ShaiRegenHp()

	if SkillCDOK(9045) then

		QuickSlotSkillGroup(9045)

	elseif SkillCDOK(9013) then

		QuickSlotSkillGroup(9013)

	elseif SkillCDOK(9016) then

		QuickSlotSkillGroup(9016)

	end

end



function ShaiCombo(p,mob)

	Bot.SkillDist = 850

	if p then

		if p.HpPrc <= 70 then

			ShaiRegenHp()

		end

	end

	if Bot.SkillRushBack then

		if not CheckAT("BT_Skill_Dash_B_") then

			Bot.SkillRushBack = false

		end

	end

	if CheckAT("BT_Skill_Rider") then

		Ainput(AT_LMB)

	end

	local function ApplyBuff()

		if CheckAT("BT_ARO_Skill_MusicStart_Flute_J") then

			Ahold(AT_S)

		elseif CheckAT("BT_ARO_Skill_Flute_Music_BACK") then

			Ainput(AT_S+AT_RMB)

		elseif CheckAT("BT_ARO_Skill_MusicStart_Flute_F") then

			Ainput(AT_F)

		elseif CheckAT("BT_ARO_Skill_MusicStart_Flute_H") then

			Ainput(AT_S+AT_F)

		elseif CheckAT("BT_ARO_Skill_MusicStart_Flute_I") then

			local i=math.random(1,2)

			if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

		elseif CheckAT("BT_Skill_Dash_L_") or CheckAT("BT_Skill_Dash_R_") then

			if SkillCDOK(9036) then

				QuickSlotSkillGroup(9036)

			elseif SkillCDOK(9028) then

				QuickSlotSkillGroup(9028)

			elseif SkillCDOK(9034) then

				QuickSlotSkillGroup(9034)

			elseif SkillCDOK(9035) then

				QuickSlotSkillGroup(9035)

			end

		else

			if SkillCDOK(9017) then

				local i=math.random(1,2)

				if i ==1 then Ainput(AT_A+AT_Shift) else Ainput(AT_D+AT_Shift) end

			else

				if SkillCDOK(9036) then

					QuickSlotSkillGroup(9036)

				elseif SkillCDOK(9028) then

					QuickSlotSkillGroup(9028)

				elseif SkillCDOK(9034) then

					QuickSlotSkillGroup(9034)

				elseif SkillCDOK(9035) then

					QuickSlotSkillGroup(9035)

				end

			end

		end

	end

	local buff = GetBuffList()

	if not HasBuff(14206,buff) or not HasBuff(14211,buff) or not HasBuff(14196,buff) or not HasBuff(14200,buff) then

		ApplyBuff()

	else

		if CheckAT("BT_ARO_Skill_MusicStart_Flute_I") then

			local i=math.random(1,2)

			if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

		elseif CheckAT("BT_Skill_AbyssOne_") then

			if CheckAT("_End") then

				local i=math.random(1,2)

				if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

			end

		elseif CheckAT("BT_ARO_Skill_MusicStart_Flute_A_") or CheckAT("BT_ARO_Skill_MusicStart_Lute_B_") then

			local i=math.random(1,2)

			if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

		elseif CheckAT("BT_ATTACK_Normal_R") or CheckAT("BT_ATTACK_Normal_L") then

			Ainput(AT_W+AT_F)

		elseif CheckAT("BT_RUN_R_RETURN") or CheckAT("BT_RUN_L_RETURN") then

			if SkillCDOK(9023) then

				QuickSlotSkillGroup(9023)

			elseif SkillCDOK(9024) then

				QuickSlotSkillGroup(9024)

			else

				Ainput(AT_W+AT_F)

			end

		elseif CheckAT("BT_Skill_DASH_F") then

			Ainput(AT_S+AT_LMB)

		elseif CheckAT("BT_Skill_Bounce") then

			if not Bot.ComboCountT1 then

				Bot.ComboCountT1 = GetTime()

			else

				if GetTime() - Bot.ComboCountT1 >= 650 then

					Bot.SkillRushBack = true

					local mx,my,mz = Pos()

					local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

					SetFace(angle+3.14)

					setYaw(angle+3.14)

					Ainput(AT_S+AT_Shift)

				end

			end

		elseif CheckAT("BT_Skill_WideThrow_") then

			Ainput(AT_S+AT_RMB)

		elseif CheckAT("BT_Skill_EvadeThrow_") then

			Ainput(AT_Shift+AT_LMB)

		elseif CheckAT("BT_Skill_Boomerang") then

			if not CheckAT("_C_") then

				if CheckAT("_End") or CheckAT("_A_") or CheckAT("_B_") then

					Ainput(AT_RMB)

				end

			else

				Bot.ComboCountT1 = nil

				Ainput(AT_RMB+AT_LMB)

			end

		elseif CheckAT("BT_Skill_Dash_B_") then

			local i=math.random(1,2)

			if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

		else

			if SkillCDOK(9023) then

				QuickSlotSkillGroup(9023)

			elseif SkillCDOK(9024) then

				QuickSlotSkillGroup(9024)

			else

				local i=math.random(1,2)

				if i ==1 then Ainput(AT_D+AT_LMB) else Ainput(AT_A+AT_LMB) end

			end

		end

	end

end



function DrakaniaAwkCombo(p,mob)

	local function HumanCombo()

		if CheckAT("BT_Aro_Skill_ThrowSpear_Dash_") then

			Ahold(AT_Shift+AT_F)

		elseif CheckAT("BT_Aro_Skill_Change_A_") then

			Ainput(AT_Shift+AT_LMB)

		elseif CheckAT("BT_Aro_Skill_Combo_Alpha_") then

			Ainput(AT_Shift+AT_A)

		elseif CheckAT("BT_Aro_Skill_Dash_L") then

			Ainput(AT_S+AT_F)

		elseif CheckAT("BT_Aro_Skill_FlameStrike_") then

			Ainput(AT_F)

		elseif CheckAT("BT_Aro_Skill_Cancle_A_") then

			Ainput(AT_RMB+AT_LMB)

		elseif CheckAT("BT_Aro_Skill_Flow_GammaSlash") then

			Ainput(AT_S+AT_RMB)

		elseif CheckAT("BT_Aro_Skill_Combo_Zeta_") then

			if not CheckAT("_03") then

				Ainput(AT_S+AT_RMB)

			else

				Ainput(AT_Space)

			end

		elseif CheckAT("BT_Aro_Skill_Change_Form_LeftSpear") then

			if not SkillCDOK(12573) then

				Ainput(AT_Shift+AT_E)

			else

				Ainput(AT_W+AT_E)

			end

		elseif CheckAT("BT_Aro_Skill_A_Att_Ground_") then

			Ainput(AT_Shift+AT_Q)

		else

			if SkillCDOK(12581) then

				QuickSlotSkillGroup(12581)

			elseif SkillCDOK(12574) then

				Ainput(AT_W+AT_E)

			elseif SkillCDOK(12577) then

				Ainput(AT_Shift+AT_F)

			elseif SkillCDOK(12568) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(12575) then

				Ainput(AT_S+AT_F)

			elseif SkillCDOK(12573) then

				Ainput(AT_F)

			elseif SkillCDOK(12576) then

				Ainput(AT_LMB+AT_RMB)

			elseif SkillCDOK(12571) then

				Ainput(AT_S+AT_RMB)

			elseif SkillCDOK(12606) then

				Ainput(AT_Shift+AT_E)

			elseif SkillCDOK(12593) then

				QuickSlotSkillGroup(12593)

			end

		end

	end

	local function DragonCombo()

		if CheckAT("BT_Aro_Skill_Change_Form_LeftSpear") or CheckAT("BT_Aro_Skill_Change_Form_RightSpear") then

			Ainput(AT_Shift+AT_E)

		elseif CheckAT("BT_Aro_Skill_JumpAtt_A_") then

			Ainput(AT_S+AT_E)

		elseif CheckAT("BT_Aro_Skill_ThrowSpear_Dash_") then

			Ainput(AT_S+AT_LMB)

		elseif CheckAT("BT_Aro_Skill_Combo_Gamma_") then

			if not CheckAT("_03_") then

				Ainput(AT_S+AT_LMB)

			else

				Ainput(AT_Shift+AT_LMB)

			end

		elseif CheckAT("BT_Aro_Skill_Combo_Alpha_") then

			Ainput(AT_RMB+AT_LMB)

		elseif CheckAT("BT_Aro_Skill_Flow_GammaSlash") then

			Ainput(AT_Shift+AT_RMB)

		elseif CheckAT("BT_Aro_Skill_Combo_Beta_") then

			if not CheckAT("_02_") then

				Ainput(AT_RMB)

			else

				Ainput(AT_S+AT_RMB)

			end

		elseif CheckAT("BT_Aro_Skill_FlameStrike_") then

			Ainput(AT_Space)

		else

			if SkillCDOK(12581) then

				QuickSlotSkillGroup(12581)

			elseif SkillCDOK(12580) then

				Ainput(AT_Shift+AT_Q)

			elseif SkillCDOK(12588) then

				Ainput(AT_S+AT_E)

			elseif SkillCDOK(12585) then

				Ainput(AT_S+AT_LMB)

			elseif SkillCDOK(12583) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(12590) then

				Ainput(AT_RMB+AT_LMB)

			elseif SkillCDOK(12584) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillCDOK(12586) then

				Ainput(AT_S+AT_RMB)

			elseif SkillCDOK(12606) then

				Ainput(AT_Shift+AT_E)

			end

			

		end

	end

	if not CheckAT("ARO") and not CheckAT("Aro") then

		Ainput(AT_W+AT_C)

	else

		local buff = GetBuffList()

		if HasBuff(12717,buff) then --Ä§ÈË

			HumanCombo()

		elseif HasBuff(12719,buff) then --Ä§Áú

			DragonCombo()

		else

			HumanCombo()

		end

	end

end



function ShowActionChange()

	if not Bot.LastAct then

		Bot.LastAct = ActionName()

		print(Bot.LastAct)

	else

		if Bot.LastAct ~= ActionName() then

			Bot.LastAct = ActionName()

			print(Bot.LastAct)

		end

	end

end



function WarriorSuccCombo(p,mob)

	Bot.SkillDist = 800

	if CheckAT("BT_UP_skill_ShotDash") or CheckAT("BT_UP_skill_GroundSmash_F") then

		if GetTime() - combatTp1 >= 110 then

			local mx,my,mz = Pos()

			local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

			local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

			local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

			if kx then

				Tp(kx,ky,kz)

			else

				Tp(nx,ny,mob.mz+Bot.TpAddtionH)

			end

			combatTp1 = GetTime()

		end

	end

	if not CheckAT("BT_skill_GroundEcho5") and not CheckAT("BT_UP_skill_SwordWind") and not CheckAT("BT_UP_Skill_Whirlwind_A") and not CheckAT("BT_skill_Fusion_SwordWind_Bash") then

		Bot.ComboCountT1 = nil

	end

	if CheckAT("BT_skill_GroundEcho5") then

		if not Bot.ComboCountT1 then

			Bot.ComboCountT1 = GetTime() 

		else

			if GetTime() - Bot.ComboCountT1 >= 500 then

				Ainput(AT_W+AT_LMB)

				Bot.ComboCountT1 = nil

			end

		end

	elseif CheckAT("BT_UP_skill_ShotDash_L") then

		Ainput(AT_Shift+AT_RMB)

	elseif CheckAT("BT_UP_skill_Buff") or CheckAT("BT_UP_ATTACK_S") then

		DoClassSkill(WarriorSucc)

	elseif CheckAT("BT_UP_skill_Defence") then

		if SkillGroupCDOK({601,550}) then

			Ainput(AT_Shift+AT_F)

		else

			DoClassSkill(WarriorSucc)

		end

	elseif CheckAT("BT_UP_skill_SwordClaw") then

		Ainput(AT_W+AT_C)

	elseif CheckAT("BT_UP_Skill_Lunge_") then

		Ainput(AT_S+AT_RMB)

	elseif CheckAT("BT_UP_skill_RotationBash") then

		if not CheckAT("Cool") then

			Ainput(AT_LMB+AT_RMB)

		else

			Ainput(AT_S+AT_LMB)

		end

	elseif CheckAT("BT_UP_skill_Bash_") then

		if not CheckAT("LV_3") then

			Ainput(AT_LMB+AT_RMB)

		else

			Ainput(AT_S+AT_LMB)

		end

	elseif CheckAT("BT_UP_skill_BackStance_") then

		if not CheckAT("Cool") then

			if SkillCDOKByID(2734) or SkillCDOK(2733) then

				Ainput(AT_Shift+AT_X)

			elseif SkillCDOKByID(4054) then

				QuickSlotSkill(4054)

			else

				Ainput(AT_LMB+AT_RMB)

			end

		else

			Ainput(AT_C)

		end

	elseif CheckAT("BT_Skill_Fusion_Javelin_") then

		if CheckAT("Javelin_ATTACK2") then

			if SkillCDOKByID(4054) then

				Ainput(AT_LMB)

			else

				Ainput(AT_Shift+AT_LMB)

			end

		end

	elseif CheckAT("BT_UP_skill_Whirlwind_") then

		Ainput(AT_LMB+AT_RMB)

	elseif CheckAT("BT_skill_AbyssOne") then

		Ainput(AT_S+AT_LMB)

	elseif CheckAT("BT_skill_Fusion_SwordWind_Bash") then

		if SkillCDOK(523) then

			Ainput(AT_Shift+AT_LMB)

		else

			Ainput(AT_D+AT_LMB)

		end

	elseif CheckAT("BT_UP_skill_ShotDash_R") then

		Ainput(AT_S+AT_LMB)

	elseif CheckAT("BT_UP_Skill_UpperSwing") then

		Ainput(AT_C)

	elseif CheckAT("BT_UP_skill_SwordWind") then

		if not CheckAT("_End") then

			if not Bot.ComboCountT1 then

				Bot.ComboCountT1 = GetTime()

			else

				if GetTime() - Bot.ComboCountT1 >= 1150 then

					Ainput(AT_S+AT_C)

				else

					Ainput(AT_W)

				end

			end

		else

			Ainput(AT_S+AT_C)

		end

	elseif CheckAT("BT_UP_Skill_Whirlwind_A") then

		if not Bot.ComboCountT1 then

			Bot.ComboCountT1 = GetTime()

		else

			if GetTime() - Bot.ComboCountT1 >= 1180 then

				Ainput(AT_W+AT_RMB)

			end

		end

	elseif CheckAT("BT_WAIT") then

		if not SkillCDOK(599) then

			if SkillCDOK(608) then

				Ainput(AT_S+AT_C)

			else

				DoClassSkill(WarriorSucc)

			end

		else

			Ainput(AT_C)

		end

	elseif CheckAT("BT_skill_ShieldDash_") then

		Ainput(AT_Shift+AT_F)

	elseif CheckAT("BT_UP_skill_GroundSmash") then

		if not CheckAT("_F") then

			if SkillGroupCDOK({602,524}) then

				Ainput(AT_Shift+AT_F)

			end

		else

			Ainput(AT_A+AT_LMB)

		end

	else

		Ainput(AT_Shift+AT_RMB)

	end

end



function GuardianOpCombo(p,mob)

	Bot.SkillDist = 800

	if p.MpPrc <= 50 then

		if SkillGroupCDOK({9517,9516}) then

			Ainput(AT_W+AT_RMB)

		end

	end

	if CheckAT("BT_Skill_Avoid_Combo") then

		if SkillGroupCDOK({9577,9532}) then

			Ainput(AT_Shift+AT_Q)

		elseif SkillGroupCDOK({9575,9524}) then

			Ainput(AT_Shift+AT_F)

		elseif SkillGroupCDOK({9576,9530}) then	

			Ainput(AT_Shift+AT_RMB)

		elseif SkillGroupCDOK({9573,9511}) then	

			Ainput(AT_Shift+AT_LMB)

		elseif SkillCDOK(9550) then

			Ainput(AT_S+AT_F)

		else

			Ainput(AT_S+AT_LMB)

		end

	elseif CheckAT("BT_Skill_TwoHand_JumpAtt_") then

		Ainput(AT_A+AT_RMB)

	elseif CheckAT("BT_UP_Skill_Ground") then

		if SkillCDOK(9520) then

			Ainput(AT_Q)

		else

			if CheckAT("_End") then

				Ainput(AT_Shift+AT_F)

			end

		end

	elseif CheckAT("BT_UP_Skill_TwoHand_Ground") then

		Ainput(AT_Shift+AT_RMB)

	elseif CheckAT("BT_UP_Skill_TwoHand_Charge") then

		if not CheckAT("_End2") then

			Ainput(AT_RMB)

		else

			Ainput(AT_Shift+AT_LMB)

		end

	elseif CheckAT("BT_UP_Skill_RotationBash") then

		if SkillCDOK(9550) then

			Ainput(AT_S+AT_F)

		elseif SkillGroupCDOK({9577,9532}) then

			Ainput(AT_Shift+AT_Q)

		else

			DoClassSkill2(GuardianSkill)

		end

	elseif CheckAT("BT_Skill_AbyssOne") then

		Ainput(AT_Space)

	elseif CheckAT("BT_UP_Skill_TwoHand_CanCle") then

		if SkillGroupCDOK({9577,9532}) then

			Ainput(AT_Shift+AT_Q)

		else

			

		end

	elseif CheckAT("BT_UP_Skill_Combo_H_") then

		if SkillGroupCDOK({9577,9532}) then

			Ainput(AT_Shift+AT_Q)

		else

			Ainput(AT_S+AT_LMB)

		end

	else

		if p.Sp >= 300 then

			Ainput(AT_A+AT_RMB)

		else

			Ainput(AT_S+AT_LMB)

		end

	end

end



function NinjaSmallTp(mob)

	local mx,my,mz = Pos()

	if CheckAT("Flash_Slash") or CheckAT("BT_Skill_Fusion_TKnifeThrow") or CheckAT("BT_Skill_Fusion_Ankle_Tie") or CheckAT("BT_Skill_Shadow_Seeding") or CheckAT("BT_UP_Skill_Smoke1_") or CheckAT("BT_Skill_Jump_GroundCrash_") or CheckAT("BT_DC_DASH_L") then

		if GetTime() - combatTp1 >= Bot.ComboTimer2 then

			if mob.face then

				local nx = mob.mx + 25*math.cos(-(mob.face+4.71))

				local ny = mob.my + 25*math.sin(-(mob.face+4.71))

				if not CheckAT("BT_Skill_Jump_GroundCrash_") then

					local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

					if kx then

						Tp(kx,ky,kz)

					else

						Tp(nx,ny,mob.mz+Bot.TpAddtionH)

					end

				end

			end

			Bot.ComboTimer2 = math.random(50,250)

			combatTp1 = GetTime()

		end

	end

end



function DosaSmallTp(mob)

	local mx,my,mz = Pos()

	if CheckAT("Passive_Move") then

		Bot.SkillRushBack = false

		if GetTime() - combatTp1 >= Bot.ComboTimer2 then

			if mob.face then

				local nx = mob.mx + 25*math.cos(-(mob.face+4.71))

				local ny = mob.my + 25*math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

			end

			Bot.ComboTimer2 = math.random(50,250)

			combatTp1 = GetTime()

		end

	end

end



function NinjaAwkCombo(p,mob)

	Bot.SkillDist = 850

	if CheckAT("DASH_B3_1") then

		Bot.SkillRushBack = false

	end

	local function DMG(mob)

		print(CBIdx)

		if Bot.ComboMatch then

			CBIdx = CBIdx + 1

			if CBIdx > 26 then

				CBIdx = 1

			end

			Bot.ComboMatch = false

			Bot.ComboTO = nil

		else

			if CBIdx == 1 then

				if not CheckAT("Fusion_UpperSwing") then

					if SkillCDOKByID(4038) then

						QuickSlotSkill(4038)

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end

			elseif CBIdx == 2 then

				if not CheckAT("LowKick") then

					Ainput(AT_S+AT_F)

				else

					Bot.ComboMatch = true

				end

			elseif CBIdx == 3 then

				if not CheckAT("BT_ARO_Skill_Bash") then

					Ainput(AT_RMB+AT_S)

				else

					Bot.ComboMatch = true

				end

			elseif CBIdx == 4 then

				if not CheckAT("BT_ARO_Skill_Buff") then

					if SkillCDOK(5023) then

						Ainput(AT_Shift+AT_E)

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end

			elseif CBIdx == 5 then

				if not CheckAT("BoisterousSmash") then

					if SkillCDOK(5026) then

						Ahold(AT_F)

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end	

			elseif CBIdx == 6 then

				if not CheckAT("GroundBash_Att") then

					if CheckAT("BoisterousSmash") then

						if SkillCDOK(5020) then

							Ahold(AT_RMB)

						else

							Bot.ComboMatch = true

						end

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end	

			elseif CBIdx == 7 then

				if not CheckAT("Dash_Sword_Attack") then

					if CheckAT("GroundBash_Att") then

						if SkillCDOK(5089) then

							Ahold(AT_RMB)

						else

							Bot.ComboMatch = true

						end

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end	

			elseif CBIdx == 8 then

				if not CheckAT("FullSwing_") then

					if SkillCDOK(5013) then

						Ainput(AT_RMB+AT_Shift)

					else

						Bot.ComboCountT1 = nil

						Bot.ComboMatch = true

					end

				else

					Bot.ComboCountT1 = nil

					Bot.ComboMatch = true

				end		

			elseif CBIdx == 9 then

				if CheckAT("FullSwing_CancelAtt") or CheckAT("FullSwing_SuperArmorAtt") then

					Ainput(AT_RMB)

					Bot.ComboCountT1 = nil

				elseif CheckAT("FullSwing_Combo") or CheckAT("FullSwing_Slot") then

					if not Bot.ComboCountT1 then

						Bot.ComboCountT1 = GetTime()

					else

						if GetTime() - Bot.ComboCountT1 >= 1000 then

							Bot.ComboMatch = true

						end

					end

				else

					Bot.ComboCountT1 = nil

					if SkillCDOK(5027) then

						QuickSlotSkillGroup(5027)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 10 then

				if CheckAT("DC_DASH") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(4507) then

						Bot.SkillRushBack = true

						local mx,my,mz = Pos()

						local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

						SetFace(angle-3.14)

						setYaw(angle-3.14)

						Ainput(AT_S+AT_Shift)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 11 then

				if CheckAT("_FastSmash") then

					Delay(300)

					Bot.ComboMatch = true

				else

					if SkillCDOK(5028) then

						Ainput(AT_S+AT_F)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 12 then

				if CheckAT("_FastSmash") then

					if SkillCDOK(5020) then

						Ainput(AT_LMB)

					else

						Bot.ComboMatch = true

					end

				else

					Bot.ComboMatch = true

				end

			elseif CBIdx == 13 then

				if CheckAT("BT_ARO_Dash_ATTACK") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(5016) then

						Ainput(AT_Shift+AT_LMB)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 14 then

				if CheckAT("Flash_Slash") then

					Delay(300)

					Bot.ComboMatch = true

				else

					if SkillCDOK(5094) then

						Ainput(AT_Q)

					else

						Bot.ComboMatch = true

					end

				end	

			elseif CBIdx == 15 then

				if CheckAT("BT_ARO_Skill_A_") then

					Bot.ComboCountT1= nil

					Bot.ComboMatch = true

				else

					if SkillCDOK(5025) then

						Ainput(AT_S+AT_E)

					else

						Bot.ComboCountT1 = nil

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 16 then

				if CheckAT("DC_DASH") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(4507) then

						Bot.SkillRushBack = true

						local mx,my,mz = Pos()

						local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

						SetFace(angle-3.14)

						setYaw(angle-3.14)

						Ainput(AT_S+AT_Shift)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 17 then

				if CheckAT("BT_ARO_Skill_SmashAttack") then

					if not Bot.ComboCountT1 then

						Bot.ComboCountT1 = GetTime()

					else

						if GetTime() - Bot.ComboCountT1 >= 1300 then

							Bot.ComboMatch = true

						end

					end

				else

					Bot.ComboTO = nil

					Bot.ComboCountT1 = nil

					if SkillCDOK(5024) then

						Ainput(AT_Shift+AT_F)

					else

						Bot.ComboMatch = true

					end

				end		

			elseif CBIdx == 18 then

				if CheckAT("Fusion_GroundAtt") then

					Delay(300)

					Bot.ComboMatch = true

				else

					if SkillCDOKByID(2812) then

						Ainput(AT_Shift+AT_Z)

					else

						Bot.ComboMatch = true

					end

				end		

			elseif CBIdx == 19 then

				if CheckAT("Fusion_TKnifeThrow") then

					if CheckAT("Throw3") then

						Delay(300)

						Bot.ComboMatch = true

					end

				else

					if SkillCDOKByID(2756) then

						Ainput(AT_Shift+AT_X)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 20 then

				if CheckAT("DC_DASH") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(4507) then

						Bot.SkillRushBack = true

						local mx,my,mz = Pos()

						local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

						SetFace(angle-3.14)

						setYaw(angle-3.14)

						Ainput(AT_S+AT_Shift)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 21 then

				if CheckAT("BT_ARO_Dash_ATTACK") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(5016) then

						Ainput(AT_Shift+AT_LMB)

					else

						Ainput(AT_W+AT_C)

					end

				end		

			elseif CBIdx == 22 then

				if CheckAT("BT_ARO_Skill_TwoHand") then

					if CheckAT("TwoHand_C") then

						Bot.ComboMatch = true

					else

						Ainput(AT_Space)

					end

				elseif CheckAT("BT_ARO_Dash_ATTACK") or CheckAT("ATTACK") then

					Ainput(AT_Space)

				else

					Ainput(AT_LMB)

				end		

			elseif CBIdx == 23 then

				if CheckAT("BT_ARO_Skill_ComboI_") then

					Bot.ComboMatch = true

				else

					if CheckAT("BT_ARO_Skill_TwoHand") then

						Ainput(AT_LMB)

					else

						Bot.ComboMatch = true

					end

				end	

			elseif CBIdx == 24 then

				if CheckAT("BT_ARO_Skill_Bash") then

					if CheckAT("Bash_C") then

						Delay(300)

						Bot.ComboMatch = true

					else

						Ainput(AT_RMB)

					end

				elseif CheckAT("BT_ARO_Skill_ComboI_") then

					Ainput(AT_RMB)

				end	

			elseif CBIdx == 25 then

				if CheckAT("DC_DASH") then

					Bot.ComboMatch = true

				else

					if SkillCDOK(4507) then

						Bot.SkillRushBack = true

						local mx,my,mz = Pos()

						local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

						SetFace(angle-3.14)

						setYaw(angle-3.14)

						Ainput(AT_S+AT_Shift)

					else

						Bot.ComboMatch = true

					end

				end

			elseif CBIdx == 26 then

				if CheckAT("Flash_Slash") then

					Delay(300)

					Bot.ComboMatch = true

				else

					if SkillCDOK(5094) then

						Ainput(AT_Q)

					else

						Bot.ComboMatch = true

					end

				end

			end

			if not Bot.ComboTO then

				Bot.ComboTO = GetTime()

			else

				if GetTime() - Bot.ComboTO >= 2300 then

					Bot.ComboMatch = true

				end

			end

		end

	end

	if not CheckAT("Aro") and not CheckAT("ARO") and not CheckAT("RUN") and not CheckAT("WAIT") and not CheckAT("Tornado") and not CheckAT("TKnifeThrow") and not CheckAT("MoveSowrd") and not CheckAT("LowKick") and not CheckAT("Conjuring") and not CheckAT("Fusion") and not CheckAT("AbyssOne") and not CheckAT("WAIT_Change") and not CheckAT("Mental") and not CheckAT("DC_DASH") and not CheckAT("FastSwing") then

		Ainput(AT_S+AT_RMB)

	else

		DMG(mob)

	end

end



function NinjaOpCombo(p,mob)

	if p.Lv >= 50 then

		Bot.SkillDist = 800

	else

		Bot.SkillDist = 400

	end

	if p then

		if p.HpPrc <= 70 then

			NinjaRegenHp()

		end

	end

	if Bot.SkillRushBack then

		if CheckAT("BT_DC_DASH_B3_1") or (not CheckAT("BT_DC_DASH") and not CheckAT("Smoke")) then

			Bot.SkillRushBack = false

		end

	end

	if CheckAT("Skill_MoveSowrd_") then

		if SkillGroupCDOK({5064,4529}) then

			Ainput(AT_Space)

		elseif SkillCDOK(5090) then

			Ainput(AT_RMB+AT_LMB)

		elseif SkillGroupCDOK({5063,4519}) then

			Ainput(AT_W+AT_RMB+AT_LMB)

		elseif SkillGroupCDOK({4576,4524}) then

			Ainput(AT_Shift+AT_LMB)

		else

			if p.Lv >= 45 then

				DoClassSkill2(NinjaSucc)

			else

				Ainput(AT_Shift+AT_LMB)

			end

		end

	elseif CheckAT("BT_Skill_FastSwing") then

		if SkillCDOK(5066) then

			Ainput(AT_S+AT_RMB)

		else

			if SkillGroupCDOK({4570,4516}) then Ainput(AT_S+AT_F) end

		end

	elseif CheckAT("BT_Skill_LowKick_") then

		if SkillGroupCDOK({5067,4540}) then

			if p.Sp >= 200 then

				Ainput(AT_A+AT_LMB)

			else

				Ainput(AT_W+AT_RMB+AT_LMB)

			end

		elseif SkillGroupCDOK({4575,4523}) then

			Ainput(AT_S+AT_E)

		else

			DoClassSkill2(NinjaSucc)

		end

	elseif CheckAT("BT_Skill_HeartLunge_UP") then

		if SkillGroupCDOK({5063,4519}) then

			Ainput(AT_W+AT_RMB+AT_LMB)

		else

			Ainput(AT_S+AT_C)

		end

	elseif CheckAT("DOUBLEJUMP") then

		if SkillGroupCDOK({4582,4503}) then

			Ainput(AT_S+AT_F)

		end

	elseif CheckAT("BT_Skill_UpperSwing") then

		if SkillCDOKByID(5321) then

			Ainput(RMB)

		else

			if SkillGroupCDOK({5061,5007}) then

				Ainput(AT_Shift+AT_E)

			else

				if p.Lv >= 56 then

					Ainput(AT_Shift+AT_Z)

				else

					Ainput(AT_Shift+AT_RMB)

				end

			end

		end

	elseif CheckAT("BT_UP_Skill_Lunge_") then

		if SkillCDOK(4520) then

			Ainput(AT_RMB)

		else

			Ainput(AT_S+AT_C)

		end

	elseif CheckAT("BT_UP_Skill_UpgradeFusion2") then

		if CheckAT("_End_1") then

			if not Bot.ComboCountT1 then

				Bot.ComboCountT1 = GetTime()

			else

				if GetTime() - Bot.ComboCountT1 >= 1350 then

					if SkillCDOK(5004) then

						Ainput(AT_W+AT_RMB)

					else

						Ainput(AT_D+AT_Shift)

					end

				end

			end

		else

			Bot.ComboCountT1 = nil

		end

	elseif CheckAT("BT_UP_WAIT2") then

		Ainput(AT_D+AT_Shift)

	elseif CheckAT("BT_UP_Skill_UpgradeFusion1") then

		local timeout = 1300

		if HasBuff(28258) then

			timeout = 1100

		end

		if CheckAT("_Att") then

			if not Bot.ComboCountT1 then

				Bot.ComboCountT1 = GetTime()

			else

				if GetTime() - Bot.ComboCountT1 >= timeout then

					Ainput(AT_Shift+AT_LMB)

				end

			end

		else

			Bot.ComboCountT1 = nil

		end

	elseif CheckAT("BT_Skill_LowSwing") then

		if not CheckAT("_Cool") then

			Ainput(AT_RMB)

		else

			Ainput(AT_S+AT_LMB)

		end

	elseif CheckAT("BT_UP_Skill_LowSwing") then

		if SkillGroupCDOK({5061,5007}) then

			Ainput(AT_Shift+AT_E)

		else

			Ainput(AT_Shift+AT_Z)

		end

	elseif CheckAT("BT_UP_Skill_Counter_") then

		if CheckAT("_End") then

			Bot.SkillRushBack = true

			local mx,my,mz = Pos()

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			SetFace(angle+3.14)

			setYaw(angle+3.14)

			Ainput(AT_RMB)

		end

	elseif CheckAT("_Abyss") then

		Ainput(AT_S+AT_Q)

	elseif CheckAT("BT_UP_Skill_Smoke1_") then

		if not CheckAT("Smoke1_C") then

			Ainput(AT_Q)

		else

			if SkillCDOK(5008) then

				Ainput(AT_Space)

			else

				Ainput(AT_W+AT_LMB+AT_RMB)

			end

		end

	elseif CheckAT("BT_Skill_M_HIDE") or CheckAT("BT_HIDE_") then

		Ainput(AT_W+AT_LMB+AT_RMB)

	elseif CheckAT("BT_UP_Skill_Big_TKnifeThrow") then

		Ainput(AT_A+AT_Q)

	elseif CheckAT("BT_UP_Skill_TKnifeThrow_") then

		Ainput(AT_S+AT_E)

	elseif CheckAT("BT_Skill_Conjuring") then

		Ainput(AT_A+AT_Shift)

	elseif CheckAT("BT_UP_Skill_Tornado_TurnAtt") then

		Ainput(AT_Shift+AT_RMB)

	elseif CheckAT("BT_UP_Skill_XSwing") then

		Ainput(AT_Shift+AT_C)

	elseif CheckAT("BT_UP_Skill_Illimitable_Sword_") then

		if SkillCDOK(5092) then

			Ainput(AT_F)

		else

			Ainput(AT_S+AT_Q)

		end

	elseif CheckAT("BT_Skill_AbyssOne") then

		Ainput(AT_S+AT_Q)

	elseif CheckAT("BT_UP_Skill_Jump_TKnifeThrow") then

		Bot.SkillRushBack = true

		local mx,my,mz = Pos()

		local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

		SetFace(angle+3.14)

		setYaw(angle+3.14)

		Ainput(AT_S+AT_Shift)

	elseif CheckAT("BT_DC_DASH_B3") then

		if SkillGroupCDOK({4577,4526}) then

			Ainput(AT_S+AT_LMB)

		else

			if p.Sp >= 500 then

				if SkillGroupCDOK({4570,4516}) then Ainput(AT_S+AT_F) else Ainput(AT_A+AT_LMB) end

			else

				DoClassSkill2(NinjaSucc)

			end

		end

	elseif CheckAT("BT_DC_DASH_L") then

		if SkillCDOK(5058) then

			QuickSlotSkillGroup(5058)

		elseif SkillCDOK(5003) then

			QuickSlotSkillGroup(5003)

		end

	elseif CheckAT("BT_DC_DASH_R") then	

		Ainput(AT_S+AT_RMB)

	elseif CheckAT("BT_Skill_Fusion_TKnifeThrow") then

		if SkillCDOKByID(4038) then

			QuickSlotSkill(4038)

		else

			if p.Sp >= 500 then

				if SkillGroupCDOK({4570,4516}) then Ainput(AT_S+AT_F) else Ainput(AT_A+AT_LMB) end

			else

				DoClassSkill2(NinjaSucc)

			end

		end

	elseif CheckAT("BT_Skill_Fusion_UpperSwing") then

		if SkillGroupCDOK({4570,4516}) then Ainput(AT_S+AT_F) else Ainput(AT_A+AT_LMB) end

	elseif CheckAT("BT_Skill_Fusion_Ankle_Tie") then

		if CheckAT("_02") then

			Bot.SkillRushBack = true

			local mx,my,mz = Pos()

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			SetFace(angle+3.14)

			setYaw(angle+3.14)

			Ainput(AT_S+AT_Shift)

		end

	else

		if SkillCDOK(5052) then

			Ainput(AT_W+AT_C)

		elseif SkillCDOKByID(4038) then

			QuickSlotSkill(4038)

		elseif SkillCDOKByID(2756) then

			QuickSlotSkill(2756)

		elseif SkillCDOKByID(2811) then

			QuickSlotSkill(2811)

		else

			if p.Sp >= 500 then

				if SkillGroupCDOK({4570,4516}) then Ainput(AT_S+AT_F) else Ainput(AT_A+AT_LMB) end

			else

				DoClassSkill2(NinjaSucc)

			end

		end

	end

end



function DarkKnightAwkCombo(p,mob)

	if mob then

		if CheckAT("BT_ARO_TwoHAND_Version2_") or CheckAT("BT_ARO_Skill_Jump_Fire") or CheckAT("BT_ARO_Skill_Magic_Absorb") then

			if GetTime() - combatTp1 >= 125 then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				combatTp1 = GetTime()

			end

		end

	end

	if not CheckAT("ARO") then

		if SkillCDOK(6543) then

			Ainput(AT_F+AT_S)

		elseif SkillCDOK(6534) then

			Ainput(AT_W+AT_RMB)

		elseif SkillCDOK(6533) then

			Ainput(AT_Shift+AT_RMB)

		else

			Ainput(AT_W+AT_C)

		end

	else

		if GetTime() - Bot.ComboT1 >= Bot.ComboTimer then

			SetFace(p.Face+1.4)

			setYaw(p.Face+1.4)

			Ainput(AT_A+AT_Shift)

			Bot.ComboTimer = math.random(4000,7000)

			Bot.ComboT1 = GetTime()

		else

		if CheckAT("BT_ARO_TwoHAND_Version2_") then

			if SkillCDOK(6546) then

				Ainput(AT_Shift+AT_F)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_Pull_") then

			if SkillCDOK(6533) then

				Ainput(AT_Shift+AT_RMB)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_Magic_Rage_Shoot") then

			if SkillCDOK(6545) then

				Ainput(AT_RMB)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_Aro_Skill_KnifeThrow_") then

			if SkillCDOK(6542) then

				Ainput(AT_F)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_Speed_Dash_") then

			if not CheckAT("_1") and not CheckAT("_2") then

				Ahold(AT_F)

			else

				if SkillCDOK(6535) then

					Ainput(AT_Shift+AT_LMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Jump_Fire_") then

			if not CheckAT("_Att") then

				if SkillCDOK(6538) then

					Ainput(AT_LMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			else

				if SkillCDOK(6627) then

					Ainput(AT_LMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Jump_Dash_") then

			if SkillCDOK(6536) then

				Ainput(AT_Shift+AT_E)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_TwoHAND_Version1_") then

			if not CheckAT("Version1_F") then

				if SkillCDOK(6539) then

					Ainput(AT_LMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			else

				if SkillCDOK(6624) then

					Ainput(AT_Shift+AT_Q)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Magic_Absorb") then

			if SkillCDOK(6532) then

				Ainput(AT_S+AT_RMB)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_ComboAtt_1_") then

			if not CheckAT("Jin_02") then

				Ainput(AT_S+AT_RMB)

			else

				if SkillCDOK(6537) then

					Ainput(AT_RMB)

				elseif SkillCDOK(6531) then

					Ainput(AT_S+AT_LMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_FireSword") then

			if SkillCDOK(6531) then

				Ainput(AT_S+AT_LMB)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_ComboAtt") then

			if not CheckAT("_04") then

				Ainput(AT_S+AT_LMB)

			else

				if SkillCDOK(6534) then

					Ainput(AT_W+AT_RMB)

				else

					DoClassSkill2(DarkKnightAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Dash") then

			if SkillCDOK(6534) then

				Ainput(AT_S+AT_F)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		else

			if SkillCDOK(6534) then

				Ainput(AT_S+AT_F)

			elseif SkillCDOK(6546) then

				Ainput(AT_Shift+AT_F)

			elseif SkillCDOK(6533) then

				Ainput(AT_Shift+AT_RMB)

			else

				DoClassSkill2(DarkKnightAwkSkill)

			end

		end

		end

	end

end



function LahnSwaptoAwk()

	if SkillCDOK(8088) then

		Ainput(AT_W+AT_Shift)

	elseif SkillCDOK(8080) then

		QuickSlotSkillGroup(8080)

	elseif SkillCDOK(8084) then

		QuickSlotSkillGroup(8084)

	else

		Ainput(AT_W+AT_C)

	end

end



function LahnAwkCombo(p,mob)

	Bot.SkillDist = 800

	if mob then

		if CheckAT("BT_ARO_Skill_BackStep_Slash") or CheckAT("BT_Skill_AbyssOne") then

			if GetTime() - combatTp1 >= 125 then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				combatTp1 = GetTime()

			end

		end

	end

	if CheckAT("BT_ARO_Skill_CrossChain_") then

		Bot.DontSpamQS = true

	else

		Bot.DontSpamQS = false

	end

	if Bot.SkillRushBack then

		if not CheckAT("BT_Skill_AbyssOne") then

			Bot.SkillRushBack = false

		end

	end

	local function WaitCDSkill()

		if SkillCDOK(8086) then

			Ainput(AT_S+AT_RMB)

		elseif SkillCDOK(8126) then

			Bot.SkillRushBack = true

			local mx,my,mz = Pos()

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			SetFace(angle+3.14)

			setYaw(angle+3.14)

			QuickSlotSkillGroup(8126)

		elseif SkillCDOKByID(3325) then

			Ainput(AT_Shift+AT_X)

		elseif SkillCDOKByID(3327) then

			Ainput(AT_Shift+AT_Z)

		elseif SkillCDOKByID(4032) then

			QuickSlotSkill(4032)

		else

			Ainput(AT_RMB)

		end

	end

	if not CheckAT("ARO") and not CheckAT("Aro") then

		if not CheckAT("_End") then

			if CheckAT("BT_Skill_AbyssOne") then

				if SkillCDOKByID(3325) then

					Ainput(AT_Shift+AT_X)

				elseif SkillCDOKByID(3327) then

					Ainput(AT_Shift+AT_Z)

				else

					LahnSwaptoAwk()

				end

			elseif CheckAT("BT_Fusion_Skill_Dash") then

				if SkillCDOKByID(4032) then

					QuickSlotSkill(4032)

				elseif SkillCDOKByID(3327) then

					Ainput(AT_Shift+AT_Z)

				else

					LahnSwaptoAwk()

				end

			elseif CheckAT("BT_Fusion_Skill_") then

				if CheckAT("Penetration") then

					LahnSwaptoAwk()

				end

			else

				LahnSwaptoAwk()

			end

		else

			LahnSwaptoAwk()

		end

	else

		if GetTime() - Bot.ComboT1 >= Bot.ComboTimer then

			SetFace(p.Face+1.4)

			setYaw(p.Face+1.4)

			Ainput(AT_D+AT_Shift)

			Bot.ComboTimer = math.random(4000,7000)

			Bot.ComboT1 = GetTime()

		end

		if CheckAT("BT_ARO_Skill_Biting") then

			if CheckAT("_Att") then

				if SkillCDOK(8084) then

					Ainput(AT_Shift+AT_F)

				elseif SkillCDOK(8079) then

					Ainput(AT_RMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_Aro_Skill_Airwalk") then

			if not CheckAT("Att") then

				Ainput(AT_LMB)

			else

				Ainput(AT_RMB)

			end

		elseif CheckAT("BT_ARO_Skill_New_Moon") then

			if SkillCDOK(8074) then

				Ainput(AT_F)

			else

				DoClassSkill2(LahnAwkSkill)

			end

		elseif CheckAT("BT_Aro_Skill_Dash") then

			Ainput(AT_RMB)

		elseif CheckAT("BT_ARO_ATTACK_New_Move_Att") then

			if not CheckAT("Jump") then

				Ainput(AT_LMB)

			else

				if SkillCDOK(8087) then

					Ainput(AT_RMB+AT_LMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_BladeThrough") then

			if SkillCDOK(8073) then

				Ainput(AT_W+AT_RMB)

			elseif SkillCDOK(8074) then

				Ainput(AT_LMB+AT_RMB)

			else

				DoClassSkill2(LahnAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_Revolve_") then

			if not CheckAT("_End") and not CheckAT("_Ing2") then

				Ainput(AT_W+AT_RMB)

			else

				if SkillCDOK(8085) then

					SetFace(p.Face+1.4)

					setYaw(p.Face+1.4)

					Ainput(AT_A+AT_Shift)

				end

			end

		elseif CheckAT("BT_Aro_Skill_Move_Avoidance") then

			if SkillCDOK(8086) then

				Ahold(AT_S+AT_RMB)

			else

				DoClassSkill2(LahnAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_CrossChain_") then

			if not CheckAT("_End") then

				Ahold(AT_S+AT_RMB)

			else

				if SkillCDOK(8074) then

					Ainput(AT_RMB)

				elseif SkillCDOK(8087) then

					Ainput(AT_RMB+AT_LMB)

				elseif SkillCDOK(8126) then

					Bot.SkillRushBack = true

					local mx,my,mz = Pos()

					local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

					SetFace(angle+3.14)

					setYaw(angle+3.14)

					QuickSlotSkillGroup(8126)

				elseif SkillCDOK(8072) then

					Ainput(AT_S+AT_LMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Combo_") then

			if not CheckAT("Combo_C") then

				Ainput(AT_S+AT_LMB)

			else

				DoClassSkill2(LahnAwkSkill)

			end

		elseif CheckAT("BT_ARO_Skill_Frop_") then

			if CheckAT("_End") or CheckAT("_Ing") then

				Delay(300)

				if SkillCDOK(8079) then

					Ainput(AT_Shift+AT_RMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Combo2_") then

			if not CheckAT("Combo2_Final") then

				if SkillCDOK(8080) then

					Ainput(AT_RMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			else

				if SkillCDOK(8075) then

					Ainput(AT_Shift+AT_LMB)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Chain_") then

			if not CheckAT("BT_ARO_Skill_Chain_01_A") then

				if not CheckAT("Chain_03") then

					Ainput(AT_LMB)

				else

					if SkillCDOK(8076) then

						Ainput(AT_LMB)

					else

						DoClassSkill2(LahnAwkSkill)

					end

				end

			else

				if SkillCDOK(8078) then

					Ainput(AT_W+AT_F)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Whirl_") then

			if CheckAT("_End") then

				if SkillCDOK(8124) then

					Ainput(AT_Shift+AT_Q)

				else

					DoClassSkill2(LahnAwkSkill)

				end

			end

		elseif CheckAT("BT_ARO_Skill_BackStep_Slash") then

			if not CheckAT("_Add") then

				Ainput(AT_Q)

			else

				if CheckAT("End") then

					WaitCDSkill()

				end

			end

		else

			WaitCDSkill()

		end

	end

end



function ScholarOpCombo(p,mob)

	Bot.SkillDist = 800

	if p then

		if p.HpPrc <= 70 then

			if SkillCDOK(14067) then

				Ainput(AT_Shift+AT_F)

			elseif SkillCDOK(14066) then

				Ainput(AT_Shift+AT_C)

			elseif SkillCDOK(14063) then

				QuickSlotSkillGroup(14063)

			end

		end

	end

	if mob then

		if Bot.TpPriorityMob then

			if CheckAT("BT_Skill_N_01") or CheckAT("BT_ARO_Skill_F_") or CheckAT("BT_Skill_F_01_Throw_L_Flow") or CheckAT("BT_Skill_Cancel_F_01") or CheckAT("BT_ARO_Skill_D_") or CheckAT("BT_ARO_Skill_F_Flow") then

				if GetTime() - combatTp1 >= 125 then

					local mx,my,mz = Pos()

					local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

					local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

					local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

					if kx then

						Tp(kx,ky,kz)

					else

						Tp(nx,ny,mob.mz+Bot.TpAddtionH)

					end

					combatTp1 = GetTime()

				end

			end

		end

	end

	if CheckAT("BT_Skill_N_") then

		Ainput(AT_W+AT_E)

	elseif CheckAT("BT_Skill_Combo_I_") then

		if CheckAT("I_02") or CheckAT("I_03") then

			Ainput(AT_E)

		elseif CheckAT("I_01") then

			if SkillCDOK(14061) then

				Ainput(AT_F)

			elseif SkillGroupCDOK({14031,14030}) then

				Ainput(AT_S+AT_F)

			elseif SkillGroupCDOK({14029,14028}) then

				Ainput(AT_S+AT_E)

			elseif SkillGroupCDOK({14021,14020}) then

				Ainput(AT_S+AT_LMB)

			elseif SkillGroupCDOK({14017,14016}) then

				Ainput(AT_S+AT_RMB)

			end

		end

	elseif CheckAT("BT_Skill_L_") then

		Ainput(AT_LMB)

	elseif CheckAT("BT_Skill_Combo_E_") then

		Ahold(AT_F)

	elseif CheckAT("BT_ARO_Skill_Combo_C_") then

		if CheckAT("_03") then

			if SkillCDOK(14063) then

				Delay(200)

				Ainput(AT_Space)

			else

				Ainput(AT_Shift+AT_LMB)

			end

		else

			Ainput(AT_W+AT_F)

		end

	elseif CheckAT("BT_ARO_Skill_F_Flow") then

		Ainput(AT_Shift+AT_LMB)

	elseif CheckAT("BT_ARO_Skill_Combo_B_") then

		Ahold(AT_S+AT_RMB)

	elseif CheckAT("BT_Skill_I_") then

		Ahold(AT_S+AT_RMB)

	elseif CheckAT("BT_ARO_Skill_Combo_D_") then

		if not CheckAT("D_03") then

			Ainput(AT_S+AT_F)

		else

			Ainput(AT_E)

		end

	elseif CheckAT("BT_Skill_P_") then

		Ainput(AT_S+AT_F)

	elseif CheckAT("BT_ARO_Skill_G_") then

		Ainput(AT_Shift+AT_F)

	elseif CheckAT("BT_ARO_Skill_E_") then

		Ainput(AT_Shift+AT_C)

	elseif CheckAT("BT_ARO_Skill_D_") then

		Ainput(AT_S+AT_E)

	elseif CheckAT("BT_Skill_O_") then

		if p.MpPrc <= 65 then

			Ainput(AT_RMB)

		else

			Ainput(AT_W+AT_F)

		end

	elseif CheckAT("BT_Skill_Combo_F_01") then

		Ainput(AT_RMB)

	else

		if SkillCDOK(14056) then

			QuickSlotSkillGroup(14056)

		elseif SkillGroupCDOK({14011,14010}) then

			Ainput(AT_W+AT_F)

		elseif SkillGroupCDOK({14015,14014}) then

			Ainput(AT_W+AT_E)

		elseif SkillGroupCDOK({14009,14008}) then

			Ainput(AT_E)

		elseif SkillGroupCDOK({14007,14006}) then

			Ainput(AT_F)

		elseif SkillCDOK(14063) then

			QuickSlotSkillGroup(14063)

		elseif SkillCDOK(14064) then

			Ainput(AT_Shift+AT_LMB)

		elseif SkillGroupCDOK({14017,14016}) then

			Ainput(AT_S+AT_RMB)

		elseif SkillGroupCDOK({14031,14030}) then

			Ainput(AT_S+AT_F)

		elseif SkillCDOK(14067) then

			Ainput(AT_Shift+AT_F)

		elseif SkillCDOK(14066) then

			Ainput(AT_Shift+AT_C)

		else

			Ainput(AT_F+AT_W)

		end

	end

end



function GuardianAwkCombo(p,mob)

	Bot.SkillDist = 700

	if p then

		if p.HpPrc <= 70 then

			GuadianAwkRegenHp()

		end

	end

	if mob then

		if CheckAT("BT_ARO_SLIDING") or CheckAT("BT_ARO_Skill_Storm") or CheckAT("BT_ARO_SLIDING_F") then

			if GetTime() - combatTp1 >= 50 then

				Tp(mob.mz,mob.my,mob.mz+15)

				combatTp1 = GetTime()

			end

		end

	end

	if  Bot.SkillRushBack then

		if CheckAT("BT_ARO_Skill_Avoid") then

			Delay(100)

			Bot.SkillRushBack = false

		end

	end

	if GetTime() - Bot.ComboT1 >= 8000 then

		if not CheckAT("BT_ARO_SLIDING") and not CheckAT("BT_ARO_Skill_Storm") and not CheckAT("BT_ARO_SLIDING_F") then

			if SkillCDOK(9552) then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle+3.14)

				setYaw(angle+3.14)

				Ainput(AT_S+AT_Shift)

			else

				Bot.ComboT1 = GetTime()

			end

		end

	end

	if not CheckAT("BT") then

		Ainput(AT_LMB+AT_W)

	else

		if not CheckAT("ARO") then

			if SkillCDOK(9559) then

				QuickSlotSkillGroup(9559)

			elseif SkillCDOK(9557) then

				QuickSlotSkillGroup(9557)

			elseif SkillCDOK(9560) then

				Ainput(AT_F+AT_W)

			else

				Ainput(AT_W+AT_C)

			end

		else

			if CheckAT("BT_ARO_Skill_Revolution") then

				if SkillCDOK(9618) then

					Ainput(AT_LMB)

				else

					DoClassSkill2(GuardianAwkSkill)

				end

			elseif CheckAT("BT_ARO_Push") then

				if SkillCDOK(9605) then

					Ainput(AT_Shift+AT_LMB)

				elseif SkillCDOK(9554) then

					Ainput(AT_LMB+AT_S)

				elseif SkillCDOK(9559) then

					Ainput(AT_Shift+AT_F)

				elseif SkillCDOK(9557) then

					Ainput(AT_Shift+AT_Q)

				else

					DoClassSkill2(GuardianAwkSkill)

				end

			elseif CheckAT("BT_ARO_Skill_Storm") then

				if CheckAT("_Storm_Ing") then

					Ainput(AT_LMB)

				elseif CheckAT("_Storm_Att") then

					if SkillCDOK(9552) then

						Bot.SkillRushBack = true

						local mx,my,mz = Pos()

						local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

						SetFace(angle+3.14)

						setYaw(angle+3.14)

						Ainput(AT_S+AT_Shift)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				end

			elseif CheckAT("BT_ARO_Skill_Avoid") then

				if CheckAT("_Attack") then

					if SkillCDOK(9554) then

						Ainput(AT_LMB+AT_S)

					elseif SkillCDOK(9559) then

						Ainput(AT_Shift+AT_F)

					elseif SkillCDOK(9557) then

						Ainput(AT_Shift+AT_Q)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				else

					if SkillCDOK(9618) then

						Ainput(AT_LMB)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				end

			elseif CheckAT("BT_ARO_Skill_Combo_D") then

				if CheckAT("D_3") then

					DoClassSkill2(GuardianAwkSkill)

				else

					Ainput(AT_RMB)

				end

			elseif CheckAT("BT_ARO_Skill_Combo_B") then

				if not CheckAT("Jin_2") and not CheckAT("Jin_3") then

					Ainput(AT_LMB+AT_S)

				else

					if SkillCDOK(9557) then

						Ainput(AT_Shift+AT_Q)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				end

			elseif CheckAT("BT_ARO_Skill_GroundChop") then

				if SkillCDOK(9564) then

					Ainput(AT_Q)

				else

					DoClassSkill2(GuardianAwkSkill)

				end

			elseif CheckAT("BT_ARO_Skill_Shot_C_Att") then

				if SkillCDOK(9556) then

					Ainput(AT_Shift+AT_RMB)

				else

					DoClassSkill2(GuardianAwkSkill)

				end

			elseif CheckAT("BT_ARO_Skill_Combo_E") then

				if ActionName() == "BT_ARO_Skill_Combo_E_3" or CheckAT("E_End") then

					if SkillCDOK(9559) then

						Ainput(AT_Shift+AT_F)

					elseif SkillCDOK(9605) then

						Ainput(AT_Shift+AT_LMB)

					elseif SkillCDOK(9557) then

						Ainput(AT_Shift+AT_Q)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				else

					Ainput(AT_RMB)

				end

			elseif CheckAT("BT_ARO_Skill_Charge") or  CheckAT("BT_ARO_Skill_Charging")  then

				if CheckAT("_Add") then

					if SkillCDOK(9568) then

						Ainput(AT_W+AT_RMB)

					elseif SkillCDOK(9555) then

						Ainput(AT_S+AT_RMB)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				else

					Ainput(AT_LMB)

				end

			elseif CheckAT("BT_ARO_STAND_ATTACK") then

				Ainput(AT_A+AT_Shift)

			elseif CheckAT("BT_ARO_Skill_Bach") then

				if not CheckAT("Bach_2") then

					Ainput(AT_S+AT_RMB)

				else

					if SkillCDOK(9568) then

						Ainput(AT_W+AT_RMB)

					elseif SkillCDOK(9559) then

						Ainput(AT_Shift+AT_F)

					elseif SkillCDOK(9557) then

						Ainput(AT_Shift+AT_Q)

					else

						DoClassSkill2(GuardianAwkSkill)

					end

				end

			elseif CheckAT("BT_ARO_SLIDING_F") then

				if CheckAT("F_Commbo") then

					if CheckAT("Combo3") then

						if SkillCDOK(9559) then

							Ainput(AT_Shift+AT_F)

						elseif SkillCDOK(9557) then

							Ainput(AT_Shift+AT_Q)

						elseif SkillCDOK(9555) then

							Ainput(AT_S+AT_RMB)

						else

							DoClassSkill2(GuardianAwkSkill)

						end

					end

				else

					Ainput(AT_RMB)

				end

			else

				DoClassSkill2(GuardianAwkSkill)

			end

		end

	end

end



function RangerAwkCombo(p,mob)

	Bot.SkillDist = 900

	local buff = GetBuffList()

	if not HasBuff(21844,buff) then

		if CheckAT("ARO") then

			Ainput(AT_S+AT_LMB)

		end

	end

	if not CheckAT("ARO") then

		Ainput(AT_W+AT_C)

	elseif CheckAT("BT_ARO_ATTACK") then

		Ainput(AT_S+AT_LMB)

	elseif CheckAT("BT_ARO_Skill_Evade") then

		Ainput(AT_LMB)

	elseif CheckAT("BT_ARO_Ground_Kick_Low") then

		Ainput(AT_S+AT_LMB)

	elseif CheckAT("BT_ARO_Skill_Consecutively") then

		if SkillCDOK(1596) then

			QuickSlotSkillGroup(1596)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Spirit_CriticalAtt") then

		if SkillCDOK(1580) then

			Ainput(AT_Q)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_SwordControl") then

		if not CheckAT("_F_") then

			if SkillCDOK(1581) then

				Ainput(AT_Space)

			else

				DoClassSkill(RangerAwkSkill)

			end

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("_F_End") then

		if SkillCDOK(1591) then

			Ainput(AT_Shift+AT_LMB)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Spirit_CriticalAtt") then

		if SkillCDOK(1587) then

			Ainput(AT_Shift+AT_RMB)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Charging_ThrowAtt") then

		if SkillCDOK(1595) then

			Ainput(AT_LMB)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Jump_Charging_ThrowAtt") then

		if SkillCDOK(1589) then

			Ainput(AT_W+AT_F)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Dash") then

		if CheckAT("_Spin") then

			Ainput(AT_LMB)

		else

			if not CheckAT("Dash_Att_2") then

				if SkillCDOK(1592) then

					Ainput(AT_RMB)

				else

					DoClassSkill(RangerAwkSkill)

				end

			else

				if SkillCDOK(1628) then

					Ainput(AT_Shift+AT_F)

				else

					DoClassSkill(RangerAwkSkill)

				end

			end

		end

	elseif CheckAT("BT_ARO_Critical_Wind") then

		if SkillCDOK(1594) then

			Ainput(AT_Shift+AT_E)

		else

			DoClassSkill(RangerAwkSkill)

		end

	elseif CheckAT("BT_ARO_Ground_Low") then

		if CheckAT("_End") then

			if SkillCDOK(1590) then

				Ainput(AT_F)

			else

				DoClassSkill(RangerAwkSkill)

			end

		end

	elseif CheckAT("BT_ARO_Skill_Jump_Att") or CheckAT("BT_ARO_Skill_JumpDoubleSwing") then

		DoClassSkill(RangerAwkSkill)

	elseif CheckAT("BT_Attack_JumpShot_Faster_ARO") then

		if SkillCDOKByID(2737) then

			Ainput(AT_Shift+AT_X)

		else

			QuickSlotSkillGroup(1580)

		end

	elseif CheckAT("BT_Skill_Fusion_Penetration_Shoot") then

		Ainput(AT_W+AT_RMB)

	else

		DoClassSkill(RangerAwkSkill)

	end

end



function StrikerCombo(p,mob)

	Bot.SkillDist = 800

	local buff = GetBuffList()

	if not HasBuff(28258,buff) and not HasBuff(22670,buff) and not HasBuff(22686,buff) and not HasBuff(9648,buff) and not HasBuff(9860,buff) then

		if SkillCDOK(7015) then

			if not CheckAT("ARO") then

				QuickSlotSkillGroup(7015)

			else

				Ainput(AT_Space)

			end

		end

	end

	if not CheckAT("ARO") then

		if not CheckAT("BT_Skill_SpritBomb") and not CheckAT("BT_Skill_KneeBlow") then

			Ainput(AT_W+AT_C)

		end

	end

	if CheckAT("BT_Skill_SpritBomb") then

		if SkillCDOK(7129) then

			Ainput(AT_S+AT_F)

		else

			Ainput(AT_Shift+AT_LMB)

		end

	elseif CheckAT("BT_ARO_Skill_SpritBomb") then

		if SkillCDOK(7129) then

			Ainput(AT_S+AT_F)

		elseif SkillCDOK(7049) then

			Ainput(AT_Space)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_Skill_KneeBlow") then

		if SkillCDOK(7056) then

			Ainput(AT_W+AT_F)

		else

			Ainput(AT_W+AT_C)

		end

	elseif CheckAT("BT_ATTACK") then

		DoClassSkill(StrikerSkill)

	elseif CheckAT("BT_STAND") then

		Ainput(AT_A+AT_LMB)

	elseif CheckAT("STANCE_CHANGE") then

		DoClassSkill(StrikerSkill)

	elseif CheckAT("BT_ARO_Skill_ForwardScratch") then

		if CheckAT("_00") then

			if SkillCDOK(7065) then

				Ainput(AT_F)

			else

				DoClassSkill(StrikerSkill)

			end

		elseif CheckAT("_03") then

			if SkillCDOK(7058) then

				Ainput(AT_RMB)

			else

				DoClassSkill(StrikerSkill)

			end

		end

	elseif CheckAT("BT_ARO_Skill_RockBreaker") then

		if SkillCDOK(7063) then

			Ainput(AT_Q+AT_Shift)

		elseif SkillCDOK(7064) then

			Ainput(AT_S+AT_F)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_ARO_Skill_DownwardKick_Flow") then

		if SkillCDOK(7053) then

			Ainput(AT_F)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_ARO_Skill_DownwardKick") then

		if CheckAT("_Att") or CheckAT("_Ing") then

			if SkillCDOK(7052) then

				Ainput(AT_F)

			else

				DoClassSkill(StrikerSkill)

			end

		end

	elseif CheckAT("BT_ARO_Skill_DownWheelKick") then

		if SkillCDOK(7054) then

			Ainput(AT_LMB+AT_Shift)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_ARO_Skill_HitRepeatedly_Dash_Att_B") then

		if SkillCDOK(7083) then

			Ainput(AT_Q)

		elseif SkillCDOK(7064) then

			Ainput(AT_F+AT_S)

		elseif SkillCDOK(7051) then

			Ainput(AT_LMB+AT_S)

		elseif SkillCDOK(7059) then

			Ainput(AT_AT_Space)

		elseif SkillCDOK(7137) then

			Ainput(AT_LMB)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_ARO_Skill_HitRepeatedly_Dash_Att") then

		if not CheckAT("BackDash") then

			if SkillCDOK(7064) then

				Ainput(AT_F+AT_S)

			elseif SkillCDOK(7051) then

				Ainput(AT_LMB+AT_S)

			elseif SkillCDOK(7059) then

				Ainput(AT_AT_Space)

			elseif SkillCDOK(7137) then

				Ainput(AT_LMB)

			else

				DoClassSkill(StrikerSkill)

			end

		else

			if SkillCDOK(7051) then

				Ainput(AT_LMB+AT_S)

			else

				DoClassSkill(StrikerSkill)

			end

		end

	elseif CheckAT("BT_ARO_Punch_UpperCombo") then

		if SkillCDOK(7052) then

			Ainput(AT_F)

		else

			Ainput(AT_A+AT_RMB)

		end

	elseif CheckAT("BT_ARO_Skill_Bash_Att") then

		if CheckAT("_C_Jin") or CheckAT("_End") then

			if SkillCDOK(7055) then

				Ainput(AT_RMB+AT_Shift)

			else

				DoClassSkill(StrikerSkill)

			end

		end

	elseif CheckAT("BT_ARO_Skill_HitRepeatedly_Stand_Att") then

		if CheckAT("_Att_D") then

			Ainput(AT_RMB)

		else

			DoClassSkill(StrikerSkill)

		end

	elseif CheckAT("BT_ARO_Skill_Rampage") then

		Ainput(AT_LMB+AT_Shift)

	else

		DoClassSkill(StrikerSkill)

	end

end



function WitchCombo(p,mob)

	Bot.SkillDist = 700

	if p then

		if p.MpPrc <= 20 then

			WitchRegnMp()

		end

		if p.HpPrc <= 70 then

			WitchRegnHp()

		end

	end

local function DMG(mob)

	local list = {

{name="BT_ARO_Skill_Defense",group={5552},act=AT_Q},

{name="Summon_Magic_Lighthouse",group={5532}},

{name="BT_ARO_ROLL_B",group={6028},act=AT_S+AT_Shift,back=1},

{name="BT_ARO_Casting_C_",group={5543},act=AT_S+AT_LMB+AT_RMB},

{name="BT_ARO_Skill_Poison_Field",group={5536},act=AT_E},

{name="BT_ARO_Casting_A_",group={5541},act=AT_Shift+AT_LMB},

{name="BT_ARO_Casting_C_",group={5543},act=AT_S+AT_LMB+AT_RMB},

{name="BT_ARO_Casting_E_",group={5545},act=AT_Shift+AT_F},

{name="BT_ARO_Casting_D_",group={5544},act=AT_S+AT_F},

{name="BT_ARO_Casting_C_",group={5543},act=AT_S+AT_LMB+AT_RMB},

{name="BT_ARO_Casting_A_",group={5541},act=AT_Shift+AT_LMB},

{name="BT_ARO_Casting_C_",group={5543},act=AT_S+AT_LMB+AT_RMB},

{name="BT_ARO_Casting_E_",group={5545},act=AT_Shift+AT_F},

{name="BT_ARO_ThunderBomb",group={6044},act=AT_S+AT_RMB},

{name="BT_ARO_LightningRain_",group={5548},act=AT_RMB},

{name="BT_Skill_Fusion_Lightning",id=2752},

{name="BT_Skill_Fusion_Lighing_Arrow",id=4049},

{name="BT_Skill_Fusion_Earthquake",id=2825,act=AT_Shift+AT_Z},

{name="BT_skill_AbyssOne_W_End",group={5632},act=AT_F},

{name="BT_ARO_ROLL_B",group={6028},act=AT_S+AT_Shift,back=1,nocd=1},

{name="BT_ARO_Casting_B_",group={5542},nocd=1},

}

DoSkillOrder(list,mob)

end

	if Bot.SkillRushBack then

		if not CheckAT("BT_ARO_ROLL_B") then

			Bot.SkillRushBack = false

		end

	end

	local buff = GetBuffList()

	if not CheckAT("ARO") and not CheckAT("Magic_Lighthouse") and not CheckAT("Fusion_") and not CheckAT("AbyssOne") and not CheckAT("_Lighing_") then

		QuickSlotSkillGroup(5542,1)

	else

		DMG(mob)

	end

end



function DoSkillOrder(list,mob)

	if Bot.SkillRushBack then

		if Bot.LastRushBack then

			if not CheckAT(Bot.LastRushBack) then

				Bot.SkillRushBack = false

				Bot.LastRushBack = nil

			end

		end

	end

	if Bot.DbgSkill then

		print(tostring(Bot.ComboMatch).."/"..Bot.ComboIdx.."/"..list[Bot.ComboIdx].name)

	end

	if Bot.ComboMatch then

		if list[Bot.ComboIdx].wait then

			Delay(list[Bot.ComboIdx].wait)

		end

		Bot.ComboIdx = Bot.ComboIdx + 1

		if Bot.ComboIdx > #list then

			Bot.ComboIdx = 1

		end

		Bot.ComboMatch = false

		Bot.ComboTO = nil

	else

		if not CheckAT(list[Bot.ComboIdx].name) then

			if list[Bot.ComboIdx].group ~= nil then

				local could = false

				if not list[Bot.ComboIdx].nocd then

					if SkillGroupCDOK(list[Bot.ComboIdx].group) then

						could = true

					end

				else

					could = true

				end

				if could then

					if list[Bot.ComboIdx].act then

						if list[Bot.ComboIdx].back then

							Bot.LastRushBack = list[Bot.ComboIdx].name

							Bot.SkillRushBack = true

							local mx,my,mz = Pos()

							local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

							SetFace(angle-3.14)

							setYaw(angle-3.14)

						end

						Ainput(list[Bot.ComboIdx].act)

					else

						for a=1,#list[Bot.ComboIdx].group do

							QuickSlotSkillGroup(list[Bot.ComboIdx].group[a])

						end

					end

				else

					Bot.ComboMatch = true

				end

			elseif list[Bot.ComboIdx].id then

				if SkillCDOKByID(list[Bot.ComboIdx].id) then

					if list[Bot.ComboIdx].act then

						Ainput(list[Bot.ComboIdx].act)

					else

						print(list[Bot.ComboIdx].id)

						QuickSlotSkill(list[Bot.ComboIdx].id)

					end

				else

					Bot.ComboMatch = true

				end

			else

				if list[Bot.ComboIdx].act then

					Ainput(list[Bot.ComboIdx].act)

				else

					Bot.ComboMatch = true

				end

			end

			if not Bot.ComboTO then

				Bot.ComboTO = GetTime()

			else

				if not list[Bot.ComboIdx].to then list[Bot.ComboIdx].to = 2000 end

				if GetTime() - Bot.ComboTO >= list[Bot.ComboIdx].to then

					Bot.ComboMatch = true

				end

			end

		else

			local waitT = list[Bot.ComboIdx].delay

			if waitT then

				Delay(waitT)

			else

				Bot.ComboMatch = true

			end

		end

	end

end



function WitchOpCombo(p,mob)

	Bot.SkillDist = 800

	if CheckAT("BT_UP_Ground_Answer") or CheckAT("BT_UP_ROLL") then

		if GetTime() - Bot.ComboT3 >= 150 then

			local mx,my,mz = Pos()

			local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

			local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

			local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

			if kx then

				Tp(kx,ky,kz)

			else

				Tp(nx,ny,mob.mz+Bot.TpAddtionH)

			end

			Bot.ComboT3 = GetTime()

		end

	end

local function DMG()

	local list = {

{name="BT_UP_Skill_Magic_GigaArrow",group={5631},act=AT_S+AT_RMB},

{name="BT_UP_Ground_Answer_",group={5615,5530},act=AT_D+AT_LMB},

{name="BT_UP_Lightning_Wave_",group={5621},act=AT_W+AT_C},

{name="BT_UP_Skill_EarthQuake_",group={5619},act=AT_S+AT_C},

{name="BT_UP_Skill_Magic_GigaArrow",group={5631},act=AT_S+AT_RMB},

{name="BT_UP_Skill_Magic_Blaster_",group={5613,5523},act=AT_LMB+AT_RMB},

{name="BT_UP_Skill_Meteor_B_",group={5644,5502},act=AT_S+AT_LMB+AT_RMB},

{name="BT_UP_Skill_Ice_Fog_",group={5605,5511},act=AT_S+AT_Q},

{name="BT_UP_Skill_Blizzard_",group={5606,5512},act=AT_Shift+AT_LMB+AT_RMB},

{name="BT_UP_Skill_Magic_GigaArrow",group={5631},act=AT_S+AT_RMB},

{name="BT_UP_Skill_Fireball_",group={5598,5506},act=AT_S+AT_LMB},

{name="BT_UP_Skill_Chain_Lightning_B_",group={5646},act=AT_Shift+AT_C},

{name="BT_UP_Skill_Lightning_Bolt_C_",group={5608,5507},act=AT_S+AT_F},

{name="BT_UP_Skill_Lightning_Field_B_",group={5642,5517},act=AT_RMB,to=800},

{name="BT_UP_Lightning_Wave_",group={5621},act=AT_W+AT_C},

{name="BT_UP_Skill_EarthQuake_",group={5619},act=AT_S+AT_C},

{name="BT_UP_skill_Freezing_",group={5603,5510},act=AT_S+AT_E},

{name="BT_UP_Skill_Explosion_B_",group={5600},act=AT_Shift+AT_LMB},

{name="BT_UP_Skill_Magic_GigaArrow",group={5631},act=AT_S+AT_RMB},

{name="BT_UP_Skill_PowerEarthquake_",group={5640,5501},act=AT_Shift+AT_F},

{name="BT_skill_AbyssOne_",group={5632},act=AT_F},

}

DoSkillOrder(list)

end

	if p then

		if p.MpPrc <= 20 then

			WitchRegnMp()

		end

		if p.HpPrc <= 70 then

			WitchRegnHp()

		end

	end

	if CheckAT("BT_UP_Skill_Meteor_") or CheckAT("BT_UP_Skill_Meteor_B_") or CheckAT("BT_UP_Skill_Lightning_Bolt_") then

		Ainput(AT_LMB)

	end

	local buff = GetBuffList()

	if not HasBuff(8574,buff) then

		if SkillCDOK(5528) then

			QuickSlotSkillGroup(5528)

		else

			DMG()

		end

	else

		if SkillCDOK(5520) then

			Ainput(AT_Q)

		elseif SkillCDOK(5532) then

			QuickSlotSkillGroup(5532)

		elseif SkillCDOK(5531) then

			QuickSlotSkillGroup(5531)

		else

			DMG()

		end

	end

end



function MeahuaCombo(p,mob)

	if p then

		if p.HpPrc <= 70 then

			MeahuaRegenHp()

		end

	end

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	end

	Bot.SkillDist = 800

	if GetTime() - Bot.ComboT1 >= Bot.ComboTimer then

		Bot.ComboTimer = math.random(600,2000)

		Bot.ComboT1 = GetTime()

		refreshYaw()

	end

	if Bot.SkillRushBack then

		if not CheckAT("BT_UP_Skill_BackStep_Att_1") then

			Bot.SkillRushBack = false

		end

	end

	local buff = GetBuffList()

	if not HasBuff(18634,buff) then

		if not CheckAT("_UmeFlowerWind") then

			Ainput(AT_LMB+AT_RMB)

		else

			if CheckAT("_UmeFlowerWind_Att2") then

				Ainput(AT_LMB)

			end

		end

		if CheckAT("BT_UP_Skill_Ice_Arrow_C") then

			Ainput(AT_S+AT_LMB)

		elseif CheckAT("BT_UP_skill_ThrustAndSmash_Att") then

			Ainput(AT_LMB+AT_RMB)

		end

	else

		if CheckAT("BT_UP_skill_FlankAttack") then

			if not CheckAT("_Att") and not CheckAT("_End") then

				local i=math.random(1,2)

				if i == 1 then

					Ainput(AT_LMB+AT_A)

				else

					Ainput(AT_LMB+AT_D)

				end

			else

				if not HasBuff(23076,buff) and not HasBuff(13937,buff) then

					Ainput(AT_Space)

				else

					if SkillCDOK(3526) then

						Ainput(AT_Shift+AT_F)

					elseif SkillGroupCDOK({3624,3540}) then

						Ainput(AT_S+AT_LMB+AT_RMB)

					elseif SkillGroupCDOK({3619,3533}) then

						Ainput(AT_Shift+AT_LMB+AT_RMB)

					elseif SkillGroupCDOK({3618,3530}) then

						Ainput(AT_S+AT_LMB)

					else

						Ainput(AT_Space)

					end

				end

			end

		elseif CheckAT("BT_ATTACK") then

			Ainput(AT_LMB+AT_A)

		elseif CheckAT("BT_UP_skill_Back_Lunge") or CheckAT("BT_skill_BackTurn_Dirk") then

			if SkillCDOK(3536) then

				Ainput(AT_Space)

			elseif SkillGroupCDOK({3622,3545,3544}) then

				Ainput(AT_S+AT_E)

			else

				Ainput(AT_LMB+AT_RMB)

			end

		elseif CheckAT("BT_UP_skill_UpperSwing") then

			if SkillGroupCDOK({3619,3533}) then

				Ainput(AT_Shift+AT_LMB+AT_RMB)

			else

				Ainput(AT_LMB+AT_RMB)

			end

		elseif CheckAT("_UmeFlowerWind") then

			if CheckAT("_UmeFlowerWind_Att2") then

				Ainput(AT_LMB)

			end

		elseif CheckAT("BT_UP_Skill_Ice_Arrow") then

			if SkillGroupCDOK({3624,3540}) then

				Ainput(AT_S+AT_LMB+AT_RMB)

			elseif SkillCDOK(3526) then

				Ainput(AT_Shift+AT_F)

			elseif SkillCDOK(3629) then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle-3.14)

				setYaw(angle-3.14)

				Ainput(AT_S+AT_C)

			else

				Ainput(AT_D+AT_LMB)

			end

		elseif CheckAT("BT_UP_skill_UmeFlowerCut") then

			if CheckAT("UmeFlowerCut_1_3") then

				if SkillCDOKByID(2746) then

					Ainput(AT_LMB)

				elseif SkillCDOK(3526) then

					Ainput(AT_Shift+AT_F)

				elseif SkillGroupCDOK({3619,3533}) then

					Ainput(AT_Shift+AT_LMB+AT_RMB)

				elseif SkillGroupCDOK({3625,3546}) then

					Ainput(AT_LMB+AT_RMB)

				else

					Ainput(AT_A+AT_LMB)

				end

			end

		elseif CheckAT("BT_Skill_Fusion_UmeFlowerCut") then

			if SkillCDOK(3526) then

				Ainput(AT_Shift+AT_F)

			elseif SkillGroupCDOK({3619,3533}) then

				Ainput(AT_Shift+AT_LMB+AT_RMB)

			elseif SkillGroupCDOK({3625,3546}) then

				Ainput(AT_LMB+AT_RMB)

			else

				Ainput(AT_A+AT_LMB)

			end

		elseif CheckAT("BT_skill_AbyssOne") then

			if CheckAT("_Att3") or CheckAT("_End") then

				if SkillGroupCDOK({3624,3540}) then

					Ainput(AT_S+AT_LMB+AT_RMB)

				elseif SkillGroupCDOK({3619,3533}) then

					Ainput(AT_Shift+AT_LMB+AT_RMB)

				elseif SkillGroupCDOK({3625,3546}) then

					Ainput(AT_LMB+AT_RMB)

				else

					Ainput(AT_D+AT_LMB)

				end

			end

		elseif CheckAT("BT_UP_Skill_BackStep_Att") then

			if SkillCDOK(3526) then

				Ainput(AT_Shift+AT_F)

			elseif SkillGroupCDOK({3624,3540}) then

				Ainput(AT_S+AT_LMB+AT_RMB)

			elseif SkillGroupCDOK({3619,3533}) then

				Ainput(AT_Shift+AT_LMB+AT_RMB)

			elseif SkillGroupCDOK({3618,3530}) then

				Ainput(AT_S+AT_LMB)

			else

				Ainput(AT_D+AT_LMB)

			end

		elseif CheckAT("BT_UP_skill_ThrustAndSmash_Att") then

			if SkillGroupCDOK({3624,3540}) then

				Ainput(AT_S+AT_LMB+AT_RMB)

			elseif SkillGroupCDOK({3619,3533}) then

				Ainput(AT_Shift+AT_LMB+AT_RMB)

			elseif SkillGroupCDOK({3622,3545,3544}) then

				Ainput(AT_S+AT_E)

			else

				Ainput(AT_D+AT_LMB)

			end

		elseif CheckAT("_SwordSmash_Fast") then

			if CheckAT("_Att") or CheckAT("_End") then

				Ainput(AT_LMB+AT_RMB)

			end

		else

			if SkillCDOK(3629) then

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle-3.14)

				setYaw(angle-3.14)

				Ainput(AT_S+AT_C)

			else

				DoClassSkill(MeahuaSkill)

			end

		end

	end

end



function MusaCombo(p,mob)

	if p then

		if p.MpPrc <= 50 then

			if SkillGroupCDOK({3102,3014}) then

				Ainput(AT_Shift+AT_E)

			end

		end

		if GetTime() - Bot.ComboT1 >= Bot.ComboTimer then

			SetFace(p.Face-0.8)

			setYaw(p.Face-0.8)

			Ainput(AT_RMB+AT_W)

			Delay(150)

			SetFace(p.Face+1.58)

			setYaw(p.Face+1.58)

			Ainput(AT_W,100)

			Bot.ComboTimer = math.random(2000,5000)

			Bot.ComboT1 = GetTime()

			refreshYaw()

		end

	end

	Bot.SkillDist = 800

	if Bot.SkillRushBack then

		if not CheckAT("BT_Up_BackJump_Attack") then

			Bot.SkillRushBack = false

		end

	end

	local match = true

	if CheckAT("BT_skill_Up_TornadoSwing_Tornado") then

		if SkillCDOK(3058) then

			Ainput(AT_LMB)

			match = false

		end

	elseif CheckAT("BT_skill_Back_Lunge_S2") then

		if SkillGroupCDOK({3095,3052,3046}) then

			Ainput(AT_Space)

			match = false

		end

	elseif CheckAT("BT_Skill_Up_DashRun") then

		if SkillGroupCDOK({3121,3040}) then

			Ainput(AT_S+AT_LMB)

			match=false

		end

	end

	if match then

	local buff = GetBuffList()

	if not HasBuff(27004,buff) and not HasBuff(14949,buff) then

		if SkillGroupCDOK({3123,3013}) then

			Ainput(AT_RMB+AT_LMB)

		else

			DoClassSkill(MusaSkill)

		end

	end

	if HasBuff(18627,buff) then

		if not CheckAT("BT_Up_BackJump_Attack") and not CheckAT("BT_skill_Up_TornadoSwing_Tornado") then

			if CheckAT("_SwordSmash_Fast") then

				if musa_kano({3122,3051}) then

					Ainput(AT_S+AT_RMB+AT_LMB)


				end

			else

				Ainput(AT_S+AT_RMB+AT_LMB)

			end

		else

			if SkillCDOK(3021) then

				Ainput(AT_Shift+AT_F)

			elseif musa_kano({3122,3051}) then

				Ainput(AT_S+AT_RMB+AT_LMB)

			else

				Ainput(AT_S+AT_RMB+AT_LMB)

			end

		end

	else

		if CheckAT("_SwordSmash_Fast") then

			if musa_kano({3122,3051}) then

				Ainput(AT_S+AT_RMB+AT_LMB)

			end

		elseif CheckAT("BT_Up_BackJump_Attack") then

			if SkillCDOK(3021) then

				Ainput(AT_Shift+AT_F)

			else

				DoClassSkill(MusaSkill)

			end

		elseif CheckAT("BT_skill_Up_TornadoSwing_Tornado") then

			if SkillCDOK(3058) then

				Ainput(AT_LMB)

			else

				DoClassSkill(MusaSkill)

			end

		elseif CheckAT("BT_skill_Up_Defence") then

			if not CheckAT("BT_skill_Up_Defence_Counter") then

				if not CheckAT("_Counter_S") then

					if SkillGroupCDOK({3125,3003,3026}) then

						Ainput(AT_Q+AT_LMB)

					else

						DoClassSkill(MusaSkill)

					end

				else

					DoClassSkill(MusaSkill)

				end

			end

		elseif CheckAT("BT_ATTACK") or CheckAT("BT_skill_Up_DashAttack1") or CheckAT("BT_skill_Up_TornadoBigSwing") or CheckAT("BT_DC_DASH") then

			if musa_kano({3122,3051}) then

				Ainput(AT_S+AT_RMB+AT_LMB)

			elseif SkillGroupCDOK({3120,3022}) then

				Ainput(AT_E)

			else

				DoClassSkill(MusaSkill)

			end

		else

			DoClassSkill(MusaSkill)

		end

	end

	end

end



function NovaAwkOpCombo(p,mob)

	Bot.SkillDist = 800

	local function NovaStartCombo(isAcc)

		if isAcc then

			if SkillCDOKByID(7401) then

				Ainput(AT_Q+AT_Shift)

			elseif SkillCDOK(10613) then

				QuickSlotSkillGroup(10613)

			elseif SkillCDOK(10585) then

				QuickSlotSkillGroup(10585)

			elseif SkillCDOKByID(5914) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(10588) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillCDOKByID(5911) then

				Ainput(AT_S+AT_LMB)

			elseif SkillCDOK(10603) then

				Ainput(AT_S+AT_Q)

			elseif SkillCDOK(10594) then

				if not SkillCDOK(10603) then

					Bot.ComboIdx = 1

				else

					Bot.ComboIdx = 2

				end

				Ainput(AT_F)

			elseif SkillCDOKByID(5912) then

				Ainput(AT_W+AT_Q)

			elseif SkillCDOK(10584) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(10581) then

				Ainput(AT_Q)

			elseif SkillCDOKByID(5910) then

				Ainput(AT_S+AT_F)

			end

		else

			if SkillCDOK(10613) then

				QuickSlotSkillGroup(10613)

			elseif SkillCDOK(10603) then

				Ainput(AT_S+AT_Q)

			elseif SkillCDOK(10594) then

				if not SkillCDOK(10603) then

					Bot.ComboIdx = 1

				else

					Bot.ComboIdx = 2

				end

				Ainput(AT_F)

			elseif SkillCDOK(10586) then

				Ainput(AT_S+AT_LMB)

			elseif SkillCDOK(10588) then

				Ainput(AT_Shift+AT_RMB)

			elseif SkillCDOK(10583) then

				Ainput(AT_W+AT_RMB)

			elseif SkillCDOK(10602) then

				Ainput(AT_Shift+AT_LMB)

			elseif SkillCDOK(10584) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(10581) then

				Ainput(AT_Q)

			elseif SkillCDOK(10585) then

				Ainput(AT_Q+AT_Shift)

			else

				Ainput(AT_S+AT_F)

			end

		end

	end

	local function NovaComboReal(isAcc,p,mob)

		if CheckAT("BT_ARO_Skill_Double_Piercing_") then

			if not CheckAT("_Cool") and not CheckAT("_End") then

				Ainput(AT_S+AT_F)

			else

				if SkillCDOK(10613) then

					QuickSlotSkillGroup(10613)

				else

					Ainput(AT_Q+AT_S)

				end

			end

		elseif CheckAT("BT_ARO_Skill_TrillionStab_") then

			if not CheckAT("_End") and not CheckAT("_Cool") then

				Ainput(AT_S+AT_F)

			else

				if SkillCDOK(10613) then

					QuickSlotSkillGroup(10613)

				else

					TT(SkillCDInfo(10603))

					Ainput(AT_Q+AT_S)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Scythe_Spin_02") then

			if SkillCDOK(10603) then

				Ainput(AT_Q+AT_S)

			elseif SkillCDOK(10594) then

				Bot.ComboIdx = 1

				Ainput(AT_F)

			else

				if isAcc then

					if SkillCDOKByID(5910) then

						Ainput(AT_S+AT_F)

					else

						Bot.ComboIdx = 0

						Ainput(AT_RMB)

					end

				else

					if SkillCDOK(10587) then

						Ainput(AT_S+AT_F)

					else

						Bot.ComboIdx = 0

						Ainput(AT_RMB)

					end

				end

			end

		elseif CheckAT("BT_ARO_Skill_Scythe_Spin_01") then

			if CheckAT("_End") then

				if SkillCDOK(10583) then

					Ainput(AT_W+AT_RMB)

				else

					if SkillCDOK(10594) then

						Bot.ComboIdx = 2

						Ainput(AT_F)

					else

						Ainput(AT_W+AT_F)

					end

				end

			end

		elseif CheckAT("BT_ARO_Skill_Rapier_Combo_A_") then

			if SkillCDOK(10594) then

				Bot.ComboIdx = 1

				Ainput(AT_F)

			else

				Ainput(AT_Shift+AT_A)

			end

		elseif CheckAT("BT_ARO_Skill_Triple_") then

			if not CheckAT("_Att_2") and not CheckAT("_End") then

				Ainput(AT_S+AT_LMB)

			else

				if SkillCDOK(10588) then

					Ainput(AT_Shift+AT_RMB)

				else

					if not isAcc then

						if SkillCDOK(10583) then

							Ainput(AT_W+AT_RMB)

						elseif SkillCDOK(10594) then

							Bot.ComboIdx = 2

							Ainput(AT_F)

						elseif SkillCDOK(10614) then

							QuickSlotSkillGroup(10614)

						end

					else

						if SkillCDOKByID(5912) then

							Ainput(AT_W+AT_Q)

						elseif SkillCDOK(10583) then

							Ainput(AT_W+AT_RMB)

						elseif SkillCDOK(10594) then

							Bot.ComboIdx = 2

							Ainput(AT_F)

						elseif SkillCDOK(10614) then

							QuickSlotSkillGroup(10614)

						end

					end

				end

			end

		elseif CheckAT("BT_SKILL_AbyssOne") then

			QuickSlotSkillGroup(10603)

		elseif CheckAT("BT_ARO_Skill_Stab") then

			if Bot.ComboIdx == 1 then

				if isAcc then

					if SkillCDOKByID(5911) then

						Ainput(AT_S+AT_LMB)

					else

						NovaStartCombo(isAcc)

					end

				else

					Ainput(AT_S+AT_LMB)

				end

			elseif Bot.ComboIdx == 2 then

				Ainput(AT_F+AT_W)

			end

		elseif CheckAT("BT_ARO_Skill_Combo_A_") then

			if not CheckAT("A_02") and not CheckAT("_Cool") then

				Ainput(AT_S+AT_LMB)

			else

				if SkillCDOK(10588) then

					Ainput(AT_Shift+AT_RMB)

				else

					if SkillCDOK(10594) then

						Bot.ComboIdx = 2

						Ainput(AT_F)

					else

						Bot.ComboIdx = 3

						Ainput(AT_RMB)

					end

				end

			end

		elseif CheckAT("BT_ARO_Skill_Sword_Magic_") then

			Ainput(AT_W+AT_RMB)

		elseif CheckAT("BT_ARO_Skill_Scythe_Throw_") then

			if CheckAT("Throw_D_") then

				if not isAcc then

					if SkillCDOK(10602) then

						Ainput(AT_Shift+AT_LMB)

					else

						Bot.ComboIdx = 2

						Ainput(AT_F)

					end

				else

					if SkillCDOKByID(5912) then

						Ainput(AT_W+AT_Q)

					elseif SkillCDOKByID(5914) then

						Ainput(AT_Shift+AT_LMB)

					else

						Bot.ComboIdx = 2

						Ainput(AT_F)

					end

				end

			elseif CheckAT("_Throw_B") then

				if CheckAT("B_Fin") then

					Ainput(AT_Shift+AT_Q)

				end

			elseif CheckAT("Throw_A_") then

				if not CheckAT("A_R") then

					Ainput(AT_RMB)

				else

					if Bot.ComboIdx == 3 then

						if SkillCDOK(10588) then

							Ainput(AT_Shift+AT_RMB)

						else

							if SkillCDOK(10594) then

								Bot.ComboIdx = 2

								Ainput(AT_F)

							end

						end

					else

						if SkillCDOK(10603) then

							Ainput(AT_Q+AT_S)

						elseif SkillCDOK(10594) then

							Bot.ComboIdx = 1

							Ainput(AT_F)

						else

							if isAcc then

								if SkillCDOKByID(5910) then

									Ainput(AT_S+AT_F)

								else

									NovaStartCombo(isAcc)

								end

							else

								NovaStartCombo(isAcc)

							end

						end

					end

				end

			else

				if not CheckAT("Demon") then

					if CheckAT("_End") then

						Ainput(AT_S+AT_F)

					end

				else

					if CheckAT("_Att") then

						Delay(800)

						Ainput(AT_Shift+AT_D)

					end

				end

			end

		elseif CheckAT("BT_ARO_Skill_Charge_") then

			if not CheckAT("_Att") then

				Ahold(AT_Shift+AT_LMB)

			else

				Delay(400)

				Bot.SkillRushBack = true

				local mx,my,mz = Pos()

				local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

				SetFace(angle+3.14)

				setYaw(angle+3.14)

				Ainput(AT_S+AT_Shift)

			end

		elseif CheckAT("BT_ARO_Skill_Avoid_B_") then

			Ainput(AT_LMB)

		elseif CheckAT("BT_ARO_Skill_Avoid_R_") then	

			if not CheckAT("_Stab") then

				Ainput(AT_LMB)

			else

				if SkillCDOK(10585) then

					QuickSlotSkillGroup(10585)

				else

					Ainput(AT_S+AT_F)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Avoid_L_") then

			if not CheckAT("_Stab") then

				Ainput(AT_LMB)

			else

				Bot.ComboIdx = 1

				Ainput(AT_F)

			end

		elseif CheckAT("BT_ARO_Skill_Avoid_F_Stab") then

			if SkillCDOK(10594) then

				Bot.ComboIdx = 2

				Ainput(AT_F)

			else

				Ainput(AT_W+AT_F)

			end

		elseif CheckAT("BT_ARO_Skill_Rapier_Stab_") then

			if SkillCDOK(10581) then

				Ainput(AT_Q)

			else

				Ainput(AT_Shift+AT_Q)

			end

		elseif CheckAT("BT_ARO_Skill_Recover") then

			if SkillCDOK(10581) then

				Ainput(AT_Q)

			else

				Ainput(AT_S+AT_F)

			end

		else

			NovaStartCombo(isAcc)

		end

	end

	if Bot.TpPriorityMob then

		if CheckAT("BT_ARO_Skill_Rapier_Stab") or CheckAT("BT_ARO_Skill_Avoid") or CheckAT("BT_ARO_Skill_Stab") or CheckAT("Charge_Ing_Demon") then

			if GetTime() - combatTp1 >= 110 then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				combatTp1 = GetTime()

			end

		end

	end

	if Bot.SkillRushBack then

		if not CheckAT("BT_ARO_Skill_Avoid_B") then

			Bot.SkillRushBack = false

		end

	end

	local novapower = NovaResource()

	local buff = GetBuffList()

	local isAcc = false

	local swap = false

	if not CheckAT("ARO") and not CheckAT("RageAbsorb") then

		if SkillCDOK(10603) then

			QuickSlotSkillGroup(10603)

		else

			Ainput(AT_W+AT_C)

		end

	else

		if not HasBuff(18316,buff) then

			if novapower >= 100 then

				if SkillCDOKByID(5912) then

					Ainput(AT_W+AT_Q)

				elseif SkillCDOK(10589) then

					Ainput(AT_E)

				else

					NovaComboReal(isAcc,p,mob)

				end

			end

		else

			isAcc = true

		end

		if Bot.SkillRushBack then

			if not CheckAT("BT_ARO_Skill_Avoid_B") then

				Bot.SkillRushBack = false

			end

		end

		if not isAcc then

			if SkillCDOK(10590) then

				if Bot.NovaBurnLife then

					if p.HpPrc >= 60 and novapower <= 60 then

						Ainput(AT_Shift+AT_E)

					else

						NovaComboReal(isAcc,p,mob)

					end

				else

					NovaComboReal(isAcc,p,mob)

				end

			else

				NovaComboReal(isAcc,p,mob)

			end

		else

			NovaComboReal(isAcc,p,mob)

		end

	end

end



function MeaguCombo(p,mob)

	if p then

		if p.HpPrc <= 70 then

			MeaguRegenHp()

		end

	end

	if GetTime() - Bot.ComboT1 >= Bot.ComboTimer then

		local i = math.random(1,4)

		local input = AT_A+AT_Shift

		if i == 2 then

			input = AT_D+AT_Shift

		elseif i == 3 then

			input = AT_A+AT_LMB

		elseif i == 4 then

			input = AT_D+AT_LMB

		end

		Ainput(input)

		Bot.ComboTimer = math.random(2000,5000)

		Bot.ComboT1 = GetTime()

		Dolua("PaGlobalFunc_ChracterInfo_All_Open() HandleEventLUp_ChracterInfo_All_Close()")

	end

	local buff = GetBuffList()

	if not HasBuff(27039,buff) then

		if SkillGroupCDOK({13031,13030}) then

			Ainput(AT_Space+AT_S)

		else

			DoClassSkill(MaeguSkill)

		end

	else

		if not HasBuff(27389,buff) then

			if SkillGroupCDOK({13052,13014}) then

				Ainput(AT_Shift+AT_F)

			else

				if CheckAT("BT_UP_Skill_Ground_CharmExplosion") then

					if CheckAT("_End") then

						DoClassSkill(MaeguSkill)

					end

				elseif CheckAT("BT_UP_Skill_Charm_Binyeo_A") then

					if CheckAT("_Att") or CheckAT("_End") then

						DoClassSkill(MaeguSkill)

					end

				else

					DoClassSkill(MaeguSkill)

				end

			end

		else

			if CheckAT("BT_UP_Skill_Ground_CharmExplosion") then

				if CheckAT("_End") then

					DoClassSkill(MaeguSkill)

				end

			elseif CheckAT("BT_UP_Skill_Charm_Binyeo_A") then

				if CheckAT("_Att") or CheckAT("_End") then

					DoClassSkill(MaeguSkill)

				end

			else

				DoClassSkill(MaeguSkill)

			end

		end

	end

end



function ZerkerOpCombo(p,mob)

	Bot.SkillDist = 650

	if p then

		if p.HpPrc <= 70 then

			if not HasBuff(19525,buff) and not HasBuff(19560,buff) then

				ZerkerRegenHp()

			else

				Ainput(AT_RMB)

			end

		end

		if CheckAT("AggroShout") then

			if p.HpPrc >= 90 then

				Ainput(AT_LMB)

			end

		end

	end

	if Bot.TpPriorityMob then

		if CheckAT("BT_Beast_Predator1") or CheckAT("CrazyBeast_Stand") or CheckAT("DashAttack") or CheckAT("FlankAttack") then

			local mx,my,mz = Pos()

			local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

			local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

			local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

			if kx then

				Tp(kx,ky,kz)

			else

				Tp(nx,ny,mob.mz+Bot.TpAddtionH)

			end

		end

	end

	if CheckAT("BT_UP_skill_EarthQuake_") then

		if CheckAT("Cool_Last") then

			if CheckAT("_Delay") then

				Bot.ComboMatch = false

				print("comboidx1:"..Bot.ComboIdx)

				if Bot.ComboIdx >= 3 then

					Ainput(AT_Shift+AT_RMB)

				else

					Ahold(AT_S+AT_LMB+AT_RMB)

				end

			else

				print("comboidx2:"..Bot.ComboIdx)

				Ahold(AT_S+AT_LMB+AT_RMB)

				if not Bot.ComboMatch then

					Bot.ComboIdx = Bot.ComboIdx + 1

					Bot.ComboMatch = true

				end

				if Bot.ComboIdx >= 3 then

					Ainput(AT_Shift+AT_RMB)

				else

					Ahold(AT_S+AT_LMB+AT_RMB)

				end

			end

		else

			print("comboidx3:"..Bot.ComboIdx)

			Ahold(AT_S+AT_LMB+AT_RMB)

		end

	elseif CheckAT("BT_Skill_Butt") then

		Ainput(AT_W+AT_F)

	elseif CheckAT("BT_UP_skill_DashAttack") then

		Ainput(AT_S+AT_RMB)

	elseif CheckAT("BT_UP_skill_SpinningWheel") then

		if SkillCDOK(2052) then

			Ainput(AT_S+AT_F)

		elseif SkillCDOK(2021) then

			Ainput(AT_Shift+AT_S+AT_LMB)

		end

	elseif CheckAT("BT_UP_Skill_Prey") then

		Delay(200)

		Ainput(AT_LMB)

	elseif CheckAT("BT_skill_JumpElbow_Jumping") then

		if SkillGroupCDOK({2046,2010,2044}) then

			Ainput(AT_RMB)

		elseif SkillCDOK(2021) then

			Ainput(AT_Shift+AT_S+AT_LMB)

		end

	elseif CheckAT("BT_skill_EarthQuake_") then

		if not CheckAT("Last_SC2_2") and not CheckAT("Delay") then

			Ahold(AT_Shift+AT_S+AT_LMB)

		else

			if SkillCDOK(2003) then

				Ainput(AT_LMB)

			else

				if SkillGroupCDOK({2057,2053}) then

					Ainput(AT_LMB+AT_RMB)

				end

			end

		end

	elseif CheckAT("BT_skill_StrikeAxe_Jump_Flow") then

		if p.MpPrc <= 50 then

			Bot.ComboIdx = 3

			if SkillCDOK(2114) then

				Ainput(AT_W+AT_C)

			elseif SkillGroupCDOK({2057,2053}) then

				Ainput(AT_LMB+AT_RMB)

			elseif SkillCDOKByID(2740) then

				Ainput(AT_Shift+AT_X)

			elseif SkillCDOKByID(2808) then

				Ainput(AT_Shift+AT_Z)

			elseif SkillCDOKByID(4057) then

				QuickSlotSkill(4057)

			end

		else

			if SkillGroupCDOK({2057,2053}) then

				Ainput(AT_LMB+AT_RMB)

			elseif SkillCDOKByID(2740) then

				Ainput(AT_Shift+AT_X)

			elseif SkillCDOKByID(2808) then

				Ainput(AT_Shift+AT_Z)

			elseif SkillCDOKByID(4057) then

				QuickSlotSkill(4057)

			elseif SkillCDOK(2114) then

				Ainput(AT_W+AT_C)

			end

		end

	elseif CheckAT("BT_Beast_Predator") then

		if not CheckAT("Predator4") then

			Ahold(AT_RMB)

		else

			if SkillCDOK(2021) then

				Ainput(AT_Shift+AT_S+AT_LMB)

			elseif SkillGroupCDOK({2057,2053}) then

				Ainput(AT_LMB+AT_RMB)

			elseif SkillCDOKByID(2740) then

				Ainput(AT_Shift+AT_X)

			elseif SkillCDOKByID(2808) then

				Ainput(AT_Shift+AT_Z)

			elseif SkillCDOKByID(4057) then

				QuickSlotSkill(4057)

			elseif SkillCDOK(2114) then

				Ainput(AT_W+AT_C)

			end

		end

	elseif CheckAT("BT_UP_Skill_CrazyBeast") or CheckAT("BT_Skill_DonStop_Beast") then

		Bot.ComboIdx = 1

		if CheckAT("_Last") or CheckAT("End") or CheckAT("DonStop")then

			if SkillCDOK(2113) then

				Ainput(AT_S+AT_C)

			elseif SkillCDOK(2114) then

				Ainput(AT_W+AT_C)

			elseif SkillCDOKByID(2740) then

				Ainput(AT_Shift+AT_X)

			else

				Ainput(AT_S+AT_LMB)

			end

		end

	elseif CheckAT("BT_UP_Skill_Retreat_Attack_Power") then

		Bot.ComboIdx = 1

		if SkillCDOK(2114) then

			Ainput(AT_W+AT_C)

		elseif SkillCDOKByID(2740) then

			Ainput(AT_Shift+AT_X)

		else

			Ainput(AT_A+AT_RMB)

		end

	elseif CheckAT("BT_UP_Skill_Pounding") then

		if CheckAT("Pounding_Attack1") or CheckAT("End") then

			Delay(500)

			if Bot.ComboIdx == 3 then

				if SkillGroupCDOK({2057,2053}) then

					Ainput(AT_LMB+AT_RMB)

				elseif SkillCDOKByID(2740) then

					Ainput(AT_Shift+AT_X)

				elseif SkillCDOKByID(2808) then

					Ainput(AT_Shift+AT_Z)

				elseif SkillCDOKByID(4057) then

					QuickSlotSkill(4057)

				end

			else

				Ainput(AT_A+AT_RMB)

			end

		end

	elseif CheckAT("BT_skill_FlankAttack") or CheckAT("BT_RUN_BACK") then

		Ainput(AT_S+AT_LMB)

	elseif CheckAT("BT_Skill_Fusion_DashAttack_Combine") then

		if SkillCDOKByID(4057) then

			Ainput(AT_LMB)

		else

			Ainput(AT_S+AT_LMB)

		end

	else

		Bot.ComboMatch = false

		Bot.ComboIdx = 1

		if SkillCDOK(2108) then

			QuickSlotSkillGroup(2108)

		elseif SkillCDOK(2112) then

			Ainput(AT_C)

		elseif SkillGroupCDOK({2049,2047}) then

			Ainput(AT_S+AT_LMB)

		elseif SkillGroupCDOK({2110,2009,2013}) then

			Ainput(AT_S+AT_RMB)

		elseif SkillCDOK(2021) then

			Ainput(AT_Shift+AT_S+AT_LMB)

		elseif SkillGroupCDOK({2052,2050}) then

			Ainput(AT_S+AT_F)

		elseif SkillGroupCDOK({2046,2010,2044}) then

			Ainput(AT_RMB)

		elseif SkillGroupCDOK({2057,2053}) then

			Ainput(AT_RMB+AT_LMB)

		elseif SkillCDOK(2113) then

			Ainput(AT_S+AT_C)

		elseif SkillCDOK(2114) then

			Ainput(AT_W+AT_C)

		end

	end

end



function ScholarRegnMp(p)

	if CheckAT("BT_Skill_Combo_F_01") then

		if SkillCDOK(14062) then

			Ainput(AT_RMB)

		end

	elseif CheckAT("BT_ARO_Skill_Combo_C_") then

		Ainput(AT_Space)

	elseif CheckAT("BT_Skill_Combo_I_") then

		Ainput(AT_E)

	else

		if SkillGroupCDOK({14005,14004}) then

			Ainput(AT_RMB)

		elseif SkillGroupCDOK({14015,14014,14008}) then

			if p.Mp >= 80 then

				Ainput(AT_W+AT_E)

			end

		else

			Ainput(AT_A+AT_LMB)

		end

	end

end



function ScholarRegenHp()

	local skill = {

{name="Hammer Spin",group={14066},act=AT_Shift+AT_C},

{name="Hammerfall",group={14067},act=AT_Shift+AT_F},

{name="Golden Thrunder",group={14063}},

}

DoClassSkill(skill)

end



function GuadianAwkRegenHp()

	local skill = {

{name="ÇæÌìÖù",group={9566},act=AT_S+AT_F},

{name="»ðÉñ²½·¥",group={9598},act=AT_RMB},

}

DoClassSkill(skill)

end



function MeahuaRegenHp()

	local skill = {

{name="Õ¶»÷",group={3623,3528},act=AT_E},

{name="»ÃÏë:ºì·ç",id=2746,act=AT_Shift+AT_X},

}

DoClassSkill(skill)

end



function NovaAwkRegenHp()

	local skill = {

{name="¿³»÷Ö®»·",group={10581},act=AT_Q},

{name="ÐÇÁê",group={10602},act=AT_Shift+AT_LMB},

}

DoClassSkill(skill)

end



function MeaguRegenHp()

	local skill = {

{name="Ç¿:°²Áé",group={13070},act=AT_Shift+AT_C},

{name="Àû×¦»®»÷",group={13043,13033},act=AT_S+AT_F},

{name="»ê·û",id=7250},

{name="»ê·ÉÆÇÉ¢",group={13046,13020},act=AT_S+AT_LMB},

}

DoClassSkill(skill)

end



function WitchRegnMp()

	local skill = {

{name="ÎüÊÕ·¨Á¦",group={5519}},

}

DoClassSkill(skill)

end



function WitchRegnHp()

	local skill = {

{name="ÖÎÓúµÄÄÜÁ¿",group={5527}},

{name="ÖÎÓúÖ®µÆÌ¨",group={5503}},

}

DoClassSkill(skill)

end



function NinjaRegenHp()

	local skill = {

{name="°µÓ°·ÖÁÑ",group={4580,4531}},

{name="Àä¿áµÄÒâÖ¾",group={4586,4539}},

{name = "Prime Red Rain",group={5066},act=AT_S+AT_RMB},

{name = "Prime Dark Frenzy",group={4725},act=AT_S+AT_C},

{name = "Fox Claw",group={5062,4522},act=AT_RMB+AT_Shift},

}

local has = false

	for i=1,#skill do

		if SkillGroupCDOK(skill[i].group) then

			has = true

			if skill[i].act then

				Ainput(skill[i].act)

			else

				for a=1,#skill[i].group do

					QuickSlotSkillGroup(skill[i].group[a])

				end

			end

		end

		if has then

			break

		end

	end

end



function ZerkerRegenHp()

	local skill = {

{name="¿ÉÅÂµÄ±©¾ý",group={2029,2025},act=AT_Shift+AT_Q},

{name="ºôÐ¥µÄÒ°ÊÞ",id=2807,act=AT_Shift+AT_Z},

{name="Ò°ÊÞµÄàÁÅ­",group={2096,2067}},

{name="·è¿ñ±©¾ý",id=4056},

{name="Ò°ÊÞµÄºôº°",group={2098,2069}},

}

	local has = false

	for i=1,#skill do

		if skill[i].group then

			local list = skill[i].group

			for a=1,#list do

				if SkillCDOK(list[a]) then

					if skill[i].act then

						Ainput(skill[i].act)

					else

						QuickSlotSkillGroup(list[a])

					end

					has = true

				end

				if has then break end

			end

		elseif skill[i].id then

			if SkillCDOKByID(skill[i].id) then

				if skill[i].act then

					Ainput(skill[i].act)

				else

					QuickSlotSkill(skill[i].id)

				end

				has = true

			end

		end

		if has then break end

	end

end



function ZerkerEnterBeast()

	local skill = {

{name="ÂÓÊ³ÕßµÄá÷ÁÔ",group={2052},act=AT_S+AT_F},

{name="Ç¿:ÎÞ·¨Í£Ö¹µÄÒ°ÊÞ",group={2112},act=AT_C},

{name="Ç¿:Ò°ÊÞ»¯",group={2108}},

--{name="Ò°ÊÞµÄºôº°",group={2098,2069}},

--{name="Ò°ÊÞµÄàÁÅ­",group={2096,2067}},

{name="¿ÉÅÂµÄ±©¾ý",group={2029,2025},act=AT_Shift+AT_Q},

}

	local has = false

	for i=1,#skill do

		if skill[i].group then

			local list = skill[i].group

			for a=1,#list do

				if SkillCDOK(list[a]) then

					if skill[i].act then

						Ainput(skill[i].act)

					else

						QuickSlotSkillGroup(list[a])

					end

					has = true

				end

				if has then break end

			end

		elseif skill[i].id then

			if SkillCDOKByID(skill[i].id) then

				if skill[i].act then

					Ainput(skill[i].act)

				else

					QuickSlotSkill(skill[i].id)

				end

				has = true

			end

		end

		if has then break end

	end

	return has

end



function AutoBuff()

	if Bot.AutoBuff then

		if GetTime() - gatherbuffT >= 3000 then

			local buff = GetBuffList()

			if not HasBuff(58140,buff) then

				for i =1,#Bot.AutoBuff do

					if not HasBuff(Bot.AutoBuff[i].id,buff) then

						UseItem(Bot.AutoBuff[i].item)

					end

				end

			end

			gatherbuffT = GetTime()

		end

	end

end



function DoClassSkill(ClassSkill)

	for i=1,#ClassSkill do

		if ClassSkill[i].id then

			if SkillCDOKByID(ClassSkill[i].id) then

				print(ClassSkill[i].name)

				if ClassSkill[i].act then

					Ainput(ClassSkill[i].act)

				else

					QuickSlotSkill(ClassSkill[i].id)

				end

				break

			end

		elseif ClassSkill[i].group then

			local list = ClassSkill[i].group

			local has = false

			for a=1,#list do

				local cdinfo = SkillCDInfo(list[a])

				if cdinfo.learned and cdinfo.time == 0 then

					if ClassSkill[i].act then

						Ainput(ClassSkill[i].act)

					else

						QuickSlotSkillGroup(list[a])

					end

					has = true

					break

				else

					if cdinfo.time > 0 then

						break

					end

				end

			end

			if has then

				break

			end

		end

	end

end



function DoClassSkill2(ClassSkill)

	local i = math.random(1,#ClassSkill)

	if ClassSkill[i].id then

		if SkillCDOKByID(ClassSkill[i].id) then

			if ClassSkill[i].act then

				Ainput(ClassSkill[i].act)

			else

				QuickSlotSkill(ClassSkill[i].id)

			end

		end

	elseif ClassSkill[i].group then

		local list = ClassSkill[i].group

		for a=1,#list do

			local cdinfo = SkillCDInfo(list[a])

			if cdinfo.learned and cdinfo.time == 0 then

				if ClassSkill[i].act then

					Ainput(ClassSkill[i].act)

				else

					QuickSlotSkillGroup(list[a])

				end

			else

				if cdinfo.time > 0 then

					break

				end

			end

		end

	end

end



function SkillListCDOK(ClassSkill)

	local has = false

	for i =1,#ClassSkill do

		if ClassSkill[i].id then

			if SkillCDOKByID(ClassSkill[i].id) then

				has = true

			end

		elseif ClassSkill[i].group then

			local list = ClassSkill[i].group

			if SkillGroupCDOK(list) then

				has = true

			end

		end

	end

	return has

end



function DoNinjaSkill()

	for i=1,#NinjSkill do

		if NinjSkill[i].id then

			if SkillCDOKByID(NinjSkill[i].id) then

				if NinjSkill[i].act then

					Ainput(NinjSkill[i].act)

				else

					QuickSlotSkill(NinjSkill[i].id)

				end

				break

			end

		elseif NinjSkill[i].group then

			local crap = SkillGroupCDOK(NinjSkill[i].group)

			

			if crap then

				if NinjSkill[i].act then

					if NinjSkill[i].group == {5065} or NinjSkill[i].group == {5059,5001} then

						refreshYaw()

					end

					Ainput(NinjSkill[i].act)

				else

					QuickSlotSkillGroup(crap)

				end

				break

			end

		end

	end

end



function ResetLootGid()

	if GetTime() - lootgidresetT >= 60000 then

		lootgidList = {}

		lootgidresetT = GetTime()

	end

end



function SaveState()

	TempState,TempLastState = State,LastState

end



function LoadState()

	if TempState then

		State,LastState = TempState,TempLastState

	end

end



function ResetPDR(num)

	if not num then

		if GetTime() - PDRTick >= 5*60*1000 then

			Bot.PDRecord = {}

			Bot.SamePlayerDetectWithinShortTime = false

			PDRTick = GetTime()

		end

	else

		Bot.PDRecord = {}

		Bot.SamePlayerDetectWithinShortTime = false

		PDRTick = GetTime()

	end

end



function ResetActorBL()

	if GetTime() - actorBLT >= 20000 then

		actorBlackList = {}

		actorBLT = GetTime()

	end

end



function ResetPlayerName()

	if GetTime() - ResetPlayerNameT >= 120000 then

		Bot.MyName = nil

		ResetPlayerNameT = GetTime()

	end

end



function FindCloserWayInMainPath()

	Path = MainPath

	CS = GetCSByPath(Path)

	local Dist1 = 0

	local Dist2 = 0

	if CS - 1 >= 0 and CS + 1 <= #Path then

		for i = 1, CS do 

			if i + 1 < CS then

				Dist1 = Dist1 + Dist3DCal(Path[i].x,Path[i].y,Path[i].z,Path[i+1].x,Path[i+1].y,Path[i+1].z)

			else

				Dist1 = Dist1 + Dist3DCal(Path[i].x,Path[i].y,Path[i].z,Path[CS].x,Path[CS].y,Path[CS].z)

			end

		end

		print("Backward distance is:"..Dist1)

		for i = CS+1, #Path do 

			if i + 1 < #Path then

				Dist2 = Dist2 + Dist3DCal(Path[i].x,Path[i].y,Path[i].z,Path[i+1].x,Path[i+1].y,Path[i+1].z)

			else

				Dist2 = Dist2 + Dist3DCal(Path[i].x,Path[i].y,Path[i].z,Path[#Path].x,Path[#Path].y,Path[#Path].z)

			end

		end

		print("Forward distance is:"..Dist2)

		if Dist1 >= Dist2 then

			print("Go forward to restock")

			AS = #Path

		else

			print("Go backward to restock")

			AS = 1

		end

	else

		print("Go backward to restock")

		AS = 1

	end

	State = 1

	LastState = 5

end



function NaviToRestock()

	TurnOffAlchemyStone()

	TurnOffItemCollectScroll()

	Path=Restock

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = GetASByNpcFromPath(Path)

	Bot.Npc = Path[AS].npc

	print("Restock Npc:"..tostring(Bot.Npc))

	print("Navi to Restock,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	State = 1

	LastState = 6

end



function NaviToWarehouse()

	TurnOffItemCollectScroll()

	Path=Warehouse

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = GetASByNpcFromPath(Path)

	Bot.Npc = Path[AS].npc

	print("Warehouse Npc:"..tostring(Bot.Npc))

	print("Navi to Warehouse,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	State = 1

	LastState = 7

end



function NaviToScroll()

	if #MarketPlace>0 then

		Path= MarketPlace

	else

		Path= MainPath

	end

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	local npcspot = GetASByNpcFromPath(Path)

	if npcspot == #Path then

		AS = 1

	else

		AS = #Path

	end

	print("Navi to Do Scroll,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	State = 1

	LastState = 8

end



function NaviToCamp()

	Path= CampPath

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = #Path

	print("Navi to camp,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	State = 1

	LastState = 11

end



function NaviToMainPath()

	TurnOffItemCollectScroll()

	Path= MainPath

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = #Path

	print("Navi to MainPath,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	LastState = 9

	State = 1

end



function NaviToMainPathByRestock()

	Path= Restock

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = table.GetClosestASfromT1ToT2(Restock,MainPath)

	print("Navi to MainPath,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	LastState = 18

	State = 1

end





function NaviToNearRepair()

	PrintBotStatus("Navi to repair")

	local pos = GetNearNpcPosByType(2)

	if pos then

		Bot.Npc = GetNearNpcUidByType(2)

		Bot.NpcPos = pos

		local name = GetNearNpcNameByType(2)

		print("Nearest repair is:"..tostring(name).."/"..tostring(Bot.Npc))

		NavTo(pos.x,pos.y,pos.z)

	else

		pos = GetNearNpcPosByType(7)

		if pos then

			Bot.Npc = GetNearNpcUidByType(7)

			Bot.NpcPos = pos

			local name = GetNearNpcNameByType(7)

			print("Nearest repair is:"..tostring(name).."/"..tostring(Bot.Npc))

			NavTo(pos.x,pos.y,pos.z)

		else

			pos = GetNearNpcPosByType(17)

			if pos then

				Bot.Npc = GetNearNpcUidByType(17)

				Bot.NpcPos = pos

				local name = GetNearNpcNameByType(17)

				print("Nearest repair is:"..tostring(name).."/"..tostring(Bot.Npc))

				NavTo(pos.x,pos.y,pos.z)

			else

				print("Cant find near repiar npc,stop bot")

				State = -2

			end

		end

	end

	if pos then

		State = 0

		LastState = 16

	end

end



function NaviToNearTrader()

	PrintBotStatus("Navi to trader")

	local pos = GetNearNpcPosByType(5)

	if pos then

		Bot.Npc = GetNearNpcUidByType(5)

		Bot.NpcPos = pos

		local name = GetNearNpcNameByType(5)

		print("Nearest trader is:"..tostring(name).."/"..tostring(Bot.Npc))

		NavTo(pos.x,pos.y,pos.z)

	else

		print("Cant find near repiar npc,stop bot")

		State = -2

	end

	if pos then

		State = 0

		LastState = 17

	end

end



function TalkNearNpc()

	if GetTime() - npcBLResetT >= 60000 then

		npcBL1 = {}

		npcBLResetT = GetTime()

	end

	local list = ActorList()

	local mx,my,mz = Pos()

	for i =1,#list do

		if list[i].sign == 2 and list[i].firstTalk then

			if not table.find(npcBL1,list[i].actor) then

				if Dist3DCal(mx,my,mz,list[i].mx,list[i].my,list[i].mz) <= 2050 then

					print("Talk:"..list[i].name.." "..tostring(list[i].rdtype))

					local tick = GetTime()

					while not ScriptStop() do

						local d = DialogInfo()

						if not d.dialogopen then

							if Dist2P3D(list[i].mx,list[i].my,list[i].mz) <= 1080 then

								obj_open(list[i].actor)

							end

						else

							break

						end

						change_MousePosition(0)

						Walk(list[i].mx,list[i].my,list[i].mz+20)

						if GetTime() - tick >= 2000 then

							break

						end

						Delay(1)

					end

					table.insert(npcBL1,list[i].actor)

					ResetWalkT()

					break

				end

			end

		end

	end

end



function OpenNpc(str,x,y,z,notaddbl)

	if GetTime() - openNpcTick >= 500 then

		if GetTime() - npcBLResetT >= 3000 then

			npcBL = {}

			npcBLResetT = GetTime()

		end

		if Bot.NpcPos then

			x,y,z = Bot.NpcPos.x,Bot.NpcPos.y,Bot.NpcPos.z

		end

		local list=ActorList()

		local dist,idx = math.huge,nil

		for i = 1,#list do

			if list[i].sign == 2 then

				if not table.find(npcBL,list[i].actor) then

					if str then

						if list[i].name == str or list[i].uid == str then

							if not x then

								if not notaddbl then

									if not table.find(npcBL,list[i].actor) then

										table.insert(npcBL,list[i].actor)

									end

								end

								obj_open(list[i].actor)

								break

							else

								local toc = Dist3DCal(x,y,z,list[i].mx,list[i].my,list[i].mz)

								if dist > toc then

									dist = toc

									idx = i

								end

							end

						end

					else

						local toc = Dist3DCal(x,y,z,list[i].mx,list[i].my,list[i].mz)

						if dist > toc then

							dist = toc

							idx = i

						end

					end

				end

			end

		end

		if idx then

			local top = Dist2P3D(list[idx].mx,list[idx].my,list[idx].mz)

			if top <= 1080 then

				if not notaddbl then

					if not table.find(npcBL,list[idx].actor) then

						table.insert(npcBL,list[idx].actor)

					end

				end

				print("Talk to:"..list[idx].name.." uid:"..list[idx].uid.." dist:"..top.." actor:"..list[idx].actor)

				obj_open(list[idx].actor)

				Bot.LastNpcGid = list[idx].gid

				print(list[idx].actor)

				print(888888888)

			end

		end

		openNpcTick = GetTime()

	end

end



function EntityList(x,y,z,r,tgtype,nametb)

	if not x then x,y,z = Pos() end

	if not r then r = 20 end

	if not tgtype then tgtype = 1 end

	local m = {}

	local list=ActorList()

	for i = 1,#list do

		if list[i].sign == tgtype then

			if list[i].dead == 0 then

				if not table.match(Bot.MobBL,list[i].name) and not table.find(Bot.MobBL,list[i].uid) then

					local dist=	Dist2DCal(x,y,list[i].mx,list[i].my)

					if math.abs(z-list[i].mz) <= 300 then

						if dist <= r*100 then

							list[i].Dist = dist

							if not nametb then

								table.insert(m,list[i])

							else

								if table.find(nametb,list[i].name) or table.find(nametb,list[i].uid) then

									table.insert(m,list[i])

								end

							end

						end

					end

				end

			end

		end

	end

	if #m == 0 then m = nil end

	return m

end



function GetEntity(tgtype)

	local m = {}

	local list=ActorList()

	for i = 1,#list do

		if list[i].sign == tgtype then

			table.insert(m,{actor=list[i].actor,gid=list[i].gid,mx=list[i].mx,my=list[i].my,mz=list[i].mz,name=list[i].name,Type=list[i].sign,Dist=dist})

		end

	end

	return m

end



function HasMob(x,y,z,r,tg)

	local list=ActorList()

	if list then

		for i =1,#list do

			for a=1,#tg do

				if list[i].sign == 1 then

					if list[i].dead == 0 then

						if list[i].uid == tg[a] or list[i].name == tg[a] then

							local dist=	Dist2DCal(x,y,list[i].mx,list[i].my)

							if dist <= r*100 then

								return true

							end

						end

					end

				end

			end

		end

	end

	return false

end



function GetPosByGid(gid)

	local code = string.format([[

local actorProxyWrapper = getActor(%i)

local pos = actorProxyWrapper:get():getPosition()

return "{x="..pos.x..",y="..pos.z..",z="..pos.y.."}"

]],gid)

local str = Retlua(code)

local b = load("return " .. str)

return b()

end



function GetGather(x,y,z,r,tg)

	local longdist=math.huge	

	local m,m2 = nil,nil

	local list=ActorList()

	local has = false

	for i = 1,#list do

		if not table.find(actorBlackList,list[i].actor) then

			if list[i].sign == 6 then

				if not table.match(Bot.MobBL,list[i].name) and not table.match(Bot.MobBL,list[i].uid) then

					local dist=	Dist2DCal(x,y,list[i].mx,list[i].my)

					if math.abs(list[i].mz-z) <= 400 then

						if dist <= r*100 then

							DrawPos(list[i].mx,list[i].my,list[i].mz)

							if not tg then

								if dist<=longdist then

									longdist=dist

									m = {}

									m.actor,m.mx,m.my,m.mz,m.name,m.type,m.dist,m.uid,m.gid = list[i].actor,list[i].mx,list[i].my,list[i].mz,list[i].name,list[i].sign,((longdist-longdist%0.01)/100),list[i].uid,list[i].gid

								end

							else

								if #tg > 0 then

									for a=1,#tg do

										if list[i].name == tg[a] or list[i].uid == tg[a] then

											has = true

											if dist<=longdist then

												longdist=dist

												m = {}

												m.actor,m.mx,m.my,m.mz,m.name,m.type,m.dist,m.uid,m.gid = list[i].actor,list[i].mx,list[i].my,list[i].mz,list[i].name,list[i].sign,((longdist-longdist%0.01)/100),list[i].uid,list[i].gid

											end

										end

									end

								else

									if dist<=longdist then

										longdist=dist

										m = {}

										m.actor,m.mx,m.my,m.mz,m.name,m.type,m.dist,m.uid,m.gid = list[i].actor,list[i].mx,list[i].my,list[i].mz,list[i].name,list[i].sign,((longdist-longdist%0.01)/100),list[i].uid,list[i].gid

									end

								end

							end

						end

					end

				end

			end

		end

	end

	return m

end



function DrawGather(r,h)

	local drawed,tick = {},0

	while not Í£Ö¹½Å±¾() do

		if GetTime() - tick >= 20000 then

			DeleteDraw()

			drawed = {}

			tick = GetTime()

		else

			local x,y,z = Pos()

			local list=ActorList()

			for i = 1,#list do

				if list[i].sign == 6 then

					local dist = Dist2DCal(x,y,list[i].mx,list[i].my)

					if math.abs(list[i].mz-z) <= h*100 then

						if dist <= r*100 then

							for a= 1,#Bot.GatherTarget do

								if list[i].name == Bot.GatherTarget[a] then

									if not table.find(drawed,list[i].actor) then

										DrawPos(list[i].mx,list[i].my,list[i].mz)

										table.insert(drawed,list[i].actor)

									end

								end

							end

						end

					end

				end

			end

		end

		Delay(50)

	end

end



function GetCSMobFromList(tb)

	local dist,idx = math.huge,nil

	for i =1,#tb do 

		if dist > tb[i].Dist then

			dist = tb[i].Dist

			idx = i

		end

	end

	if idx then return tb[idx] else return nil end

end



function GetPvpTarget()

	local list = ActorList()

	local mob,dist = nil,math.huge

	if list then

		for i =1,#list do

			if list[i].sign == 0 then

				if list[i].dead == 0 then

					--print(list[i].name)

					local fit = false

					if Bot.FreePvpMode then

						fit = true

					else

						if table.find(Bot.PvpTarget,list[i].name) then

							fit = true

						end

					end

					if fit then

						local top = Dist2P3D(list[i].mx,list[i].my,list[i].mz)

						if dist > top then

							dist = top

							mob = list[i]

						end

					end

				end

			end

		end

	end

	return mob

end



function PvpBot()

	State = 100

	AutoRegisteWatchDog()

	local tick = 0

	while not ScriptStop() do

		if not Loading_Init() then

			if IsWindow() then

				if not Bot.FreePvpMode then

					if IsKeyPressed(105) then

						Bot.FreePvpMode = true

						PrintScreen("Free Pvp Mode on")

					end

				else

					if IsKeyPressed(105) then

						Bot.FreePvpMode = false

						PrintScreen("Free Pvp Mode off")

					end

				end

				local p = PlayerInfo()

				if p.Hp > 0 then

					if IsKeyPressed(109) then

						AntiCC()

					end

					if IsKeyPressed(107) then

						local mx,my,mz = Pos()

						local mob = GetPvpTarget()

						if mob then

							local top = Dist2P(mob.mx,mob.my)

							local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

							if not Bot.SkillRushBack then

								SetFace(angle)

								setYaw(angle)

							end

							if not CheckAT("BT") then

								Ainput(AT_W+AT_LMB)

							end

							if Bot.TpPriorityMob then

								if p.Class == 26 then

									NinjaSmallTp(mob)

								elseif p.Class == 33 then

									DosaSmallTp(mob)

								end

							end

							Out_Title("Target:"..mob.name.." Dist:"..top)

							if GetTime() - tick >= 1000 then

								mx,my,mz = Pos()

								local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

								local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

								if math.abs(p.Face-mob.face) >= 3.13 then

									Tp(nx,ny,mob.mz+25)

									print("tp")

								end

								tick = GetTime()

							end

							if top >= Bot.SkillDist then

								WalkTo(mob.mx,mob.my,mob.mz)

							else

								GrindComboSet(p,mob)

							end

						else

							Out_Title("No PVP target found")

						end

					else

						Out_Title("Hold Hot key to find target")

					end

					OnPulseShit()

				end

				LoadBotSetting()

			end

		end

		Delay(20)

	end

	Areset()

end



function GetPlayer(x,y,z,r,tg)

	ResetPlayerName()

	ResetPDR()

	Bot.MyName = GetName()

	local mname = Bot.MyName

	local longdist = math.huge

	local m = nil

	local list=ActorList()

	local GMTxt = ""

	local foundGM = false

	for i =1,#list do

		if list[i].sign == 0 then

			if list[i].name ~= Bot.MyName and not table.find(ignoreGM,list[i].name) and not table.find(Bot.ignoreGM,list[i].name) then

				if string.match(list[i].name,"GM") then

					foundGM = true

					GMTxt = GMTxt..list[i].name.."/"

				end

			end

		end

	end

	if foundGM then

		if not Bot.OnGMDetectTick then

			Bot.OnGMDetectTick = GetTime()

		else

			if GetTime() - Bot.OnGMDetectTick >= 1000 then

				for i =1,#list do

					if list[i].sign == 0 then

						if list[i].name ~= Bot.MyName and not table.find(ignoreGM,list[i].name) and not table.find(Bot.ignoreGM,list[i].name) then

							if string.match(list[i].name,"GM") then

								DrawNewPos(list[i].mx,list[i].my,list[i].mz)

								local file = io.open("c:\\gmlog1.txt", "w")

								local current_time = os.date()

								if file then

									file:write("GM Found335511".." name:"..GMTxt.." Pos:"..list[i].mx..","..list[i].my..","..list[i].mz.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp).." Date:"..current_time.."\n")

									file:close()

								end

								file = io.open("c:\\gmlog.txt", "w")

								if file then

									file:write("GM Found335511".." name:"..list[i].name.." Type:"..list[i].sign.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp).." Date:"..current_time.."\n")

									file:close()

								end

								file = io.open(DllPath().."\\newmsg.txt", "w")

								if file then

									file:write("GM detected!!! Name:"..list[i].name.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp))

									file:close()

								end

							end

						end

					end

				end

			end

		end

	end

	for i = 1,#list do

		if list[i].sign == 0 then

			if list[i].name ~= Bot.MyName and list[i].uid ~= 10 then

				if not table.find(Bot.PlayerWhiteList,list[i].name) then

					local has = false

					for a=1,#Bot.PDRecord do

						if Bot.PDRecord[a].name == list[i].name then

							if GetTime() - Bot.PDRecord[a].time >= Bot.SwapChannelAtPDTimer*1000 then

								local current_time = os.date()

								local file = io.open(DllPath().."\\newmsg.txt", "w")

								if file then

									file:write("Player detected for long time!!! Name:"..list[i].name.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp))

									file:close()

								end

								Bot.SamePlayerDetectWithinShortTime = true

								Bot.SamePlayer = list[i].name

							end

							has = true

							break

						end

					end

					if not has then

						table.insert(Bot.PDRecord,{name=list[i].name,time=GetTime()})

					end

					local dist=	Dist2DCal(x,y,list[i].mx,list[i].my)

					if dist <= r*100 then

						if dist<=longdist then

							if not tg then

								longdist=dist

								m = {}

								m.actor,m.mx,m.my,m.mz,m.name,m.type,m.dist,m.uid,m.gid = list[i].actor,list[i].mx,list[i].my,list[i].mz,list[i].name,list[i].sign,((longdist-longdist%0.01)/100),list[i].uid,list[i].gid

							else

								if list[i].name == tg then

									longdist=dist

									m = {}

									m.actor,m.mx,m.my,m.mz,m.name,m.type,m.dist,m.uid,m.gid = list[i].actor,list[i].mx,list[i].my,list[i].mz,list[i].name,list[i].sign,((longdist-longdist%0.01)/100),list[i].uid,list[i].gid

								end

							end

						end

					end

				end

			end

		end

	end

	return m

end



function GetLoot(x,y,z,r,lootOnly)

	if not lootOnly then lootOnly = 0 end

	ResetLootGid()

	local m = {}

	local list=ActorList()

	if list then

	local mx,my,mz = Pos()

	for i = 1,#list do

		if list[i].sign == 9 then

			if not lootOnly then

				if not table.find(lootgidList,list[i].gid) then

					table.insert(lootgidList,list[i].gid)

					table.insert(m,list[i].gid)

				end

			else

				table.insert(m,list[i].gid)

			end

		end

	end

local code = "local ret = '{' local list={"

for i=1,#m do

	code = code..m[i]..","

end

code=code.."}"

code = code..string.format([[

local mx,my,mz,range,onlyloot = %f,%f,%f,%f,%i

function Dist2DCal(x1,y1,x2,y2)

	return math.abs(math.sqrt((x1 - x2)^2 +  (y1 - y2)^2))

end

for i =1,#list do

	local tgactor = getActor(list[i])

	local pos=tgactor:get():getPosition()

	local toc = Dist2DCal(pos.x,pos.z,mx,my)

	local loot = tgactor:getSettedFirstInteractionType()

	local loot2 = tgactor:isInteractable()

	if toc <= range*100 then

		if loot then

			local match = false

			if onlyloot == 0 then 

				if loot == 97 or loot == 7 then 

					match = true 

				end

			else

				if loot == 7 then

					match = true

				end

			end

			if match then

				ret = ret.."{mx="..pos.x..",my="..pos.z..",mz="..pos.y..",gid="..list[i].."},"

			end

		end

	end

end

ret = ret.."}"

return ret

]],x,y,z,r,lootOnly)

local str = Retlua(code)

local b = load("return " .. str)

if type(b) == "function" then

	return b()

else

	return nil

end

else

	return nil

end

end



function LootAround()

	if Bot.DoLoot then

		local x,y,z = Pos()

		local list = GetLoot(x,y,z,3.5,1)

		if list and type(list) == "table" then

			if #list > 0 then

				for i =1,#list do

					obj_Gidloot(list[i].gid)

				end

			end

		end

	end

end



function ²É¼¯()

	interaction_processInteraction(CppEnums.InteractionType.InteractionType_Collect)

end



function setYaw(value)

change_CameraYaw(value)

end



function setPitch(value)

  selfPlayerSetCameraPich(value)

end



function PrintGM()

	local tick,tick2,tick3,tick4,BSTime = GetTime(),GetTime(),GetTime(),GetTime(),0

	while not ScriptStop() do

		if GetTime() - tick >= 1000 then

			DeleteDraw()

			local list = ActorList()

			local str,str2 = "",""

			for i =1,#list do

				if list[i].sign == 0 then

					if string.match(list[i].name,"GM") and not table.find(Bot.ignoreGM,list[i].name) then

						str = str.."name:"..list[i].name.."/"..list[i].sign.."/"..list[i].uid.." | "

						DrawPos(list[i].mx,list[i].my,list[i].mz)

						local current_time = os.date()

						str2 = str2 .." name:"..list[i].name.." Pos:"..list[i].mx..","..list[i].my..","..list[i].mz.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp).." Date:"..current_time.."\n"

					end

				end

			end

			local file = io.open("c:\\gmlog2.txt", "w")

			if file then

				file:write(str2)

				file:close()

			end

			Out_Title(str)

			tick = GetTime()

		end

		if BSTime < 4 then

			if GetTime() - tick3 >= 2000 then

				CallBlackSprite()

				BSTime = BSTime + 1

				tick3 = GetTime()

			end

		end

		if tick4 then

			if GetTime() - tick4 >= 20000 then

				local file = io.open(DllPath().."\\newmsg.txt", "w")

				if file then

					file:write("In GM Alert")

					file:close()

				end

				tick4 = nil

			end

		end

		Delay(100)

		TurnOffItemCollectScroll()

		if GetTime() - tick2 >= 310000 then

			break

		end

	end

end



function QuickSlotInCD(a)

	local code = string.format([[

		local quickSlotInfo = getQuickSlotItem(%i)

		local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

		return remainTime

	]], a-1)

	local i = AIO.Player.BDOBackLuaExecute(code)

	if i ~= nil then

		if tonumber(i) == 0 then

			return false

		else

			return true

		end

	else

		return true

	end

end



function QuickSlot(k)

	 local code = string.format([[

local idx = %i

local quickSlotInfo = getQuickSlotItem(idx)

if quickSlotInfo then

	if quickSlotInfo._type == 2 then

		local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

		if remainTime == 0 then

			quickSlot_UseSlot(idx)

		end

	end

end

]], k-1)

	Dolua(code)

end



function SmashQuickSlot()

	 local code = string.format([[

for idx = 1,16 do

	local quickSlotInfo = getQuickSlotItem(idx)

	if quickSlotInfo then

		if quickSlotInfo._type == 2 then

			local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

			if remainTime == 0 then

				quickSlot_UseSlot(idx)

			end

		end

	end

end

    ]])

	Dolua(code)

end



function SmashMoveSlot()

	 local code = string.format([[

for idx = 18,19 do

	local quickSlotInfo = getQuickSlotItem(idx)

	if quickSlotInfo then

		if quickSlotInfo._type == 2 then

			local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

			if remainTime == 0 then

				quickSlot_UseSlot(idx)

			end

		end

	end

end

    ]])

	Dolua(code)

end



function PrintScreen(str)

	print(str)

	local code = "Proc_ShowMessage_Ack_WithOut_ChattingMessage('"..str.."')"

	Dolua(code)

end



function WaitAtCharacterSelect()

	LastState = 23

	local tick = GetTime()

	while not ScriptStop() do

		if not Loading_Init() then

			if IsWindow() then

				local Ui = UiInfo()

				if Ui.characterselectshow then

					if Bot.SwapCD then

						Out_Title("Wait until relog in:"..((Bot.SwapCD*1000-(GetTime() - tick))/1000).." sec")

						if GetTime() - tick >= Bot.SwapCD*1000 then

							WaitLoading(1)

							break

						end

					else

						break

					end

				else

					if not FadeShow() then

						GoBackSelectCharacterScreen()

					else

						Out_Title("Go back to CharacterSelect")

					end

				end

			end

		end

		Delay(500)

	end

	Bot.SwapCD = nil

	Delay(1000)

	RoundWindow()

	BDO_mouse()

	ResetPDR(1)

	Bot.minimizeT = GetTime()

	Bot.SeasonT = GetTime()

	Bot.NeedSwapChannelatMobDetected = false

	Bot.SamePlayerDetectWithinShortTime = false

	Bot.WatchDogRegistered = false

	Bot.StartT = nil

	Bot.Click1 = false

	Bot.Click2 = false

	LastState = 23

	State = -1

end



function PathGrind(path,direction,interval,quest,questcondition)

	local cs,as,dir = GetCSByPath(path),nil,nil

	local lastdist,lastcs = nil,nil

	if direction == 1 then as = #path else as = 1 end

	if Dist2P3D(path[cs].x,path[cs].y,path[cs].z) <= 1500 then

		NavTo(path[cs].x,path[cs].y,path[cs].z)

	else

		cs = 1

		NavTo(path[cs].x,path[cs].y,path[cs].z)

	end

	local function AtReach()

		ResetStuck()

		if path[cs].r then

			Grind(path[cs].x,path[cs].y,path[cs].z,path[cs].r,quest)

		end

		cs = cs + dir

		if dir == 1 then

			if cs > as then

				cs = 1

			end

		else

			if cs < 0 then

				cs = #path

			end

		end

		dir = nil

	end

	while not ScriptStop() do

		if HasGM() then State = -3 break end

		Out_Title("cs/as/dir:"..tostring(cs).."/"..tostring(as).."/"..tostring(dir))

		if not dir then

			if cs < as then dir = 1 end

			if cs > as then dir = -1 end

			if cs == as then dir = 1 end

		else

			local top = Dist2P(path[cs].x,path[cs].y)

			if top >= 180 then

				if not lastdist then lastdist = top end

				if not lastcs then 

					lastcs = cs

				else

					if lastcs == cs then

						if lastdist ~= top then

							if top > lastdist then

								AtReach()

							else

								lastdist = top

							end

						end

					else

						lastdist,lastcs = nil,nil

					end

				end

				WalkTo(path[cs].x,path[cs].y,path[cs].z)

			else

				AtReach()

			end

		end

		if quest then

			local q = QuestInfo(quest.group,quest.id)

			if q.questdone then

				break

			end

		end

		if questcondition then

			local c = QuestCondition(quest.group,quest.id)

			local isdone = false

			for i=1,#questcondition do

				if c[questcondition[i]].done then

					isdone = true

					print("End Path Grind at quest condition:"..questcondition[i])

					break

				end

			end

			if isdone then

				break

			end

		end

		Delay(1)

	end

end



function WaitRevive()

	local tx,ty,tz = Pos()

	while not ScriptStop() do

		if not Loading_Init() then

			if IsWindow() then

				local p = PlayerInfo()

				if p.Hp <= 0 then

					ReviveNode()

				end

				local mx,my,mz = Pos()

				if mx ~= tx and my ~= ty then

					if p.Hp > 0 then

						print("Revive Done")

						--Delay(20000)

						if not Bot.DontSwapChannelAfterRevive then

							if ChannelMoveable() then

								print("Channel movable.")

								State = 12

								break

							else

								print("Wait Channel move CD.")

							end

						else

							State = -1

							break

						end

					end

				end

			end

		else

			print("Loading screen")

		end

		Delay(1000)

	end

end



function WaitEscape()

	local tick,tick2,noEscapeT = nil,0,nil

	while not ScriptStop() do

		if not Loading_Init() then

			if IsWindow() then

				local mx,my,mz = Pos()

				Walk(mx,my,mz)

				if CheckAT("Swimming") then

					if not EscapeShow() then

						if GetTime() - tick2 >= 1000 then

							Escape()

							tick2 = GetTime()

						end

						--[[if not noEscapeT then

							noEscapeT  = GetTime()

						else

							if GetTime() - noEscapeT >= 9000 then

								print("Escape is in CD, now try to suicide.")

								State = 21

								break

							end

						end--]]

					else

						noEscapeT = nil

					end

					tick = nil

				else

					if not tick then

						tick = GetTime()

					else

						if GetTime() - tick >= 3000 then

							print("End Scape")

							break

						end

					end

				end

			end

		else

			print("Loading screen")

		end

		Delay(1000)

	end

	if State ~= 21 then

		State = -1

	end

end



function ArenaSuicid()

local path = {

{No=1,x=137835.34375,y=337656.0625,z=-178.44906616211},

{No=2,x=137835.34375,y=337656.0625,z=-178.44906616211},

{No=3,x=137254.875,y=337260.5625,z=-281.57690429688},

{No=4,x=136685.59375,y=336849.15625,z=-357.99783325195},

{No=5,x=136128.140625,y=336422.46875,z=-357.97253417969},

{No=6,x=135517.3125,y=336059.53125,z=-282.27673339844},

{No=7,x=134910.984375,y=335705.71875,z=-227.05578613281},

{No=8,x=134268.09375,y=335424.84375,z=-168.47428894043},

{No=9,x=133745.78125,y=335305.28125,z=-130.30844116211},

{No=10,x=133501.484375,y=335578.0625,z=18.112348556519},

{No=11,x=133266.515625,y=335859.3125,z=187.93965148926},

{No=12,x=132830.171875,y=335674.0625,z=-43.568656921387},

{No=13,x=133036.84375,y=335792.8125,z=-63.280342102051},

}

	local inBA,tick,walkToFall,tick2,backSelectCh,backSelectLoad = false,0,false,0,false,false

	while not ScriptStop() do

		if GetTime() - tick2 >= 200 then

			if not Loading_Init() then

				if IsWindow() then

					if not inBA then

						if not IsInBA() then

							if not FadeShow() then

								if GetTime() - tick >= 1000 then

									JoinBA()

									tick = GetTime()

								end

							end

						else

							RoundWindow()

							BDO_mouse()

							inBA = true

						end

					else

						if not walkToFall then

							RoundWindow()

							BDO_mouse()

							GoPath(path,1)

							walkToFall = true

						else

							if not backSelectCh then

								if not FadeShow() then

									local p = PlayerInfo()

									if p.Hp > 0 then

										SetFace(4.24)

										setYaw(4.26)

										Ahold2(AT_W,500)

										local x,y,z = Pos()

										Tp(x,y,z-50)

									else

										if GetTime() - tick >= 1000 then

											Areset()

											GoBackSelectCharacterScreen()

											tick = GetTime()

										end

									end

								else

									backSelectCh = true

								end

							else

								if backSelectLoad then

									print("Finished suicide")

									Delay(5000)

									State = 19

									break

								end

							end

						end

					end

				end

			else

				if backSelectCh then

					backSelectLoad = true

				end

			end

			tick2 = GetTime()

		end

		Delay(100)

	end

	Areset()

end



function RLSwing()

	local i = math.random(1,2) if i ==1 then Ainput(AT_A+AT_LMB) else Ainput(AT_D+AT_LMB) end

end



function Gather(x,y,z,r,quest,tg)

	local mob = nil

	local drawT = 0

	local BLT = nil

	local lastmob = nil

	local TgList = {}

	local p = nil

	local AAT = 0

	local radarT = 0

	local radarList = {}

	local StartT = nil

	local checkdialogT = 0

	local needRegenMp = false

	local printT = 0

	local swapTool,nogatherableT,stopaction,needswapTool = false,nil,false,false

	local orgx,orgy,orgz = nil,nil,nil

	local GatherT,isgathering = 0,false

	local resetStance = false

	while not ScriptStop() do

		if HasGM() then State = -3 break end

		local myaction = ActionName()

		if string.match(myaction,"SOCIAL") or string.match(myaction,"TUTORIAL") or string.match(myaction,"DAMAGE") or string.match(myaction,"KNOCK") or string.match(myaction,"JUMP_P_D_FALL4") then

			DOAction("WAIT")

		end

		local mx,my,mz = Pos()

		p = PlayerInfo()

		if p.Freeslot <= 3 then

			break

		end

		if not mob then

			orgx,orgy,orgz = nil,nil,nil

			swapTool,nogatherableT,stopaction = false,nil,false

			mob = GetGather(x,y,z,r,Bot.GatherTarget)

			GatherT = GetTime() - 900

			if not mob then

				break

			end

		else

			if Bot.ACFlagHold then

				Areset()

			end

			if GetTime() - checkdialogT >= 2000 then

				local d = DialogInfo()

				if d.dialogopen then ExitDialog() end

				checkdialogT = GetTime()

			end

			if not lastmob then

				lastmob = mob.actor

				if not table.find(TgList,lastmob) then

					table.insert(TgList,lastmob)

					BLT = GetTime()

				end

			else

				if lastmob ~= mob.actor then

					lastmob = nil

					BLT = nil

				end

			end

			PrintBotStatus("Gathering")

			local shitinfo = Stateinfo.."  Gathering:"..mob.name.." uid:"..mob.uid.." Dist:"..mob.dist.." WeightPrc:"..p.WeightPrc.."% DuraPrc:"..p.DuraPrc.."% Freeslot:"..p.Freeslot.." StorageMaid:"..p.StorageMaid

			Out_Title(shitinfo)

			if GetTime() - printT >= 5000 then

				print(shitinfo)

				printT = GetTime()

			end

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			--SetFace(angle)

			--setYaw(angle)

			if GatherExist(mob.gid) then

				if Dist2P(mob.mx,mob.my) > 150 then

					resetStance = false

					WalkTo(mob.mx,mob.my,mob.mz+20,p)

				else

					--if CheckAT("BT_Skill_Rider") then

					if not resetStance then

						if not CheckAT("WAIT") then

							DOAction("WAIT")

						end

						resetStance = true

					end

					if p.Speed > 0 then

						StopWalk()

					else

						--if SwapProperTool(mob.gid) then

						if GetTime() - GatherT >= 300 then

							--if WaitSwapTool(mob.gid) then

								if IsGatherable() then

									nogatherableT = nil

									if not CheckAT("COLLECT") then

										if not CheckAT("WAIT") then

											if not stopaction then

												Ainput(AT_S)

												Delay(50)

												Ainput(AT_W)

												stopaction = true

											end

										else

											stopaction = true

										end

										DoGather()

									end

								else

									if not orgx then

										orgx,orgy,orgz = Pos()

									end

									if not nogatherableT then

										Tp(mob.mx,mob.my,mob.mz+10)

										Delay(100)

										nogatherableT = GetTime()

									else

										if GetTime() - nogatherableT >= 2000 then

											if orgx then

												Tp(orgx,orgy,orgz)

											end

											BLT = nil

											mob = nil

										end

									end

								end

							--else

								--BLT = nil

								--mob = nil

							--end

							GatherT = GetTime()

						end

					end

				end

				if BLT then

					if GetTime() - BLT >= 23000 then

						if not table.find(actorBlackList,mob.actor) then

							print("Gather time out,give up:"..mob.name)

							table.insert(actorBlackList,mob.actor)

							BLT = nil

							mob = nil

						end

					end

				end

			else

				BLT = nil

				mob = nil

			end

		end

		Delay(1)

		if p then

			if p.Hp == 0 then

				local file = io.open(DllPath().."\\newmsg.txt", "w")

				if file then

					file:write("Player dead!")

					file:close()

				end

				if p.Lv < 20 then

					ReviveLocal()

				else

					if not Bot.ReviveSwapChannel then

						State = -2

						break

					else

						print("Character dead, gonna swap channel after revive")

						State = 19

						break

					end

				end

			end

			if p.Energy == 0 then

				print("No energy.give up gather.")

				Bot.GatherEndNoEnergy = true

				break

			end

		end

		if quest then

			local q = QuestInfo(quest.group,quest.id)

			if q.questdone then

				break

			end

		end

		AutoBuff()

		if Bot.SwapChannelAtPD then

			if not Bot.IsQuestBot then

				if Bot.SamePlayerDetectWithinShortTime then

					if ChannelMoveable() then

						print("Same Player detected: "..tostring(Bot.SamePlayer).." for more than 30 sec, swap channel")

						State = 12 

						break

					end

				end

			end

		end

		LoadBotSetting()

	end

	ClearDrawWayPoint()

	Bot.AfterGrindT = GetTime()

	if State ~= -3 and State ~= 12 then

		if p then

			SaveItemByMaid()

			if p.WeightPrc >= 100 or p.Freeslot <= 3 or p.DuraPrc <= 5 or p.Energy == 0 then

				if LastState ~= 5 then

					print("Restock Condition Matched.Now go restock")

					State = 5

				else

					State = 1

				end

			else

				State = 1

			end

		else

			State = 1

		end

	end

	ResetStuck()

end



function Fishing()

	local p = PlayerInfo()

	if not Bot.Fishx then

		Bot.Fishx,Bot.Fishy,Bot.Fishz = Pos()

	else

		local tick = GetTime()

		while not ScriptStop() do

			if GetTime() - tick >= 2000 then

				break

			end

			Tp(Bot.Fishx,Bot.Fishy,Bot.Fishz)

			Walk(0,0,0)

			Delay(10)

		end

	end

	if not Bot.FishAngle then

		Bot.FishAngle = p.Face

	else

		SetFace(Bot.FishAngle)

		setYaw(Bot.FishAngle)

	end

	Dolua("getSelfPlayer():get():sendAbductionPreventionForFishing(true)")

	local tx,ty,tz = Pos()

	local hasRod = false

	while not ScriptStop() do

		p = PlayerInfo()

		if HasGM() then State = -3 break end

		if Dist2P3D(tx,ty,tz) >= 2000 then

			print("Get Teleported. Stop Bot:"..Dist2P3D(tx,ty,tz))

			State = -3

			break

		end

		local shit = GetPlayer(tx,ty,tz,1000)

		if p.Freeslot <= 2 then

			print("Bag is about full, quit fishing")

			State = 16

			break

		end

		--if not RodEquipped() then

		if not IsFishingStance() then

			PrintBotStatus("Swap rod")

			--[[local crap = EquipRod()

			Delay(800)

			if not crap then

				PrintBotStatus("No rod found")

				print("Dont have rod in bag, bot stop")

				State = -2

				break

			else

				Bot.EquipRodSlot = crap

			end--]]

			Dolua("PaGlobalFunc_ServantIcon_ChangeLifeEquip(0)")

			Delay(800)

		else

			if not Bot.FishAngle then

				Bot.FishAngle = p.Face

			else

				SetFace(Bot.FishAngle)

				setYaw(Bot.FishAngle)

			end

			if CheckAT("FISHING_HOOK") or not CheckAT("FISHING") then

				Ainput(AT_Space)

			end

			--if Bot.FastFishing then

				if ActionName() =="FISHING_HOOK_START" or ActionName() == "FISHING_HOOK_SUCCESS" then

					DOAction("WAIT")

				end

			--end

			if CheckAT("FISHING") then

				PrintBotStatus("Fishing")

			end

			if CheckAT("Hook") then

				PrintBotStatus("Pull rod")

			end

			--[[local roddura = GetMainHandDura()

			if roddura == 0 then

				if not EquipRod() then

					print("Bag is about full, quit fishing")

					State = 16

					break

				end

			end--]]

			Out_Title("Fishing".." Freeslot:"..p.Freeslot)

		end

		LoadBotSetting()

		OnPulseShit()

		Delay(500)

	end

	DOAction("WAIT")

	Dolua("PaGlobalFunc_ServantIcon_ChangeLifeEquip(2)")

end



function GetAllPosInfo(list)

	if list then

	local code = "local list={"

for i =1,#list do

	code = code..list[i].gid..","

end

code = code.."}"

code = code..[[

local ret = "{"

local function GetRadarType(id)

	local tp = 0

	local mob = getMonsterActor(id)

	if mob then

		local grade = mob:getCharacterGradeType()

		if grade then

			return grade

		end

	end

	return tp

end

for i =1,#list do

	local radarType = GetRadarType(list[i])

	local actor = getActor(list[i])

	local face = 0

	local lv = 0

	local firstTalk = false

	if actor then

		local actorProxy = actor:get()

		if actorProxy then

			local hp = actorProxy:getHp()

			local maxhp = math.floor(actorProxy:getMaxHp())

			local key =  getNpcActor(list[i])

			local dlv = tonumber(actor:get():getCharacterStaticStatus().level)

			if dlv then lv = dlv end

			if actorProxy:getRotation() then face = actorProxy:getRotation() end

			local dead = 0

			local isdead = actor:isDead()

			if isdead then dead = 1 end

			local npcactor = getNpcActor(list[i])

			if npcactor then

				if npcactor:get():getFirstTalkable() then

					firstTalk = npcactor:get():getFirstTalkable()

				end

			end

			local mx,my,mz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

			ret = ret.."{gid="..list[i]..",firstTalk="..tostring(firstTalk)..",lv="..lv..",dead="..dead..",hp="..hp..",maxhp="..maxhp..",face="..face..",rdtype="..radarType..",mx="..mx..",my="..mz..",mz="..my.."},"

		end

	end

end

ret = ret.."}"

return ret

]]

	str = Retlua(code)

	b = load("return " .. str)

	

	local b = load("return " .. str)

	if type(b) == "function" then

		local crap = b()

		for i =1,#crap do

			for a=1,#list do

				if list[a].gid == crap[i].gid then

					table.merge(list[a],crap[i])

				end

			end

		end

	else

		for a=1,#list do

			list[i].firstTalk,list[i].lv,list[i].dead,list[i].hp,list[i].maxhp,list[i].face,list[i].rdtype = false,0,0,1,100,3.14,0

		end

	end

end

	return list

end



function vector_angle(v1, v2)

    local dot_product = v1.x * v2.x + v1.y * v2.y

    local magnitude_v1 = (v1.x^2 + v1.y^2)^0.5

    local magnitude_v2 = (v2.x^2 + v2.y^2)^0.5

    local cos_angle = dot_product / (magnitude_v1 * magnitude_v2)

    local angle = math.acos(cos_angle)

    return angle

end



function FindTg(x,y,z,r,list,tg)

	local idx,has = nil,false

	for i =1,#tg do

		for a=1,#list do

			if list[a].uid == tg[i] or list[a].name == tg[i] then

				if list[a].sign == 1 and list[a].dead == 0 then

					local toc = Dist2DCal(x,y,list[a].mx,list[a].my)

					if math.abs(list[a].mz-z) <= 300 then

						if toc <= r*100 then

							idx = i

							has = true

							break

						end

					end

				end

			end

		end

		if has then break end

	end

	if idx then

		return tg[idx]

	else

		return nil

	end

end



function GetNpc(x,y,z,r,tg)

	local list,dist,mob = ActorList(),math.huge,nil

	if list then

		for i =1,#list do

			if not table.find(Bot.NpcBL,list[i].actor) then

				if list[i].sign == 2 then

					if table.find(tg,list[i].uid) or table.find(tg,list[i].name) then

						local toc = Dist3DCal(x,y,z,list[i].mx,list[i].my,list[i].mz)

						if dist > toc then

							dist = toc

							mob = list[i]

						end

					end

				end

			end

		end

	end

	return mob

end



function GetAllMob(x,y,z,r,tg,p,onlytg)

	ResetActorBL()

	Bot.FrontMob = {}

	Bot.BackMob = {}

	Bot.MobCount = 0

	Bot.FarMob = nil

	if not p then p = PlayerInfo() end

	local mx,my,mz = Pos()

	local list = ActorList()

	local dist,count = math.huge,0

	local haspriority,hasboss = false,false

	local cent,sumx,sumy,sumz = 0,0,0,0

	local foundGM,GMTxt = false,""

	local m = nil

	local dist1,dist2,m1,m2 = math.huge,math.huge,nil,nil

	local highestz = -9999999999999999

	local character_face_vector = {

        x = math.cos(p.Face),

        y = math.sin(p.Face)

    }

	local directions = {"Õý±±", "Î÷±±", "ÕýÎ÷", "Î÷ÄÏ", "ÕýÄÏ", "¶«ÄÏ", "Õý¶«", "¶«±±"}

	local north = math.rad(-90) 

	local longdist = -1

	local aimtg = nil

	if list then

		if Bot.KS then

			if not Bot.HighestZ then

				local long = math.huge

				for i =1,#list do

					if list[i].uid == 24301 or list[i].uid == 24302 then

						if list[i].sign == 1 and list[i].dead == 0 then

							local toc = Dist2DCal(x,y,list[i].mx,list[i].my)

							if math.abs(list[i].mz-z) <= 300 then

								if toc <= r*100 then

									if long > toc then

										Bot.KSMob = list[i]

										long = toc

										Bot.HighestZ = list[i].mz

									end

								end

							end

						end

					end

				end

			end

		end

		if tg then

			if not aimtg then

				aimtg = FindTg(x,y,z,r,list,tg)

			end

		elseif #Bot.GrindMobPriority > 0 then

			if not aimtg then

				aimtg = FindTg(x,y,z,r,list,Bot.GrindMobPriority)

			end

		end

		for i =1,#list do

			if list[i].sign == 1 then

				if list[i].dead == 0 then

					if not table.find(actorBlackList,list[i].actor) then

						if not table.match(Bot.MobBL,list[i].name) and not table.find(Bot.MobBL,list[i].uid) and not table.find(summonuid,list[i].uid) then

							local toc = Dist2DCal(x,y,list[i].mx,list[i].my)

							if math.abs(list[i].mz-z) <= 200 then

								if toc <= r*100 then

									local relative_pos = {

										x = list[i].mx - mx,

										y = list[i].my - my

									}

									local rotated_pos = rotate_point(relative_pos, p.Face - north)

									local angle = math.atan(rotated_pos.y, rotated_pos.x)

									local angle_deg = math.deg(angle)

									if angle_deg < 0 then

										angle_deg = angle_deg + 360

									end

									local index = math.floor(angle_deg / 45) % 8

									list[i].dir = directions[index + 1]

									if string.match(list[i].dir,"ÄÏ") then

										table.insert(Bot.BackMob,list[i])

									else

										table.insert(Bot.FrontMob,list[i])

									end

									local top = Dist2DCal(mx,my,list[i].mx,list[i].my)

									list[i].dist = top

									if longdist < top then

										longdist = top

										Bot.FarMob = list[i]

									end

									if list[i].mz > highestz then

										highestz = list[i].mz

									end

									--local angle = math.atan(-(list[i].mx-mx), -(list[i].my-my))

									--change_obj_Position(list[i].actor,angle)

									Bot.MobCount = Bot.MobCount +1

									count = count + 1

									sumx=sumx+list[i].mx

									sumy=sumy+list[i].my

									sumz=sumz+list[i].mz

									if not tg then

										if aimtg then

											if list[i].uid == aimtg or list[i].name == aimtg then

												if dist1 > toc then

													haspriority = true

													dist1 = toc

													m1=list[i]

												end

											end

										else

											if dist > toc then

												dist = toc

												m=list[i]

											end

										end

										if not haspriority then

											if list[i].rdtype == 4 then

												if dist2 > toc then

													hasboss = true

													dist2 = toc

													m2=list[i]

												end

											end

										end

									else

										if aimtg then

											if list[i].uid == aimtg or list[i].name == aimtg then

												haspriority = true

												if dist > toc then

													dist = toc

													m=list[i]

												end

											end

										else

											if not onlytg then

												haspriority = false

												if dist > toc then

													dist = toc

													m=list[i]

												end

											end

										end

									end

								end

							end

						end

					else

						if GetTime() - drawBLT >= 3000 then

							print("Black listed entity:"..list[i].name.."/"..list[i].uid)

							drawBLCount = drawBLCount + 1

							DrawPos(list[i].mx,list[i].my,list[i].mz)

							if drawBLCount >= 5 then

								DeleteDraw()

								drawBLCount = 0

							end

							drawBLT = GetTime()

						end

					end

				end

			elseif list[i].sign == 0 then

				if list[i].name ~= Bot.MyName then

					if not table.find(Bot.PlayerWhiteList,list[i].name) then

						local has = false

						for a=1,#Bot.PDRecord do

							if Bot.PDRecord[a].name == list[i].name then

								if GetTime() - Bot.PDRecord[a].time >= Bot.SwapChannelAtPDTimer*1000 then

									Bot.SamePlayerDetectWithinShortTime = true

									Bot.SamePlayer = list[i].name

									local current_time = os.date()

									local file = io.open(DllPath().."\\newmsg.txt", "w")

									if file then

										file:write("Player detected for long time!!! Name:"..list[i].name.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..tostring(list[i].uid).." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp))

										file:close()

									end

								end

								has = true

								break

							end

						end

						if not has then

							table.insert(Bot.PDRecord,{name=list[i].name,time=GetTime()})

						end

					end

				end

			end

			if list[i].sign == 0 then

				if list[i].name ~= Bot.MyName and not table.find(ignoreGM,list[i].name) and not table.find(Bot.ignoreGM,list[i].name) then

					if string.match(list[i].name,"GM") then

						foundGM = true

						GMTxt = GMTxt..list[i].name.."/"

					end

				end

			end

		end

		if foundGM then

			if not Bot.OnGMDetectTick then

				Bot.OnGMDetectTick = GetTime()

			else

				if GetTime() - Bot.OnGMDetectTick >= 1000 then

					for i =1,#list do

						if list[i].sign == 0 then

							if list[i].name ~= Bot.MyName and not table.find(ignoreGM,list[i].name) and not table.find(Bot.ignoreGM,list[i].name) then

								if string.match(list[i].name,"GM") then

									local file = io.open("c:\\gmlog1.txt", "w")

									local current_time = os.date()

									if file then

										file:write("GM Found335511".." name:"..GMTxt.." Pos:"..list[i].mx..","..list[i].my..","..list[i].mz.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp).." Date:"..current_time.."\n")

										file:close()

									end

									file = io.open("c:\\gmlog.txt", "w")

									if file then

										file:write("GM Found335511".." name:"..list[i].name.." Type:"..list[i].sign.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp).." Date:"..current_time.."\n")

										file:close()

									end

									file = io.open(DllPath().."\\newmsg.txt", "w")

									if file then

										file:write("GM detected!!! Name:"..list[i].name.." DistToPlayer:"..Dist2P3D(list[i].mx,list[i].my,list[i].mz).." Type:"..list[i].sign.." Uid:"..list[i].uid.." Lv:"..tostring(list[i].lv).." MaxHp:"..tostring(list[i].maxhp))

										file:close()

									end

								end

							end

						end

					end

				end

			end

		end

	end

	if m1 then

		m = m1

	elseif m2 then

		m = m2

	end

	if m then

		cent = {x=sumx/count,y=sumy/count,z=sumz/count}

		m.count,m.cent,m.highestz = count,cent,highestz

	end

	return m,haspriority,hasboss

end



function RegenMpSet(p,mob)

	if p.Class == 12 then

		if HasBuff(19525) then

			if p.Mp >= 38 then

				Ainput(AT_RMB)

			else

				Ainput(AT_LMB)

			end

		else

			Ainput(AT_LMB)

		end

	elseif p.Class == 1 then

		local function HasasinRegenMp()

			if SkillCDOKByID(5710) then

				if p.Mp >= 70 then

					Ainput(AT_Shift+AT_X)

				else

					Ainput(AT_W+AT_LMB)

				end

			elseif SkillCDOK(10063) then

				QuickSlotSkillGroup(10063)

			elseif SkillCDOK(10071) then

				Ainput(AT_S+AT_F)

			else

				Ainput(AT_W+AT_LMB)

			end

		end

		if not CheckAT("BT_ARO_Skill_Ground") then

			HasasinRegenMp()

		else

			if not CheckAT("End") and not CheckAT("Att") then

				Ahold(AT_Shift+AT_RMB)

			else

				HasasinRegenMp()

			end

		end

	elseif p.Class == 29 then

		if CheckAT("_Shoot_Ing2") then

			Areset()

		elseif CheckAT("_ATTACK_") or CheckAT("BT_ARO_Skill_Att_Skill_Half") then

			if SkillGroupCDOK({8504,8503}) then

				Ainput(AT_Space)

			else

				Ainput(AT_LMB)

			end

		else

			Ainput(AT_LMB)

		end

	elseif p.Class == 33 then

		DosaRegenMp(p,mob)

	elseif p.Class == 11 then 

		if p.CombatType == 1 then

			if CheckAT("ARO") then

				if SkillCDOK(8078) then

					Ainput(AT_W+AT_F)

				else

					Ainput(AT_A+AT_LMB)

				end

			else

				LahnSwaptoAwk()

			end

		else

			Atk(mob.actor)

		end	

	elseif p.Class == 5 then

		if p.CombatType == 2 then

			if SkillGroupCDOK({9517,9516}) then

				Ainput(AT_RMB+AT_W)

			elseif SkillGroupCDOK({9582,9522}) then

				QuickSlotSkillGroup(9582)

			elseif SkillCDOK(9574) then

				Ainput(AT_RMB+AT_LMB)

			else

				Ainput(AT_A+AT_LMB)

			end

		else

			Ainput(AT_A+AT_LMB)	

		end

	elseif p.Class == 6 then	

		ScholarRegnMp(p)

	elseif p.Class == 19 then

		Ainput(AT_W+AT_LMB)

	elseif p.Class == 28 then

		if SkillCDOK(6046) then

			QuickSlotSkillGroup(6046)

		else

			WitchRegnMp()

		end

	elseif p.Class == 31 then

		WitchRegnMp()

	elseif p.Class == 26 then

		Bot.SkillDist = 350

		if SkillGroupCDOK({4586,4539}) then

			Ainput(AT_Shift+AT_Space)

		elseif SkillGroupCDOK({5059,5001}) then

			Ainput(AT_Q)

		else

			RLSwing()

		end

	elseif p.Class == 17 or p.Class == 15 or p.Class == 20 or p.Class == 12 or p.Class == 21 or p.Class == 4 then

		RLSwing()

	elseif p.Class == 9 then

		if not CheckAT("ARO") then

			Ainput(AT_W+AT_C)

		else

			if p.Mp >= 40 then

				Ainput(AT_S+AT_LMB)

			else

				Ainput(AT_A+AT_LMB)

			end

		end

	else

		Atk(mob.actor)

	end

end



function GrindComboSet(p,mob)

	if not CheckAT("RageAbsorb") then

		if p.Class == 26 then

			if p.CombatType == 1 then

				NinjaAwkCombo(p,mob)

			else

				NinjaOpCombo(p,mob)

			end

		elseif p.Class == 11 then

			if p.CombatType == 1 then

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					LahnAwkCombo(p,mob)

				end

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					LahnSuccCombo(p,mob)

				end

			end

		elseif p.Class == 1 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				HasasinAwkCombo(p,mob)

			end

		elseif p.Class == 16 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				TamerAwkCombo(p,mob)

			end

		elseif p.Class == 30 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				WoosaCombo(p,mob)

			end

		elseif p.Class == 29 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				ArcherCombo(p,mob)

			end

		elseif p.Class == 23 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				MysticAwkCombo(p,mob)

			end

		elseif p.Class == 28 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				WizardAwkCombo(p,mob)

			end

		elseif p.Class == 33 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				DosaCombo(p,mob)

			end

		elseif p.Class == 17 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				ShaiCombo(p,mob)

			end

		elseif p.Class == 0 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				WarriorSuccCombo(p,mob)

			end

		elseif p.Class == 27 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				DarkKnightAwkCombo(p,mob)

			end

		elseif p.Class == 7 then

			DrakaniaAwkCombo(p,mob)

		elseif p.Class == 6 then

			local list = {3355316,4255942,24014,4164982,3582586,3947058,1131211,285574,3582696,3184167,456247,4271381,1044727,818507,2475622,4090787,4230015,4248184,504755,519374,4267326,940609,1325737,232272,507839,92537,1564443,518527,37385,3923073,472625,34764,1500623,501544,183973,1983751,3913748,4022604,4070598,1850622,4248175,2241817,4248134,150623,1193949,4247316,77388,4246236,2571413,1021575,4239344,1188506}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				ScholarOpCombo(p,mob)

			end	

		elseif p.Class == 19 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else
				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then
				
					StrikerCombo(p,mob)

				end

			end

		elseif p.Class == 5 then

			local list = {3582586, 456247, 3582696, 3355316}

			if p.Nodeid == 0 or table.find(list,p.userid) then

				if p.CombatType == 2 then

					GuardianOpCombo(p,mob)

				elseif p.CombatType == 1 then

					GuardianAwkCombo(p,mob)

				end
			end

		elseif p.Class == 4 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					RangerAwkCombo(p,mob)

				end

			end

		elseif p.Class == 12 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then
			
					ZerkerOpCombo(p,mob)

				end

			end

		elseif p.Class == 31 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					WitchCombo(p,mob)

				local list = {3582586, 456247, 3582696, 3355316}

				elseif p.Nodeid == 0 or table.find(list,p.userid) then
				
					WitchOpCombo(p,mob)

				end

			end

		elseif p.Class == 15 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					MeaguCombo(p,mob)

				end

			end

		elseif p.Class == 9 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then
			
					NovaAwkOpCombo(p,mob)

				end

			end

		elseif p.Class == 20 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then
			
					MusaCombo(p,mob)

				end

			end

		elseif p.Class == 21 then

			if not Bot.MyName then

				Bot.MyName = GetName()

			else

				local list = {3582586, 456247, 3582696, 3355316}

				if p.Nodeid == 0 or table.find(list,p.userid) then

					MeahuaCombo(p,mob)

				else

					Atk(mob.actor)

				end

			end

		end

	end

end



function AntiCC()

	local act = ActionName()

	local list = {

"SOCIAL","TUTORIAL","DAMAGE","KNOCK","JUMP_P_D_FALL4"

}

	if table.match(list,act) then

		print("Anti CC")

		DOAction("WAIT")

	end

end



function OrcShit(p)

	if GetTime() - Bot.OrcTick >= 1000 then

		if not p then p = PlayerInfo() end

		if p.Nodeid == 374 or p.Nodeid == 344 then

			local list = ActorList()

			local mx,my,mz = Pos()

			local npc = {24890,24891,24892,40012}

			for i =1,#list do

				if list[i].sign == 2 then

					if table.find(npc,list[i].uid) then

						local top = Dist3DCal(mx,my,mz,list[i].mx,list[i].my,list[i].mz)

						if top <= 1080 then

							print("Orc talk to:"..list[i].uid.."/"..list[i].actor.."/"..list[i].name)

							obj_open(list[i].actor)

							print("Orc talk2 to:"..list[i].uid)

							break

						end

					end

				end

			end

		end

		Bot.OrcTick = GetTime()

	end

end



function rotate_point(point, angle)

    local cos_angle = math.cos(angle)

    local sin_angle = math.sin(angle)

    return {

        x = point.x * cos_angle - point.y * sin_angle,

        y = point.x * sin_angle + point.y * cos_angle

    }

end



function GetPosFromMapData(x,y,z)

	local tom,idx = 1000,1

	tom,idx = GetDistToTbMin(Bot.MapData,x,y,z)

	if tom <= 350 then

		Bot.TpFromMesh = true

		print("tom:"..tom.." idx:"..idx)

		return Bot.MapData[idx].x,Bot.MapData[idx].y,Bot.MapData[idx].z+50

	else

		Bot.TpFromMesh = false

		return nil,nil,nil

	end

end



function InsertPosFromMapData(x,y,z,r)

	Bot.MapData = {}

	for i=1,#Bot.MeshData do

		if math.abs(z-Bot.MeshData[i].z) <= 200 then

			if Dist2DCal(x,y,Bot.MeshData[i].x,Bot.MeshData[i].y) <= r*100+300 then

				table.insert(Bot.MapData,{x=Bot.MeshData[i].x,y=Bot.MeshData[i].y,z=Bot.MeshData[i].z})

			end

		end

	end

end



function PrepareGrind()

	if not Bot.StartT then 

		Bot.StartT = GetTime() 

	else 

		if not Bot.Click1 then 

			if GetTime() - Bot.StartT >= 3000 then

				BDO_mouse()

				Bot.Click1  = true

			end

		end

	end

	if Bot.UseAlchemyStone then

		TurnOnAlchemyStone()

	else

		TurnOffAlchemyStone()

	end

	if Bot.ItemCollectScrollLv and Bot.UseItemCollectScroll then

		TurnOnItemCollectScroll(Bot.ItemCollectScrollLv)

	else

		TurnOffItemCollectScroll()

	end

	if Bot.ACFlagHold then

		Areset()

	end

end



function Grind(x,y,z,r,quest,tg)

	PrepareGrind()

	InsertPosFromMapData(x,y,z,r)

	local mob,haspriority,hasboss = nil,nil,false

	local needRegenMp = false

	local checkdialogT,printT = 0,0

	local p = PlayerInfo()

	local lastactor,lasthp,hpNochangeT = nil,nil,nil

	local StartT,focusT,focusTimer = nil,0,200

	local OrginalHZ = nil

	local drawT = 0

	local couldStick,couldStickT = true,nil

	local hasother = false

	Bot.HighestZ = nil

	Bot.KSMob = nil

	while not ScriptStop() do

		if HasGM() then State = -3 print("End grind because on GM detected") break end

		local mx,my,mz = Pos()

		if Bot.EscapeAtSwim then

			if CheckAT("Swimming") then

				print("fall into water, escape")

				State = 20

				break

			end

		end

		p = PlayerInfo()

		if Bot.DbgSkill then

			ShowActionChange()

		end

		if p then

			OrcShit(p)

			if p.Hp == 0  then

				local file = io.open(DllPath().."\\newmsg.txt", "w")

				if file then

					file:write("Player dead!")

					file:close()

				end

				if p.Lv < 20 then

					ReviveLocal()

				else

					if not Bot.ReviveSwapChannel then

						State = -2

						print("End grind at character dead")

						break

					else

						print("Character dead, gonna swap channel after revive")

						State = 19

						break

					end

				end

			else

				if p.Lv < 20 then

					if p.HpPrc <= 90 then

						UseItem(517)

					end

				end

			end

			if Bot.AvoidLowHp then

				if p.HpPrc <= Bot.AvoidLowHpPrc then
					UseItem(517)				 

					if SkillCDOK(146) then

						Ainput(AT_V)

						print("End grind because emergency escape")

						break

					end

				end

			end

		end

		AntiCC()

		LootAround()

		if Bot.GrindSkipTimer then

			if StartT then

				if GetTime() - StartT >= Bot.GrindSkipTimer then

					print("End Grind spot because reach GrindSkipTimer")

					break

				end

			end

		end

		if Bot.GrindPullTimer then

			if StartT then

				if GetTime() - StartT >= Bot.GrindPullTimer then

					print("End Grind spot because reach GrindPullTimer")

					break

				end

			end

		end

		if not Bot.TempGrind then

			if Bot.SkipSpotOnMobCount then

				if mob then

					if not hasboss then

						if mob.count <= Bot.SkipSpotOnMobCount then

							print("End grind because mob count less than skipmobcount")

							break

						end

					end

				end

			end

		end

		if Bot.OverWriteGrindRange then

			r = Bot.OverWriteGrindRangeRadius

		end

		if GetTime() - checkdialogT >= 2000 then

			local d = DialogInfo()

			if d.dialogopen then

				local npcshit = {24890,24891,24892,40012}

				if not table.find(npcshit,d.talkerid) then

					ExitDialog()

				end

			end

			checkdialogT = GetTime()

		end

		if not haspriority then

			mob,haspriority,hasboss = GetAllMob(x,y,z,r,tg,p)

			if not mob then

				if not Bot.KS then

					print("End grind spot because of no mob found")

					break

				else

					if not HasMob(x,y,z,r,{24301,24302}) then

						print("End grind spot because of no tree mob found")

						break

					else

						print("waiting tree")

						Delay(100)

						actorBlackList = {}

					end

				end

			else

				if not OrginalHZ then

					OrginalHZ = mob.highestz

				end

				--print("found mob:"..tostring(mob.name).."/"..tostring(mob.uid).." haspriority:"..tostring(haspriority).." hasboss:"..tostring(hasboss).."/"..mob.actor)

			end

		else

			local mob2 = GetAllMob(x,y,z,r,tg,p)

			if mob2 then

				if mob.uid ~= mob2.uid then

					if mob2.uid == 24301 or mob2.uid == 24302 then

						local ShitT = GetTime()

						while not ScriptStop() do

							if Bot.ACFlagHold then

								Areset()

							end

							LootAround()

							if GetTime() - ShitT >= 2000 then

								print("change priority target1:"..mob.uid.." > "..mob2.uid)

								mob = mob2

								break

							else

								local mob3 = GetAllMob(x,y,z,r,{28257,27175,21505,21504,21503,21502,21501},nil,1)

								if mob3 then

									print("change priority target2:"..mob.uid.." > "..mob3.uid)

									mob = mob3

									break

								end

							end

							Delay(10)

						end

					else

						print("change priority target:"..mob.uid.." > "..mob2.uid)

						mob = mob2

					end

				end

			end

			if Bot.KS then

				if not hasother then

					if mob.uid == 24301 or mob.uid == 24302 then

						local mob2 = GetAllMob(x,y,z,r,{28257,27175,21505,21504,21503,21502,21501},p,1)

						if mob2 then

							hasother = true

						end

					end

				else

					if mob.uid == 24301 or mob.uid == 24302 then

						local mob2 = GetAllMob(x,y,z,r,{28257,27175,21505,21504,21503,21502,21501},p,1)

						if not mob2 then

							hasother = false

							print("Wait Next Wave")

							local ShitT = GetTime()

							while not ScriptStop() do

								if Bot.ACFlagHold then

									Areset()

								end

								LootAround()

								if GetTime() - ShitT >= 2500 then

									break

								end

								local minfo = TgMobInfo(mob.gid)

								table.merge(mob,minfo)

								if mob.dead ~= 0 or mob.hp == 0 then

									break

								end

								Delay(10)

							end

						end

					end

				end

			end

			local minfo = TgMobInfo(mob.gid)

			table.merge(mob,minfo)

			if mob.dead ~= 0 or mob.hp == 0 then

				mob,haspriority,hasboss = nil,false,false

			end

		end

		if mob then

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			if not Bot.SkillRushBack then

				SetFace(angle)

				setYaw(angle)

			end

			if not CheckAT("BT") then

				Ainput(AT_W+AT_LMB)

			end

			if Bot.TpPriorityMob then

				if p.Class == 26 then

					NinjaSmallTp(mob)

				elseif p.Class == 33 then

					DosaSmallTp(mob)

				end

			end

			local top = Dist2P(mob.mx,mob.my)

			if haspriority then

				Bot.SkillDist = 500

				if Bot.TpPriorityMob then

					if GetTime() - focusT >= focusTimer then

						if mob.face == nil then

							local dinfo = TgMobInfo(mob.gid)

							table.merge(mob,dinfo)

						else

							--if #Bot.BackMob == 0 and couldStick then

								mx,my,mz = Pos()

								local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

								local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

								local tpz = 0

								if top > Bot.SkillDist or math.abs(p.Face-mob.face) >= 3.13 then

									print("Tp stick priority mob:"..mob.name.."/"..mob.uid)

									local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

									if kx then

										Tp(kx,ky,kz)

									else

										Tp(nx,ny,mob.mz+Bot.TpAddtionH)

									end

									focusTimer = math.random(800,1800)

								end

							--end

						end

						focusT = GetTime()

					end

				end	

			end

			if top > Bot.SkillDist then

				WalkTo(mob.mx,mob.my,mob.mz,p)

			else

				change_MousePosition(0)

				ResetStuck()

				local userage = false

				if p.Rage >= 100 then

					userage = true

				end

				if userage and not CheckAT("RageAbsorb") then

					Ainput(AT_Z)

					print("Cast rage,if character stand still please check if you locked the Z so it stuck on using 100% rage.")

				else

					if not Bot.DontSpamQS then

						SmashQuickSlot()

					end

					if not needRegenMp then

						if not mob.face then

							local minfo = TgMobInfo(mob.gid)

							table.merge(mob,minfo)

						end

						GrindComboSet(p,mob)

						if p.MpPrc <= 20 then

							needRegenMp = true

						end

					else

						if p.MpPrc <= 60 then

							RegenMpSet(p,mob)

						else

							needRegenMp = false

						end

					end

				end

				if not StartT then StartT = GetTime() end

			end

			local mobinfostr = " ("..tostring(mob.hp).."/"..tostring(mob.maxhp)..")"

			local topl = Dist2DCal(mx,my,mob.mx,mob.my)

			local shitinfo = Stateinfo.." Atk:"..mob.name..mobinfostr.." Uid:"..mob.uid.." Dist:"..topl.." Weight:"..p.WeightPrc.."% Dura:"..p.DuraPrc.."% Slot:"..p.Freeslot.." SMaid:"..p.StorageMaid.." mobCount:"..mob.count.."/"..tostring(Bot.SkipSpotOnMobCount).." boss:"..tostring(hasboss).." priority:"..tostring(haspriority).." range:"..r

			Out_Title(shitinfo)

			if GetTime() - printT >= 5000 then

				print(shitinfo)

				printT = GetTime()

			end

			if not lastactor then

				lastactor = mob.actor

				lasthp = mob.hp

			else

				if lastactor ~= mob.actor then

					lastactor = mob.actor

					lasthp = mob.hp

					hpNochangeT = nil

				else

					if lasthp == mob.hp then

						if mob.uid ~= 24301 and mob.uid ~= 24302 then

							if not hpNochangeT then

								hpNochangeT = GetTime()

							else

								local addtionalHp = 0

								if Bot.IsQuestBot then

									addtionalHp = 20000

								end

								if GetTime() - hpNochangeT >= Bot.NoHpChangeGiveUpTimer+addtionalHp then

									print("Mob Hp doesnt drop for more than "..((Bot.NoHpChangeGiveUpTimer+addtionalHp)/1000).."sec, give up: "..mob.name.." "..mob.uid)

									if not table.find(actorBlackList,mob.actor) then

										table.insert(actorBlackList,mob.actor)

									end

									mob,haspriority,hasboss = nil,false,false

								end

							end

						end

					else

						hpNochangeT = nil

						lasthp = mob.hp

					end

				end

			end

			if mob then

				if mob.hp == 0 then

					print("mob hp is 0,give up.")

					mob,haspriority,hasboss = nil,false,false

				end

				if haspriority then

					if Dist2DCal(x,y,mob.mx,mob.my) >= (r+15)*100 then

						print("mob go too far from grind location, give it up")

						mob,haspriority,hasboss = nil,false,false

					end

				end

			end

			if Bot.SetQuickSlot0 then

				if not Bot.ResetQST then

					Bot.ResetQST = GetTime()

				else

					if GetTime() - Bot.ResetQST >= 800 then

						Dolua("quickSlot_Clear(0)")

						Bot.ResetQST,Bot.SetQuickSlot0 = nil,false

					end

				end

			end

		end

		OnPulseShit()

		if quest then

			local q = QuestInfo(quest.group,quest.id)

			if q.questdone then

				print("End grind because quest done")

				break

			end

		end

		if not Bot.IsQuestBot and not Bot.IsKnowledgeBot then

			if Bot.SwapChannelAtPD then

				if not Bot.IsQuestBot then

					if Bot.SamePlayerDetectWithinShortTime then

						if p.Nodeid ~= 0 then

							if ChannelMoveable() then

								print("Same Player detected: "..tostring(Bot.SamePlayer).." for more than "..Bot.SwapChannelAtPDTimer.." sec, swap channel")

								State = 12

								break

							else

								if Bot.GoCharSelectIfSwapCD then

									Bot.SwapCD = SwapCD()

									State = 23

									print("Swap channel is in CD, now go back wait at CharacterSelect.Will auto relog once cd up")

									break

								end

							end

						end

					end

				end

			end

			if Bot.NeedSwapChannelatMobDetected then

				if ChannelMoveable() then

					print("Swapchannel mob detected, swap channel")

					State = 12

					print("End grind because swap channel on mob detection")

					break

				end

			end

		end

		LoadBotSetting()

		Delay(60)

	end

	if CheckAT("BT_UP_Skill_Meteor_") or CheckAT("BT_UP_Skill_Meteor_B_") or CheckAT("BT_UP_Skill_Lightning_Bolt_") then

		Ainput(AT_LMB)

	end

	if Bot.ACFlagHold then

		Areset()

	end

	if Bot.DoLoot and State ~= - 3 and Bot.DoLootTp and p.Hp > 0 and State ~= 19 and State ~= 20 and State ~= 23 then

		Areset()

		local lootlist = GetLoot(x,y,z,r+3)

		if lootlist then

			if #lootlist > 0 then

				local tx,ty,tz = Pos()

				for i =1,#lootlist do

					Tp(lootlist[i].mx,lootlist[i].my,lootlist[i].mz+15)

					if IsLootable() then

						local tick,TpTick = GetTime(),0

						while not ScriptStop() do

							LootAround()

							if GetTime() - TpTick >= 200 then

								Tp(lootlist[i].mx,lootlist[i].my,lootlist[i].mz+15)

								TpTick = GetTime()

							else

								Walk(tx+500,ty-500,tz)

							end

							change_MousePosition(0)

							Ainput(AT_S)

							if GetTime() - tick >= 1500 or not IsLootable() then

								break

							end

							Delay(1)

						end

					else

						Delay(10)

					end

				end

				Tp(tx,ty,tz)

			end

		end

	end

	Bot.AfterGrindT = GetTime()

	Bot.TempGrind = false

	Bot.SkillRushBack = false

	ResetStuck()

end



function SMGrind(x,y,z,r)

	PrepareGrind()

	InsertPosFromMapData(Bot.SMCenter.x,Bot.SMCenter.y,Bot.SMCenter.z,Bot.SMCenter.r)

	local mob,haspriority,hasboss = nil,nil,false

	local needRegenMp = false

	local checkdialogT,printT = 0,0

	local p = PlayerInfo()

	local lastactor,lasthp,hpNochangeT = nil,nil,nil

	local StartT,focusT,focusTimer = nil,0,200

	local color = 0

	Path = MainPath

	CS = GetCSByPath(Path)

	local tg = nil

	local tx,ty,tz = Pos()

	local mob,haspriority,hasboss = nil,false,false

	local lastcolor,lastcolorT = nil,nil

	local trycampT = 0

	while not ScriptStop() do

		if HasGM() then State = -3 print("End grind because on GM detected") break end

		if Bot.EscapeAtSwim then

			if CheckAT("Swimming") then

				print("fall into water, escape")

				State = 20

				break

			end

		end

		local mx,my,mz = Pos()

		AntiCC()

		LootAround()

		if Bot.DbgSkill then

			ShowActionChange()

		end

		p = PlayerInfo()

		local buff = GetBuffList() 

		if HasBuff(43432,buff) then

			color = 1 --×Ï

		elseif HasBuff(43433,buff) then

			color = 2 --À¶

		elseif HasBuff(43434,buff) then

			color = 3 --ºì

		elseif HasBuff(43437,buff) then

			color = 4 --ÃëÉ±

		else

			color = 0

		end

		if not lastcolor then

			lastcolor = color

		else

			if lastcolor ~= color then

				lastcolor = color

				print("color changed")

				if GetTime() - trycampT >= 10000 then

					if Bot.HasCamp then

						local needtent = false

						if Bot.TentBuff then

							if Bot.BuyCampBuff then

								if #Bot.CampBuffBuy > 0 then

									for i =1,#Bot.CampBuffBuy do

										if not HasBuff(Bot.CampBuffBuy[i].id) then

											needtent = true

											break

										end

									end

								end

							end

							if Bot.AutoChurch then

								if #Bot.ChurchBuff > 0 then

									for i =1,#Bot.ChurchBuff do

										if not HasBuff(Bot.ChurchBuff[i].id) then

											needtent = true

											break

										end

									end

								end

							end

							if OldMoonRemainTime() > 0 or HasVillaInvite() then

								if Bot.BuyVillaBuff then

									if Bot.VillaBuffBuy.id then

										if not HasBuff(Bot.VillaBuffBuy.id) then

											print("missing villa buff")

											needtent = true

										end

									end

								end

							end

						end

						if p.DuraPrc <= 15 or needtent then

							DoCamp()

							State = 1

						end

					end

					trycampT = GetTime()

				end

			end

		end

		if color == 0 or color == 4 then

			tg = {20845,20846,20847,20841}

		else

			if color == 1 then -- ×Ï

				tg = {20845,20842,20841}

			elseif color == 2 then

				tg = {20846,20843,20841}

			elseif color == 3 then

				tg = {20847,20844,20841}

			end

			local csidx,csdist = 1,math.huge

			for i =1,#Path do

				local mob1 = GetAllMob(Path[i].x,Path[i].y,Path[i].z,Path[i].r,tg)

				if mob1 then

					local top = Dist2P(Path[i].x,Path[i].y)

					if csdist > top then

						csdist = top

						csidx = i

					end

				end

			end

			if Dist2P(Path[csidx].x,Path[csidx].y) >= 1500 then

				WalkTo(Path[csidx].x,Path[csidx].y,Path[csidx].z)

			end

		end

		local mob2,haspriority2,hasboss2 = GetAllMob(Bot.SMCenter.x,Bot.SMCenter.y,Bot.SMCenter.z,Bot.SMCenter.r,{20850},nil,1)

		if not haspriority then

			mob,haspriority,hasboss = GetAllMob(Bot.SMCenter.x,Bot.SMCenter.y,Bot.SMCenter.z,Bot.SMCenter.r,tg)

			if not mob then

				print("no mob found!")

			end

		else

			local mob3 = GetAllMob(Bot.SMCenter.x,Bot.SMCenter.y,Bot.SMCenter.z,Bot.SMCenter.r,tg)

			if mob2 then

				if mob ~= mob2 then

					mob,haspriority,hasboss = mob2,haspriority2,hasboss2

				end

			elseif mob3 then

				if mob3.uid ~= mob.uid then

					print("Swap target:"..mob.uid.." >>> "..mob3.uid)

					mob = mob3

				end

			end

			local minfo = TgMobInfo(mob.gid)

			table.merge(mob,minfo)

			print("Focus on priority mob:"..mob.name.."/"..mob.uid)

			if mob.dead ~= 0 or mob.hp == 0 then

				print("priority mob dead.")

				mob,haspriority,hasboss = nil,false,false

			end

		end

		if mob then

			local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

			if not Bot.SkillRushBack then

				SetFace(angle)

				setYaw(angle)

			end

			if not CheckAT("BT") then

				Ainput(AT_W+AT_LMB)

			end

			if Bot.TpPriorityMob then

				if p.Class == 26 then

					NinjaSmallTp(mob)

				elseif p.Class == 33 then

					DosaSmallTp(mob)

				end

			end

			local top = Dist2P(mob.mx,mob.my)

			if haspriority then

				Bot.SkillDist = 500

				if Bot.TpPriorityMob then

					if GetTime() - focusT >= focusTimer then

						if mob.face == nil then

							local dinfo = TgMobInfo(mob.gid)

							table.merge(mob,dinfo)

						else

							mx,my,mz = Pos()

							local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

							local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

							if top > Bot.SkillDist or math.abs(p.Face-mob.face) >= 3.13 or mob.uid == 20850 or mob.uid == 20845 or mob.uid == 20846 or mob.uid == 20847 then

								local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

								if kx then

									Tp(kx,ky,kz)

								else

									Tp(nx,ny,mob.mz+Bot.TpAddtionH)

								end

								focusTimer = math.random(300,800)

							end

						end

						focusT = GetTime()

					end

				end	

			end

			if top > Bot.SkillDist then

				WalkTo(mob.mx,mob.my,mob.mz,p)

			else

				change_MousePosition(0)

				ResetStuck()

				local userage = false

				if p.Rage >= 100 then

					userage = true

				end

				if userage and not CheckAT("RageAbsorb") then

					Ainput(AT_Z)

					print("Cast rage,if character stand still please check if you locked the Z so it stuck on using 100% rage.")

				else

					if not Bot.DontSpamQS then

						SmashQuickSlot()

					end

					if not needRegenMp then

						if not mob.face then

							local minfo = TgMobInfo(mob.gid)

							table.merge(mob,minfo)

						end

						GrindComboSet(p,mob)

						if p.MpPrc <= 30 then

							needRegenMp = true

						end

					else

						if p.MpPrc <= 80 then

							RegenMpSet(p,mob)

						else

							needRegenMp = false

						end

					end

				end

				if not StartT then StartT = GetTime() end

			end

			local mobinfostr = " ("..tostring(mob.hp).."/"..tostring(mob.maxhp)..")"

			local topl = Dist2DCal(mx,my,mob.mx,mob.my)

			local shitinfo = Stateinfo.." color:"..color.." Atk:"..mob.name..mobinfostr.." Uid:"..mob.uid.." Dist:"..topl.." Weight:"..p.WeightPrc.."% Dura:"..p.DuraPrc.."% Slot:"..p.Freeslot.." SMaid:"..p.StorageMaid.." mobCount:"..mob.count.."/"..tostring(Bot.SkipSpotOnMobCount).." boss:"..tostring(hasboss).." priority:"..tostring(haspriority).." range:"..r

			Out_Title(shitinfo)

			if GetTime() - printT >= 5000 then

				print(shitinfo)

				printT = GetTime()

			end

			if not lastactor then

				lastactor = mob.actor

				lasthp = mob.hp

			else

				if lastactor ~= mob.actor then

					lastactor = mob.actor

					lasthp = mob.hp

					hpNochangeT = nil

				else

					if lasthp == mob.hp then

						if mob.uid ~= 24301 then

							if not hpNochangeT then

								hpNochangeT = GetTime()

							else

								local addtionalHp = 0

								if Bot.IsQuestBot then

									addtionalHp = 20000

								end

								if GetTime() - hpNochangeT >= Bot.NoHpChangeGiveUpTimer+addtionalHp then

									print("Mob Hp doesnt drop for more than "..((Bot.NoHpChangeGiveUpTimer+addtionalHp)/1000).."sec, give up: "..mob.name.." "..mob.uid)

									if not table.find(actorBlackList,mob.actor) then

										table.insert(actorBlackList,mob.actor)

									end

									mob,haspriority,hasboss = nil,false,false

								end

							end

						end

					else

						hpNochangeT = nil

						lasthp = mob.hp

					end

				end

			end

			if mob then

				if mob.hp == 0 then

					print("mob hp is 0,give up.")

					mob,haspriority,hasboss = nil,false,false

				end

			end

			if Bot.SetQuickSlot0 then

				if not Bot.ResetQST then

					Bot.ResetQST = GetTime()

				else

					if GetTime() - Bot.ResetQST >= 800 then

						Dolua("quickSlot_Clear(0)")

						Bot.ResetQST,Bot.SetQuickSlot0 = nil,false

					end

				end

			end

		end

		OnPulseShit()

		if not Bot.IsQuestBot and not Bot.IsKnowledgeBot then

			if Bot.SwapChannelAtPD then

				if not Bot.IsQuestBot then

					if Bot.SamePlayerDetectWithinShortTime then

						if ChannelMoveable() then

							print("Same Player detected: "..tostring(Bot.SamePlayer).." for more than "..Bot.SwapChannelAtPDTimer.." sec, swap channel")

							State = 12

							print("End grind because swap channel on Player detection")

							break

						end

					end

				end

			end

			if Bot.NeedSwapChannelatMobDetected then

				if ChannelMoveable() then

					print("Swapchannel mob detected, swap channel")

					State = 12

					break

				else

					if Bot.GoCharSelectIfSwapCD then

						Bot.SwapCD = SwapCD()

						State = 23

						print("Swap channel is in CD, now go back wait at CharacterSelect.Will auto relog once cd up")

						break

					end

				end

			end

		end

		LoadBotSetting()

		Delay(60)

	end

	Bot.SkillRushBack = false

end



function SystemMsg(str)

	local code = string.format([[

chatting_sendMessage('', '%s',5,0)

]],str)

Dolua(code)

end



function NaviFromWareHouseToRestock()

	Path = Warehouse

	CS = GetCSByPath(Path)

	AS = table.GetClosestASfromT1ToT2(Warehouse,Restock)

	print("Navi to MainPath from Warehouse path,CS/AS:"..CS.."/"..AS)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	LastState = 14

	State = 1

end



function NaviFromRestockToMainPath()

	Path = Restock

	CS = GetCSByPath(Path)

	NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

	AS = table.GetClosestASfromT1ToT2(Restock,MainPath)

	print("Navi to MainPath by restock path,CS/AS:"..CS.."/"..AS)

	DrawNewPos(Path[AS].x,Path[AS].y,Path[AS].z)

	LastState = 15

	State = 1

end



function NaviToMainPath2()

	Path=MainPath

	CS = GetCSByPath(Path)

	AS = #Path

	DrawNewPos(Path[CS].x,Path[CS].y,Path[CS].z)

	if Dist2P3D(Path[CS].x,Path[CS].y,Path[CS].z) >= 1000 then

		State = 3

	else

		State = 1

	end

	LastState = 4

	print("Navi to MainPath,CS/AS:"..CS.."/"..AS)

end



function ComparePath()

	if table.GetDistToTable(MainPath) >= 1500 then

		local pathsum = {MainPath}

		if table.GetDistToTable(MainPath) >= 2000 then

			if #Restock > 0 then table.insert(pathsum,Restock) end

			if #Warehouse > 0 then table.insert(pathsum,Warehouse) end

			Path = GetCloestPathFromTb2(pathsum)

			if Path == MainPath then

				NaviToMainPath2()

			elseif Path == Restock then

				NaviFromRestockToMainPath()

			elseif Path == Warehouse then

				NaviFromWareHouseToRestock()

			end

		else

			NaviToMainPath2()

		end

	else

		NaviToMainPath2()

	end

end



function CheeckCondition()

	if LastState ~= 23 then

		local tick = GetTime()

		while not ScriptStop() do

			if GetTime() - tick >= 500 then

				break

			else

				RoundWindow()

				BDO_mouse()

			end

		end

		AutoRegisteWatchDog()

		local p=PlayerInfo()

		Path = {}

		CS,AS,Dir = nil,nil,nil

		if not Bot.IsFishingBot then

			if Bot.ScrollId and Bot.ScrollQuest and Bot.ScrollTgName and Bot.ScrollPos and Bot.ScrollTgWaitInfo then

				State = 8

			else

				if HaveCamp() then

					Bot.HasCamp = true

				else

					Bot.HasCamp = false

				end

				if p.WeightPrc < 95 and p.Freeslot > 2 and p.DuraPrc > 15 then

					ComparePath()

				else

					if not Bot.DontRestock then

						if #Restock > 0 then

							local pathsum = {MainPath}

							table.insert(pathsum,Restock)

							Path = GetCloestPathFromTb2(pathsum)

							if Path == Restock then

								State = 6

							else

								NaviToMainPath2()

							end

						else

							ComparePath()

						end

					else

						ComparePath()

					end

				end

			end

			if Bot.FarmHF then

				if not p.IsInHF then

					State = 13

				end

			end

		else

			if Bot.Fishx then

				NavTo(Bot.Fishx,Bot.Fishy,Bot.Fishz)

			end

			State = 18

		end

	else

		State = 12

		LastState = -1

	end

end



function GrindLocal()

	local x,y,z = Pos()

	while not ScriptStop() do

		if HaveCamp() then Bot.HasCamp = true else Bot.HasCamp = false end	

		Grind(x,y,z,15)

		OnPulseShit()

		local p = PlayerInfo()

		if Bot.HasCamp then

			local needtent = false

			if Bot.TentBuff then

				if Bot.BuyCampBuff then

					if #Bot.CampBuffBuy > 0 then

						for i =1,#Bot.CampBuffBuy do

							if not HasBuff(Bot.CampBuffBuy[i].id) then

								print("missing camp buff")

								needtent = true

								break

							end

						end

					end

				end

				if Bot.AutoChurch then

					if #Bot.ChurchBuff > 0 then

						for i =1,#Bot.ChurchBuff do

							if not HasBuff(Bot.ChurchBuff[i].id) then

								print("missing church buff")

								needtent = true

								break

							end

						end

					end

				end

				if OldMoonRemainTime() > 0 or HasVillaInvite() then

					if Bot.BuyVillaBuff then

						if Bot.VillaBuffBuy.id then

							if not HasBuff(Bot.VillaBuffBuy.id) then

								print("missing villa buff")

								needtent = true

							end

						end

					end

				end

			end

			print("Gear DuraPrc:"..p.DuraPrc.."%")

			if p.DuraPrc <= 15 or needtent then

				DoCamp()

			end

		end

		Walk2(x,y,z,1000,2)

	end

end



function GenerateBat()

	local file = io.open(DllPath().."\\temp.bat", "w")

	if file then

		local content = string.format([[

		@echo off

	start "" ]])

		content=content..'"'..DllPath()..string.format([[\\recorder.exe"

exit

]])

		file:write(content)

		file:close()

	end

end



function GenerateGMtxt()

	local file = io.open(DllPath().."\\gmstatus.txt", "w")

	if file then

		local content = "gmfound"

		file:write(content)

		file:close()

	end

end



function GrindBot()

	local StartT = nil

	local characterTick = nil

	local logT = 0

	local lastUi = nil

	local LoginClick,PassInput,ServerSelect,CharacterSelect = false,false,false,false

	local WaitMsgBox = false

	local tick = 0

	Bot.tp = false

	Bot.TpNavi = false

	Bot.BackAtk = false

	Bot.pathInterval = 0

	LoadBotSetting()

	GenerateBat()

	while not ScriptStop() do

		if not StartT then

			if GetTime() - logT >= 10000 then

				if ActorList() then

					print("Already in game")

					Bot.SeasonT = GetTime()

					StartT = true

				end

				local Ui = UiInfo()

				if Ui then

					if not Ui.msgboxshow then

						if Ui.loginshow then

							if not Ui.passshow then

								Dolua("HandleEventLUp_Login_All_LoginStart()")

							else

								if Bot.Password then

									InputPassWord(Bot.Password)

								end

							end

						end

						if Ui.servershow then

							Dolua("HandleEventLUp_ServerSelect_All_EnterLastJoinedServer()")

						end

						if Ui.characterselectshow then

							Delay(2000)

							Dolua("HandleEventLUp_CharacterSelect_All_PrepareEnterToField(0)")

							WaitLoading()

							--WaitLoadScreen()

							--Delay(2000)

							StartT = true

						end

					end

				end

				logT = GetTime()

			else

				if GetTime() - tick >= 1000 then

					local Ui = UiInfo()

					if Ui then

						if not Ui.msgboxshow then

							logT = GetTime() - 20000

							Delay(200)

						end

					end

					tick = GetTime()

				end

			end

		else

			LoadBotSetting()

			if not botstartT then

				if Bot.GrindEndTimer then

					print("Grind Task will run for:"..Bot.GrindEndTimer.."mins")

				end

				botstartT = GetTime()

			end

			if State ~= 1 then Bot.LastCS,Bot.LastTop = nil,nil end

			if not Bot.StartT then Bot.StartT = GetTime() end

			if State == - 1 then

				CheeckCondition()

			elseif State == -2 or State == -4 then

				local tick = GetTime()

				while not ScriptStop() do

					if GetTime() - tick >= 310000 then

						break

					end

					TurnOffItemCollectScroll()

					Delay(100)

				end

				break

			elseif State == -5 then

				break

			elseif State == -3 then

				GenerateGMtxt()

				print("GM Found! Stop bot")

				LoadSound("\\Date\\1.wav")

				CallBlackSprite()

				PrintGM()

				break

			elseif State == 1 then

				PathFinder()

			elseif State == 2 then

				if LastState ~= 5 then

					LastState = 2

				end

				if Bot.IsGatherBot then

					Gather(Bot.tx,Bot.ty,Bot.tz,Bot.tr)

				elseif Bot.SM then

					SMGrind(Bot.tx,Bot.ty,Bot.tz,Bot.tr)

				else

					Grind(Bot.tx,Bot.ty,Bot.tz,Bot.tr)

					local p = PlayerInfo()

					if State ~= -3 and State ~= 12 and State ~= 23 and State ~= 20 and State ~= 19 then

						if p then

							if Bot.GrindEndTimer then

								if not Bot.GrinderNeedEnd then

									if GetTime() - botstartT >= Bot.GrindEndTimer*60*1000 then

										print("Grind time enough,now go back restock and end grind task.")

										Bot.GrinderNeedEnd = true

									end

								end

							end

							SaveItemByMaid()

							if Bot.HasCamp then

								local needtent = false

								if Bot.TentBuff then

									if Bot.BuyCampBuff then

										if #Bot.CampBuffBuy > 0 then

											for i =1,#Bot.CampBuffBuy do

												if not HasBuff(Bot.CampBuffBuy[i].id) then

													print("missing camp buff")

													needtent = true

													break

												end

											end

										end

									end

									if Bot.AutoChurch then

										if #Bot.ChurchBuff > 0 then

											for i =1,#Bot.ChurchBuff do

												if not HasBuff(Bot.ChurchBuff[i].id) then

													print("missing church buff")

													needtent = true

													break

												end

											end

										end

									end

									if OldMoonRemainTime() > 0 or HasVillaInvite() then

										if Bot.BuyVillaBuff then

											if Bot.VillaBuffBuy.id then

												if not HasBuff(Bot.VillaBuffBuy.id) then

													print("missing villa buff")

													needtent = true

												end

											end

										end

									end

								end

								print("Gear DuraPrc:"..p.DuraPrc.."%")

								if p.DuraPrc <= 15 or needtent then

									DoCamp()

									State = 1

								else

									if #Restock > 0 then

										if not Bot.DontRestock then

											if p.WeightPrc >= 95 or p.Freeslot <= 3 or Bot.GrinderNeedEnd then

												if LastState ~= 5 then

													print("Restock Condition Matched.Now go restock")

													State = 5

												else

													State = 1

												end

											else

												State = 1

											end

										else

											State = 1

										end

									else

										State = 1

									end

								end

							else

								if #Restock > 0 then

									if not Bot.DontRestock then

										if p.WeightPrc >= 118 or p.Freeslot <= 3 or p.DuraPrc <= 13 or Bot.GrinderNeedEnd then

											if LastState ~= 5 then

												print("Restock Condition Matched.Now go restock")

												State = 5

											else

												State = 1

											end

										else

											State = 1

										end

									else

										State = 1

									end

								else

									State = 1

								end

							end

						else

							State = 1

						end

					end

				end

				PrintBotStatus("Pathing")

				PathStartT = GetTime()

			elseif State == 3 then

				PrintBotStatus("Navigating")

				NavTo(Path[CS].x,Path[CS].y,Path[CS].z)

			elseif State == 5 then

				FindCloserWayInMainPath()

			elseif State == 6 then

				PrintBotStatus("Navi to restock")

				NaviToRestock()

			elseif State == 7 then

				PrintBotStatus("Navi to Warehouse")

				NaviToWarehouse()

			elseif State == 8 then

				NaviToScroll()

			elseif State == 10 then

				FarmScroll(Bot.ScrollQuest,Bot.ScrollId,Bot.ScrollPos,Bot.ScrollTgName,Bot.ScrollTgWaitInfo)

			elseif State == 11 then

				PrintBotStatus("Navi to Camp")

				NaviToCamp()

			elseif State == 12 then

				DoSwapChannel()

			elseif State == 13 then

				EnterHF()

				State = -1

			elseif State == 14 then

				NaviToMainPathByRestock()

			elseif State == 15 then

				NaviToMainPath()

			elseif State == 16 then

				NaviToNearRepair()

			elseif State == 17 then

				NaviToNearTrader()

			elseif State == 18 then

				Fishing()

			elseif State == 19 then

				WaitRevive()

			elseif State == 20 then	

				WaitEscape()

			elseif State == 21 then

				ArenaSuicid()

			elseif State == 23 then

				WaitAtCharacterSelect()

			elseif State == 0 then

				Areset()

				if LastState == 6 or LastState == 16 then

					print("Begin Sell")

					Sell(Bot.SellList,Bot.Npc)

					Bot.RestockDone = true

					if LastState ~= 16 then

						if #Warehouse > 0 then

							State = 7

						else

							if not Bot.GrinderNeedEnd and not Bot.GatherEndNoEnergy then

								State = -1

							else

								Bot.GrinderNeedEnd = false

								Bot.GatherEndNoEnergy = false

								print("Task End at enough time")

								State = -4

							end

						end

					else

						State = 17

					end

				elseif LastState == 7 then

					print("Begin Warehouse")

					SaveStorage(Bot.SaveList,Bot.Npc)

					Bot.RestockDone = true

					if not Bot.GatherEndNoEnergy then

						if not Bot.GrinderNeedEnd then

							State = -1

						else

							Bot.GrinderNeedEnd = false

							print("Grind Task End at enough time")

							State = -4

						end

					else

						Bot.GatherEndNoEnergy = false

						print("Gather Task End at no energy")

						State = -4

					end

				elseif LastState == 5 then

					State = 6

				elseif LastState == 8 then

					State = 10

				elseif LastState == 9 then

					State = -1

				elseif LastState == 11 then

					DoCamp()

					State = -1

				elseif LastState == 14 then

					State = 14

				elseif LastState == 15 then

					State = 15

				elseif LastState == 17 then

					SellTrader(Bot.Npc)

				elseif LastState == 18 then

					NaviToMainPath2()

				end

			end

			OnPulseShit()

			if GetTime() - untentT >= 5000 then

				--UnSetCamp()

				collectgarbage("collect")

				untentT = GetTime()

			end

			if Bot.GrindEndTimer then

				if not Bot.GrinderNeedEnd then

					if GetTime() - botstartT >= Bot.GrindEndTimer*60*1000 then

						print("Grind time enough,now go back restock and end grind task.")

						Bot.GrinderNeedEnd = true

					end

				end

			end

			if HasGM() then State = -3 end

			Stateinfo = "S/L:"..tostring(State).."/"..tostring(LastState).."  CS/AS/Dir:"..tostring(CS).."/"..tostring(AS).."/"..tostring(Dir)..PDinfo

			if GetTime() - printT >= 5000 then

				print(Stateinfo)

				printT = GetTime()

			end

			Out_Title(Stateinfo)

			Delay(1)

		end

	end

	SystemMsg("Bot stop")

	Out_Title("Script Stop")

	AtStopBot()

	refreshYaw()

	Areset()

end



function AtStopBot()

	Dolua("CloseBotSetting() CloseLootTracker() CloseDebug() unregisterEvent('FromClient_LuaTimer_UpdatePerFrame', 'SaveLootLog') SaveLootLog() ")

end



function OnPulseShit()

	AutoMiniMize()

	SaveItemByMaid()

	SaveMPByMaid()

	--AutoFeedWorker()

	AutoFeedPet()

	ResetActorBL()

	AutoBuff()

	AutoTurnOnFairy()

	AutoSaveNewBie()

	AutoDeleteItem()

	AutoPutLightStone()

end



function LoadBotSetting()

	if GetTime() - loadsetTick >= 1000 then

		local json = JSON:new()

		local file = io.open(DllPath().."\\settings.json", "r")

		local crap = nil

		if file then

			local content = file:read("*a")

			file:close()

			crap = json:decode(content)

		end

		if type(crap) == "table" then

			table.merge(Bot,crap)

		end

		file = io.open(DllPath().."\\MapData.json", "r")

		crap = nil

		if file then

			local content = file:read("*a")

			file:close()

			crap = json:decode(content)

		end

		if type(crap) == "table" then

			table.merge(Bot.MeshData,crap)

		end

		loadsetTick = GetTime()

	end

end



function SkillCDOK(skillgroup)

	local code = string.format([[

local aimid = nil

local remainTime = 99999

local self = PaGlobal_SkillGroup

local hasabs = false

local skillGroup = self._skillGroupList[%i]

local max = skillGroup._maxLevel

for i=1,max do

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

	if skillKey then

		local skillNo = skillKey:getSkillNo()

		local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

		local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

		if learnedSkillLevel >= 1 then

			aimid = skillNo

		end

	end

end

if aimid then

	local skillKey = selfPlayerNextSkillConsoleSkillKey(aimid)

	remainTime = getSkillCooltime(skillKey)

end

return remainTime

]],skillgroup)

local str = tonumber(Retlua(code))

if str == 0 then

	return true

else

	return false

end

end



function SkillCDInfo(skillgroup)

	local code = string.format([[

local aimid = false

local remainTime = 99999

local self = PaGlobal_SkillGroup

local hasabs = false

local skillGroup = self._skillGroupList[%i]

local max = skillGroup._maxLevel

for i=1,max do

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

	if skillKey then

		local skillNo = skillKey:getSkillNo()

		local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

		local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

		if learnedSkillLevel >= 1 then

			aimid = skillNo

		end

	end

end

if aimid then

	local skillKey = selfPlayerNextSkillConsoleSkillKey(aimid)

	remainTime = getSkillCooltime(skillKey)

end

local ret = "{time="..remainTime..",learned="..tostring(aimid).."}"

return ret

]],skillgroup)

	local str = Retlua(code)

	local b = load("return " .. str)

	local list = b()

	return list

end



function SkillGroupCDOK(skillgroup)

local code = "local ret = nil local list={"

for i =1,#skillgroup do

	code = code..skillgroup[i]..","

end

code = code.."}"

code = code..string.format([[

for i =1,#list do

	local aimid = nil

	local remainTime = 99999

	local self = PaGlobal_SkillGroup

	local hasabs = false

	local shit = list[i]

	local skillGroup = self._skillGroupList[shit]

	local max = skillGroup._maxLevel

	for i=1,max do

		local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

		if skillKey then

			local skillNo = skillKey:getSkillNo()

			local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

			local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

			if learnedSkillLevel >= 1 then

				aimid = skillNo

			end

		end

	end

	if aimid then

		local skillKey = selfPlayerNextSkillConsoleSkillKey(aimid)

		remainTime = getSkillCooltime(skillKey)

		if remainTime == 0 then

			ret = shit

			return ret

		else

			break

		end

	end

end

return ret

]])

	local str = tonumber(Retlua(code))

	if str then

		return str

	else

		return nil

	end

end

function musa_kano(skillgroup)

    local code = "local ret = nil local list={"

    for i = 1, #skillgroup do
        code = code .. skillgroup[i] .. ","
    end

    code = code .. "}"

    code = code .. string.format([[

    for i = 1, #list do
        local aimid = nil
        local self = PaGlobal_SkillGroup
        local shit = list[i]
        local skillGroup = self._skillGroupList[shit]
        local max = skillGroup._maxLevel

        for i = 1, max do
            local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key, i)
            if skillKey then
                local skillNo = skillKey:getSkillNo()
                local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)
                local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

                if learnedSkillLevel >= 1 then
                    aimid = skillNo
                    break
                end
            end
        end

        if aimid then
            local skillKey = selfPlayerNextSkillConsoleSkillKey(aimid)
            ret = shit
            return ret
        end
    end

    return ret

    ]])

    local str = tonumber(Retlua(code))

    if str then
        return str
    else
        return nil
    end
end




function Ninja_TargetChaseCDOK()

	return SkillCDOK(4542)

end



function Ninja_GhostStepCDOK()

	return SkillCDOK(4507)

end



function QuickSlotSkill(id)

	local code = string.format([[

HandleEventLUp_SkillGroup_StartDrag(%i) HandleClicked_NewQuickSlot_Use(0)

DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

quickSlot_UseSlot(0)

]],id)

	Dolua(code)

	Bot.SetQuickSlot0 = true

end



function QuickSlotSkillGroup(group,doincd)

	if not doincd then doincd = 0 end

	local code = string.format([[

local group = %i

local incd = %i

local aimid = nil

local remainTime = 99999

local self = PaGlobal_SkillGroup

local skillGroup = self._skillGroupList[group]

local max = skillGroup._maxLevel

for i=1,max do

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

	if skillKey then

		local skillNo = skillKey:getSkillNo()

		local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

		local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

		if learnedSkillLevel == 1 then

			aimid = skillNo

		end

	end

end

local skillKey = selfPlayerNextSkillConsoleSkillKey(aimid)

remainTime = getSkillCooltime(skillKey)	

if remainTime == 0 then

	HandleEventLUp_SkillGroup_StartDrag(aimid) HandleClicked_NewQuickSlot_Use(0)

	DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

	quickSlot_UseSlot(0)

else

	if incd ~= 0 then

		HandleEventLUp_SkillGroup_StartDrag(aimid) HandleClicked_NewQuickSlot_Use(0)

		DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

		quickSlot_UseSlot(0)

	end

end

]],group,doincd)

	Dolua(code)

	Bot.SetQuickSlot0 = true

end



function Ninja_TargetChase()

	local code = string.format([[

local aimid = nil

local self = PaGlobal_SkillGroup

local hasabs = false

local skillGroup = self._skillGroupList[4542]

for i=1,3 do

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

	if skillKey then

		local skillNo = skillKey:getSkillNo()

		local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

		local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

		if learnedSkillLevel == 1 then

			aimid = skillNo

		end

	end

end

local quickSlotInfo = getQuickSlotItem(17)

if quickSlotInfo then

	if quickSlotInfo._type == 2 then

		if quickSlotInfo._skillKey:getSkillNo() == aimid then

			local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

			if remainTime == 0 then

				quickSlot_UseSlot(17)

			end

		else

			HandleEventLUp_SkillGroup_StartDrag(aimid) HandleClicked_NewQuickSlot_Use(17) DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

		end

	else

		HandleEventLUp_SkillGroup_StartDrag(aimid) HandleClicked_NewQuickSlot_Use(17) DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

	end

else

	HandleEventLUp_SkillGroup_StartDrag(aimid) HandleClicked_NewQuickSlot_Use(17) DragManager:clearInfo() PaGlobal_SkillGroup_QuickSlot:prepareClose()

end

]])

Dolua(code)

end



function Ninja_NinjaStep()

	local code = string.format([[

local aimid = nil

local self = PaGlobal_SkillGroup

local hasabs = false

local skillGroup = self._skillGroupList[5004]

for i=1,3 do

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(skillGroup._key,i)

	if skillKey then

		local skillNo = skillKey:getSkillNo()

		local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

		local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

		if learnedSkillLevel == 1 then

			aimid = skillNo

		end

	end

end

local quickSlotInfo = getQuickSlotItem(19)

if quickSlotInfo then

	if quickSlotInfo._type == 2 then

		if quickSlotInfo._skillKey:getSkillNo() == aimid then

			local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

			if remainTime == 0 then

				quickSlot_UseSlot(19)

			end

		else

			HandleEventLUp_SkillGroup_StartDrag(aimid) SkillGroupQuickSlot_DropHandler(19)

		end

	else

		HandleEventLUp_SkillGroup_StartDrag(aimid) SkillGroupQuickSlot_DropHandler(19)

	end

else

	HandleEventLUp_SkillGroup_StartDrag(aimid) SkillGroupQuickSlot_DropHandler(19)

end

]])

Dolua(code)

end



function NinjaDemoPath(p,x,y,z)

	local buff = GetBuffList()

	if p then

		if p.MpPrc <= 50 then

			if SkillGroupCDOK({4586,4539}) then

				Ainput(AT_Space+AT_Shift)

			end

		end

		if not Bot.needRegenSp then

			if p.Sp <= 600 then

				Bot.needRegenSp = true

			end

		else

			if p.Sp >= 1200 then

				Bot.needRegenSp = false

			end

		end

	end

	if CheckAT("JUMP_Fast_DASH_A") or CheckAT("JUMP_F_DASH_A") or CheckAT("BT_JUMP_F_A") then

		if p.Sp >= 300 then

			Ainput(AT_Space+AT_W)

		end

	elseif CheckAT("DOUBLEJUMP") then

		if p.Sp >= 150 then

			Ainput(AT_F+AT_W)

		end

		Bot.ComboT1 = GetTime()

	else

		if CheckAT("RUN") or CheckAT("SPRINT") then

			if GetTime() - Bot.ComboT1 >= 3000 then

				if not HasBuff(22530) then

					Ainput(AT_W+AT_Space)

				end

				Bot.ComboT1 = GetTime()

			end

		end

	end

	if not HasBuff(4822,buff) then

		if Ninja_TargetChaseCDOK() then

			Ninja_TargetChase()

		end

	else

		if not CheckAT("BT_Skill_SPRINT") then

			Ahold2(AT_Shift,800)

		end

	end

	if  Dist2P(x,y) >= 500 then

		if SkillCDOK(5004) then

			if not CheckAT("JUMP") then

				Ainput(AT_W+AT_RMB)

			end

		elseif SkillCDOK(4507) then

			if not Bot.needRegenSp then

				if p.Sp >= 600 then

					Ainput(AT_W+AT_F)

				end

			end

		end

	end

end



function TPForward()

local x,y,z = Pos()

Delay(2000)

local x1,y1,z1 = Pos()

FaceTp(0.5,10,x,y,z+10000,x1,y1,z1+10000)

end



function WitchPath(p,x,y,z)

	if CheckAT("BT_ARO_Skill_Teleport") then

		if SkillCDOK(5555) then

			Ainput(AT_Space+AT_Shift)

		end

	else

		if SkillCDOK(5529) then

			QuickSlotSkillGroup(5529)

		end

		if not CheckAT("BT") then

			Ainput(AT_LMB)

		else

			--[[if not CheckAT("BT_UP_ROLL_WF") then

				if GetTime() - Bot.ComboT1 >= 600 then

					KeyPress(187,20)

					Bot.ComboT1 = GetTime()

				end

			else

				if CheckAT("_End") then

					if GetTime() - Bot.ComboT1 >= 600 then

						KeyPress(187,20)

						Bot.ComboT1 = GetTime()

					end

				end

			end--]]

		end

	end

	if CheckAT("_Meteor") then

		Ainput(AT_LMB)

	end

end



function ZerkerPath(p,x,y,z)

	if CheckAT("AggroShout") then

		Ainput(AT_LMB)

	end

	if CheckAT("BT_UP_Skill_Prey_1_Att") or CheckAT("BT_UP_Skill_Prey_2_Att") or CheckAT("BT_UP_Skill_Prey_3_Att") then

		if p.Mp >= 15 then

			Ainput(AT_S+AT_F)

		end

	end

	if not CheckAT("SpirintDash") then

		if CheckAT("RUN") then

			if not CheckAT("BT") then

				Ainput(AT_LMB)

			end

			if SkillCDOK(2004) or SkillCDOK(2111) then

				if p.Mp >= 30 then

					Ainput(AT_Space+AT_Shift)

				else

					if SkillCDOK(2052) then

						if p.Mp >= 23 then

							Ainput(AT_S+AT_F)

						else

							if p.Sp >= 400 then

								Ainput(AT_W+AT_F)

							end

						end

					elseif SkillCDOK(2093) then

						if p.Mp >= 20 then

							Ainput(AT_Shift+AT_F)

						else

							if p.Sp >= 400 then

								Ainput(AT_W+AT_F)

							end

						end

					else

						if p.Sp >= 400 then

							if p.Mp >= 25 then

								Ainput(AT_W+AT_F)

							end

						end

					end

				end

			else

				if SkillCDOK(2052) then

					if p.Mp >= 23 then

						Ainput(AT_S+AT_F)

					else

						if p.Sp >= 400 then

							Ainput(AT_W+AT_F)

						end

					end

				elseif SkillCDOK(2093) then

					if p.Mp >= 20 then

						Ainput(AT_Shift+AT_F)

					else

						if p.Sp >= 400 then

							Ainput(AT_W+AT_F)

						end

					end

				else

					if p.Sp >= 400 then

						Ainput(AT_W+AT_F+AT_Shift)

					end

				end

			end

		else

			if CheckAT("_DashAttack_") then

				if not CheckAT("_Attack_R") then

					Ainput(AT_W+AT_F)

				else

					if SkillCDOK(2052) then

						if p.Mp >= 23 then

							Ainput(AT_S+AT_F)

						end

					end

				end

			elseif CheckAT("BT_Beast_skill_DashAttack") then

				if SkillCDOK(2052) then

					if p.Mp >= 23 then

						Ainput(AT_S+AT_F)

					end

				end

			elseif CheckAT("CrossAttack") or CheckAT("_Prey") then

				Ainput(AT_W+AT_F)

			elseif CheckAT("Beast_End") then

				if p.Sp >= 400 then

					Ainput(AT_W+AT_F)

				end

			end

		end

		Bot.StuffT = nil

	else

		local mx,my,mz = Pos()

		local nx = mx - 200 * math.cos(-(p.Face+4.71))

		local ny = my - 200 * math.sin(-(p.Face+4.71))

		local crap = GetAllMob(nx,ny,mz,2.5,nil,p)

		if crap then

			if not Bot.StuffT then

				Bot.StuffT = GetTime()

			else

				if GetTime() - Bot.StuffT >= 500 then

					Ainput(AT_LMB)

				end

			end

		else

			Bot.StuffT = nil

		end

		if CheckAT("BT_skill_SpirintDash_Ing2_3") or CheckAT("BT_UP_skill_SpirintDash2") then

			if SkillCDOK(2052) then

				if p.Mp >= 23 then

					Ainput(AT_S+AT_F)

				end

			end

		end

	end

end



function NovaPath(p,x,y,z)

	local function SkillDash()

		if p.Mp >= 40 then

			if SkillCDOK(10580) then

				Ainput(AT_Shift)

			end

		end

	end

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	end

	if p.Sp >= 350 then

		if CheckAT("BT_ARO_Skill_Avoid_F_") then

			if not CheckAT("Stab") then

				Ainput(AT_LMB)

			else

				SkillDash()

			end

		else

			SkillDash()

		end

	end

end



function MeaguPath(p,x,y,z)

	if not CheckAT("BT") then

		if CheckAT("RUN") then

			Ainput(AT_LMB)

		end

	else

		if p.Sp >= 350 then

			if CheckAT("BT_Skill_FoxDash_Dash_A") or CheckAT("BT_Skill_FoxDash_Dash_B") then

				Ainput(AT_F)

			elseif CheckAT("BT_UP_Skill_FoxTale_Att") or CheckAT("BT_UP_Skill_FoxTale_End") then

				if SkillCDOK(13037) then

					Ainput(AT_F+AT_W)

				else

					Ainput(AT_W+AT_Shift)

				end

			elseif CheckAT("BT_Skill_Avoid_F") then

				if SkillCDOK(13037) then

					Ainput(AT_F+AT_W)

				else

					Ainput(AT_Shift)

				end

			else

				--[[if SkillGroupCDOK({13050,13006}) then

					Ainput(AT_Q)

				else

					Ainput(AT_Shift)

				end--]]

				Ainput(AT_Shift)

			end

		end

	end

end



function MusaPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	else

		if SkillCDOK(3132) then

			if p.Mp >= 35 then

				Ainput(AT_C+AT_W)

			end

		end

		if p.Mp >= 15 and p.Sp >= 50 then

			if not CheckAT("DASH") then

				Ainput(AT_RMB+AT_W)

			else

				Ainput(AT_RMB+AT_W)

			end

		else

			if SkillGroupCDOK({3102,3014}) then

				Ainput(AT_Shift+AT_E)

			end

		end

	end

end



function MeahuaPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	else

		if p.Mp >= 15 and p.Sp >= 50 then

			Ainput(AT_RMB+AT_W)

		end

	end

end



function RangerAwkPath(p,mob)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	else

		if CheckAT("BT_ARO_Skill_Evade") then

			if SkillCDOK(1588) then

				Ainput(AT_LMB)

			elseif SkillCDOK(1589) then

				Ainput(AT_W+AT_F)

			else

				if p.Sp >= 400 then

					Ainput(AT_RMB)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Dash") then

			if not CheckAT("_Spin") then

				Ainput(AT_W+AT_F)

			else

				if p.Sp >= 400 then

					Ainput(AT_RMB)

				end

			end

		else

			if p.Sp >= 400 then

				Ainput(AT_RMB)

			end

		end

	end

end



function StrikerPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	else

		if not CheckAT("ARO") then

			Ainput(AT_W+AT_C)

		else

			if CheckAT("RUN") then

				if SkillCDOK(7006) then

					Ainput(AT_Shift)

				elseif SkillCDOK(7060) then

					Ainput(AT_W+AT_RMB)

				elseif SkillCDOK(7054) then

					Ainput(AT_Shift+AT_LMB)

				end

			elseif CheckAT("BT_ARO_Skill_Evade_F") then

				if not CheckAT("_End") then

					Ainput(AT_Shift)

				else

					if p.Sp >= 300 then

						if SkillCDOK(7060) then

							Ainput(AT_W+AT_RMB)

						elseif SkillCDOK(7054) then

							Ainput(AT_Shift+AT_LMB)

						end

					end

				end

			elseif CheckAT("BT_ARO_Skill_Snuggle_F") then

				if CheckAT("_End") then

					if SkillCDOK(7006) then

						Ainput(AT_Shift)

					elseif SkillCDOK(7054) then

						Ainput(AT_Shift+AT_LMB)

					end

				end

			elseif CheckAT("BT_ARO_Skill_HitRepeatedly_Dash_Att") then

				if SkillCDOK(7006) then

					Ainput(AT_Shift)

				elseif SkillCDOK(7060) then

					

					Ainput(AT_W+AT_RMB)

				end

			end

		end

	end

end



function GuardianAwkPath(p,x,y,z)

	if CheckAT("ARO") then

		if CheckAT("RUN") or CheckAT("SPRINT") then

			if SkillCDOK(9560) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(9552) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(9568) then

				Ainput(AT_W+AT_C)

			end

		elseif CheckAT("BT_ARO_Push") then

			if CheckAT("_End") then

				if SkillCDOK(9552) then

					Ainput(AT_W+AT_Shift)

				elseif SkillCDOK(9521) then

					Ainput(AT_Space)

				end

			end

		elseif CheckAT("BT_ARO_Skill_Avoid_F") or CheckAT("BT_ARO_SLIDING") then

			if SkillCDOK(9560) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(9552) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(9521) then

				Ainput(AT_Space)

			end

		elseif CheckAT("JUMP") then

			if SkillCDOK(9521) then

				Ainput(AT_RMB)

			end

		end

	else

		if CheckAT("BT_Skill_Throw_Dash") then

			if SkillCDOK(9552) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(9521) then

				Ainput(AT_Space)

			end

		elseif CheckAT("BT_Skill_Combo_B") then

			if SkillCDOK(9560) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(9552) then

				Ainput(AT_W+AT_Shift)

			end

		elseif CheckAT("JUMP") then

			if SkillCDOK(9521) then

				Ainput(AT_RMB)

			end

		else

			if SkillCDOK(9560) then

				Ainput(AT_W+AT_F)

			end

		end

	end

end



function GuardianPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	end

	if CheckAT("RUN") or CheckAT("SPRINT") then

		if SkillCDOK(9536) then

			Ainput(AT_W+AT_F)

		elseif SkillCDOK(9521) then

			Ainput(AT_Space)

		elseif SkillGroupCDOK({9561,9562}) then

			Ainput(AT_W+AT_Q)

		elseif SkillCDOK(9535) then

			Ainput(AT_W+AT_Shift)

		elseif SkillCDOK(9584) then

			Ainput(AT_W+AT_C)

		end

	elseif CheckAT("BT_Skill_Dash_In") then

		if CheckAT("_End") then

			if SkillCDOK(9585) then

				Ainput(AT_C)

			elseif SkillCDOK(9584) then

				Ainput(AT_W+AT_LMB)

			elseif SkillCDOK(9521) then

				Ainput(AT_W+AT_Space)

			elseif SkillCDOK(9535) then

				Ainput(AT_W+AT_Shift)

			end

		end

	elseif CheckAT("BT_Skill_Ground_JumpAtt") then

		if CheckAT("_End") then

			if SkillCDOK(9585) then

				Ainput(AT_S+AT_C)

			elseif SkillCDOK(9521) then

				Ainput(AT_W+AT_Space)

			elseif SkillCDOK(9535) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(9584) then

				Ainput(AT_W+AT_C)

			end

		end

	elseif CheckAT("BT_UP_SLIDING") or CheckAT("BT_Skill_Throw_Dash") then

		if SkillCDOK(9536) then

			Ainput(AT_W+AT_F)

		elseif SkillCDOK(9535) then

			Ainput(AT_W+AT_Shift)

		end

	elseif CheckAT("JUMP") then

		if SkillCDOK(9521) then

			Ainput(AT_RMB)

		end

	end

end



function DosaPath(p,x,y,z)

	local function SmaillCD(p,x,y,z)

		if SkillCDOK(14144) then

			if p.Sp >= 250 then

				Ainput(AT_Space+AT_Shift)

			end

		elseif SkillGroupCDOK({14120,14119}) then

			if p.Sp >= 100 then

				Ainput(AT_W+AT_F)

			end

		elseif SkillCDOK(14141) then

			if p.Sp >= 250 then

				Ainput(AT_W+AT_Shift)

			end

		end

	end

	if CheckAT("BT_Skill_Combo_C_") then

		if SkillCDOK(14134) then

			Ainput(AT_RMB)

		elseif SkillCDOK(14168) then

			Ainput(AT_Space)

		end

	elseif CheckAT("BT_Skill_H_Flow") then

		SmaillCD(p,x,y,z)

	elseif CheckAT("BT_Skill_Avoid_F") then

		if not CheckAT("Flow") then

			if p.Sp >= 100 then

				Ainput(AT_LMB)

			end

		else

			if SkillCDOK(14168) then

				Ainput(AT_Space)

			else

				SmaillCD(p,x,y,z)

			end

		end

	elseif CheckAT("BT_Skill_Fog_Dash_") then

		if CheckAT("_End") then

			SmaillCD(p,x,y,z)

		end

	else

		SmaillCD(p,x,y,z)

	end

end



function MySticAwkPath(p,x,y,z)

	local function SmallDash(p,x,y,z)

		if p.Sp >= 200 then

			if SkillCDOK(7556) then

				Ainput(AT_W+AT_RMB)

			elseif SkillCDOK(7558) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(7507) then

				Ainput(AT_W+AT_Shift)

			end

		end

	end

	if not CheckAT("ARO") and not CheckAT("Aro") then

		Ainput(AT_C+AT_W)

	else

		if CheckAT("BT_ARO_Skill_Evade_F_") then

			if p.Sp >= 200 then

				if not CheckAT("Re2") then

					Ainput(AT_Shift+AT_W)

				else

					Ainput(AT_LMB)

				end

			end

		elseif CheckAT("BT_ARO_NORMAL_DASH_ATT") or CheckAT("BT_ARO_Skill_Drill_Kick") then

			SmallDash(p,x,y,z)

		else

			SmallDash(p,x,y,z)

		end

	end

end



function ShaiPath(p,x,y,z)

	if CheckAT("BT_Skill_Rider") then

		if not CheckAT("F_End") then

			if p.Sp/p.MaxSp*100 >= 50 then

				Ainput(AT_F)

			end

		else

			Ainput(AT_W+AT_Shift)

		end

	elseif CheckAT("BT_Skill_Dash_F_") then

		Ainput(AT_LMB)

	elseif CheckAT("BT_SPRINT_ATTACK") then

		Ainput(AT_W+AT_Shift)

	else

		if SkillCDOK(9043) then

			Ainput(AT_W+AT_RMB)

		elseif SkillCDOK(9017) then

			Ainput(AT_W+AT_Shift)

		end

	end

end



function ScholarPath(p,x,y,z)

	if CheckAT("BT_Skill_G_") then

		if not CheckAT("_End") and not CheckAT("_Att") then

			Ainput(AT_LMB)

		end

	end

	local function ScholarMovement()

		if SkillGroupCDOK({14027,14026}) then

			if p.Sp >= 400 then

				Ainput(AT_W+AT_RMB)

			end

		elseif SkillGroupCDOK({14011,14010}) then

			if p.Sp >= 400 then

				Ainput(AT_W+AT_F)

			end

		elseif SkillCDOKByID(8208) then

			if p.Sp >= 400 then

				Ainput(AT_Shift+AT_X)

			end

		elseif SkillCDOK(14068) then

			if p.Sp >= 400 then

				if AwkDura() > 0 then

					Ainput(AT_Shift+AT_Q)

				end

			end

		elseif SkillCDOK(14074) then

			if p.Mp >= 70 then

				Ainput(AT_W+AT_C)

			end

		end

	end

	if CheckAT("BT_ARO_Skill_Dash_Jump_") or CheckAT("BT_ARO_Skill_F_Jump") or CheckAT("BT_ARO_Skill_Dash_Jump") or CheckAT("BT_Skill_Cancle_Main") or CheckAT("BT_Fusion_Skill_H_") or CheckAT("BT_Skill_F_01_Throw_L_Flow") then

		if SkillCDOK(14059) then

			Ainput(AT_C)

		else

			ScholarMovement()

		end

	elseif CheckAT("BT_Skill_N_") or CheckAT("BT_Skill_Combo_F_") then

		if SkillCDOK(14059) then

			Ainput(AT_C)

		else

			ScholarMovement()

		end

	else

		ScholarMovement()

	end

end



function LahnSuccPath(p,x,y,z)

	local function Real()

		if not HasBuff(12033) then

			if p.Mp >= 150 then

				Ainput(AT_Q)

			else

				if p.Mp >= 50 then

					if SkillCDOKByID(3325) then

						Ainput(AT_Shift+AT_X)

					end

				end

				if SkillGroupCDOK({8041,8039}) then

					Ainput(AT_W+AT_RMB)

				elseif SkillCDOK(8100) then

					Ainput(AT_W+AT_F)

				elseif SkillCDOK(8032) then

					Ainput(AT_Shift+AT_Space)

				else

					Ainput(AT_W+AT_RMB)

				end

			end

		else

			if p.Mp >= 50 then

				if SkillCDOKByID(3325) then

					Ainput(AT_Shift+AT_X)

				end

			end

			if SkillGroupCDOK({8041,8039}) then

				Ainput(AT_W+AT_RMB)

			elseif SkillCDOK(8100) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(8032) then

				Ainput(AT_Shift+AT_Space)

			else

				Ainput(AT_W+AT_RMB)

			end

		end

	end

	if CheckAT("BT_UP_Skill_SpinAttack") then

		if not CheckAT("Cool") then

			Ainput(AT_W+AT_F)

		else

			Real()

		end

	elseif CheckAT("BT_UP_Skill_Airwalk_Slice") then

		if CheckAT("Slice_Slicet_Att") then

			Ainput(AT_W+AT_RMB)

		end

	elseif CheckAT("BT_Skill_Airwalk") then

		if SkillCDOK(8033) then

			Ahold(AT_Shift)

		else

			if CheckAT("Lv") and CheckAT("Ing") then

				if not Bot.ComboCountT1 then

					Bot.ComboCountT1 = GetTime()

				else

					if GetTime() - Bot.ComboCountT1 >= 1000 then

						if SkillGroupCDOK({8059,8057}) then

							Ainput(AT_F)

						end

					end

				end

			else

				Bot.ComboCountT1 = nil

			end

		end

	elseif CheckAT("BT_UP_Skill_Att_Slicet") then

		if CheckAT("Slicet_2") or CheckAT("End") then

			Real()

		else

			Ainput(AT_W+AT_RMB)

		end

	else

		Real()

	end

end



function LahnAwkPath(p,x,y,z)

	if CheckAT("BT_Aro_Skill_Dash_") then

		if not CheckAT("_UP") then

			Ainput(AT_W+AT_Shift)

		else

			if SkillCDOK(8078) then

				Ainput(AT_W+AT_F)

			elseif SkillCDOK(8032) then

				Ainput(AT_Shift+AT_Space)

			end

		end

	elseif CheckAT("BT_ARO_Skill_Whirl") then

		if SkillCDOK(8088) then

			Ainput(AT_W+AT_Shift)

		elseif SkillCDOK(8032) then

			Ainput(AT_Shift+AT_Space)

		end

	elseif CheckAT("BT_Aro_Skill_Airwalk") then

		if CheckAT("End") then

			if SkillCDOK(8033) then

				Ainput(AT_Shift+AT_Space)

			else

				Ainput(AT_RMB)

			end

		elseif CheckAT("_Att") then

			if SkillCDOK(8088) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(8078) then

				Ainput(AT_W+AT_F)

			end

		else

			if SkillCDOK(8033) then

				Ainput(AT_Shift+AT_Space)

			end

		end

	else

		if SkillCDOK(8088) then

			Ainput(AT_W+AT_Shift)

		elseif SkillCDOK(8078) then

			Ainput(AT_W+AT_F)

		elseif SkillCDOK(8032) then

			Ainput(AT_Shift+AT_Space)

		end

	end

end



function DarkKnightPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_LMB)

	else

		if p.Sp >= 500 then

			if not CheckAT("ARO") then

				if SkillGroupCDOK({6559,6501}) then

					Ainput(AT_W+AT_F)

				else

					if SkillCDOK(6534) then

						Ainput(AT_W+AT_RMB)

					else

						Ainput(AT_W+AT_C)

					end

				end

			else

				if CheckAT("BT_ARO_Skill_Speed_Dash") then

					if not CheckAT("Ing_1") and not CheckAT("End_1") then

						Ainput(AT_W+AT_F)

					else

						if SkillCDOK(6534) then

							Ainput(AT_W+AT_RMB)

						end

					end

				elseif CheckAT("BT_ARO_Skill_Dash_") then

					if SkillCDOK(6542) then

						Ainput(AT_W+AT_F)

					end

				else

					if SkillCDOK(6542) then

						Ainput(AT_W+AT_F)

					elseif SkillCDOK(6534) then

						Ainput(AT_W+AT_RMB)

					end

				end

			end

		end

	end

end



function HasasinAwkPath(p,x,y,z)

	if CheckAT("BT_ARO_Skill_FastHide") then

		if SkillCDOK(10047) then

			Ainput(AT_LMB)

		else

			Ainput(AT_W+AT_F)

		end

	elseif CheckAT("BT_Skill_SpinKick_Att") then

		if SkillCDOK(10011) then

			Ainput(AT_W+AT_RMB)

		else

			QuickSlotSkillGroup(10074,1)

		end

	else

		if SkillCDOK(10058) then

			Ainput(AT_Shift+AT_W)

		else

			QuickSlotSkillGroup(10074,1)

		end

	end

end



function WoosaPath(p,x,y,z)

	if CheckAT("BT_Skill_Air_Walk_Dash") then

		if not CheckAT("Cool") then

			if SkillGroupCDOK({13578,13577}) then

				Ainput(AT_W+AT_F)

			end

		else

			if SkillGroupCDOK({13540,13538}) then

				Ainput(AT_Shift+AT_Space)

			else

				Ainput(AT_W+AT_Shift)

			end

		end

	elseif CheckAT("BT_Skill_Air_Walk_") then

		if CheckAT("End") then

			Ainput(AT_W+AT_Shift)

		end

	elseif CheckAT("BT_Skill_Dash_Attack_") then

		Ainput(AT_W+AT_Shift)

	else

		if SkillGroupCDOK({13540,13538}) then

			Ainput(AT_Shift+AT_Space)

		elseif SkillCDOK(13564) then

			Ainput(AT_W+AT_Shift)

		elseif SkillGroupCDOK({13578,13577}) then

			Ainput(AT_W+AT_F)

		end

	end

end



function ArcherPath(p,x,y,z)

	if p.Sp >= 250 then

		if CheckAT("SLIDING_F") or CheckAT("Gildong") then

			Ainput(AT_Space)

		elseif CheckAT("_Dagger") then

			if CheckAT("Att_") then

				Ainput(AT_LMB)

			else

				if SkillCDOK(8590) then

					Ainput(AT_W+AT_F)

				else

					Ainput(AT_Space)

				end

			end

		else

			if SkillCDOK(8508) then

				Ainput(AT_W+AT_Shift)

			elseif SkillCDOK(8590) then

				Ainput(AT_W+AT_F)

			end

		end

	end

end



function WarriorPath(p,x,y,z)

	if CheckAT("BT_skill_ThrustKick") then

		if not CheckAT("SP3_Move") then

			Ainput(AT_W+AT_F)

		else

			if SkillGroupCDOK({631,511}) then

				Ainput(AT_W+AT_RMB)

			elseif SkillGroupCDOK({633,528}) then

				Ainput(AT_Shift+AT_Q)

			else

				if p.Sp >= 700 then

					Ainput(AT_W+AT_LMB)

				end

			end

		end

	elseif CheckAT("BT_skill_ShieldDash") then

		if not CheckAT("_Re") then

			Ainput(AT_W+AT_RMB)

		else

			if SkillGroupCDOK({622,549}) then

				Ainput(AT_W+AT_F)

			elseif SkillGroupCDOK({633,528}) then

				Ainput(AT_Shift+AT_Q)

			else

				if p.Sp >= 700 then

					Ainput(AT_W+AT_LMB)

				end

			end

		end

	elseif CheckAT("BT_skill_MaddeningRush") then

		if CheckAT("_Att2_K") then

			if SkillGroupCDOK({622,549}) then

				Ainput(AT_W+AT_F)

			elseif SkillGroupCDOK({631,511}) then

				Ainput(AT_W+AT_RMB)

			else

				if p.Sp >= 700 then

					Ainput(AT_W+AT_LMB)

				end

			end

		end

	else

		if SkillGroupCDOK({622,549}) then

			Ainput(AT_W+AT_F)

		elseif SkillGroupCDOK({631,511}) then

			Ainput(AT_W+AT_RMB)

		elseif SkillGroupCDOK({633,528}) then

			Ainput(AT_Shift+AT_Q)

		else

			if p.Sp >= 700 then

				Ainput(AT_W+AT_LMB)

			end

		end

	end

end



function TamerPath(p,x,y,z)

	local function TamerMovement()

		if SkillCDOK(2570) then

			Ainput(AT_Shift+AT_Space)

		elseif SkillCDOK(2561) then

			Ainput(AT_W+AT_F)

		elseif SkillCDOK(2567) then

			Ainput(AT_S+AT_E)

		elseif SkillCDOK(2558) then

			Ainput(AT_S+AT_F)

		end

	end

	if not CheckAT("BT_ARO_Skill_Jump") then

		TamerMovement()

	end

end



function DrakaniaAwkPath(p,x,y,z)

	if not CheckAT("BT") then

		Ainput(AT_W+AT_C)

	elseif not CheckAT("ARO") and not CheckAT("Aro") then

		Ainput(AT_W+AT_C)

	else

		if p.Sp >= 300 then

			if not CheckAT("BT_Aro_Skill_Avoid_Dash_F_") then

				if SkillCDOK(12578) then

					Ainput(AT_W+AT_F)

				elseif SkillCDOK(12574) then

					Ainput(AT_W+AT_E)

				elseif SkillCDOK(12555) then

					Ainput(AT_W+AT_Shift)

				elseif SkillCDOK(12582) then

					Ainput(AT_W+AT_Shift+AT_Space)

				end

			else

				Ainput(AT_F+AT_W+AT_Space+AT_Shift)

			end

		end

	end

end



function NinjaTpShit(mob)

local tpact = {

"BT_Skill_Jump_GroundCrash_",

"BT_Skill_Fusion_TKnifeThrow",

"BT_Skill_Fusion_Ankle_Tie",

"BT_Skill_Fusion_UpperSwing"

}

	if not Bot.CombatTp1 then

		local act = ActionName()

		local mx,my,mz = Pos()

		for i =1,#tpact do

			if string.match(act,tpact[i]) then

				Bot.CombatCurAct = tpact[i]

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

				Bot.CombatTp1 = true

			end

		end

	else

		if not string.match(ActionName(),Bot.CombatCurAct) then

			Bot.CombatTp1 = false

		else

			if Bot.CombatCurAct == "BT_Skill_Fusion_TKnifeThrow" or Bot.CombatCurAct == "BT_Skill_Fusion_Ankle_Tie" then

				local mx,my,mz = Pos()

				local nx = mob.mx + 50 * math.cos(-(mob.face+4.71))

				local ny = mob.my + 50 * math.sin(-(mob.face+4.71))

				local kx,ky,kz = GetPosFromMapData(nx,ny,mob.mz)

				if kx then

					Tp(kx,ky,kz)

				else

					Tp(nx,ny,mob.mz+Bot.TpAddtionH)

				end

			end

		end

	end

end



function FarmScroll(quest,itemID,Posdata,nametb,tgwaitinfo)

	local mobshowT,mobatktimer = nil,nil

	local NoMobT = nil

	local needRegenMp = false

	local RTick = 0

	while not ScriptStop() do

		if HasGM() then State = -3 break end

		local p = PlayerInfo()

		local mx,my,mz = Pos()

		local myact = ActionName()

		local q = QuestInfo(quest.group,quest.id)

		local d = DialogInfo()

		if CheckAT("SOCIAL") or CheckAT("TUTORIAL") or CheckAT("DAMAGE") or CheckAT("KNOCK") or CheckAT("JUMP_P_D_FALL4") then

			DOAction("WAIT")

		end

		if Dist2P(Posdata.x,Posdata.y) > 2500 then

			NavTo(Posdata.x,Posdata.y,Posdata.z)

		else

			if p.DuraPrc <= 60 then

				if HaveCamp() then

					Tp(Posdata.x,Posdata.y,Posdata.z)

					DOAction("WAIT")

					DoCamp()

				end

			end

			SaveItemByMaid()

			if not q.hasquest then

				local needswapchannel = false

				if Bot.SwapChannelAtPD then

					if not Bot.IsQuestBot then

						if Bot.SamePlayerDetectWithinShortTime then

							if ChannelMoveable() then

								needswapchannel = true

							end

						end

					end

				end

				if not needswapchannel then

					NoMobT = nil

					if d.dialogopen then

						ExitDialog()

					else

						if Dist2P(Posdata.x,Posdata.y) > 2000 then

							WalkTo(Posdata.x,Posdata.y,Posdata.z)

						else

							Walk(0,0,0)

							if Bot.ACFlagHold then

								Areset()

							end

							Tp(Posdata.x,Posdata.y,Posdata.z)

							if not string.match(myact,"SUMMON") then

								if CheckAT("WAIT") then

									Out_Title("Begin summon boss")

									local list = GetBagListId()

									if not table.find(list,itemID) then

										local has = CombineScroll()

										if not has then

											break

										end

										Delay(200)

									else

										UseItem(itemID)

										Delay(500)

									end

								else

									DOAction("WAIT")

									Delay(500)

								end

							end

						end

					end

				else

					print("Same Player detected for more than 30 sec, swap channel")

					State = 12 

					break

				end

			else

				if Bot.ACFlagHold then

					Areset()

				end

				if not q.questdone then

					local moblist = EntityList(Posdata.x,Posdata.y,Posdata.z,30,1,nametb)

					if moblist then

						NoMobT = nil

						local mob = GetCSMobFromList(moblist)

						if mob then

							if not mobatktimer then

								if tgwaitinfo then

									local has = false

									for i=1,#tgwaitinfo do

										if mob.uid == tgwaitinfo[i].name or mob.name == tgwaitinfo[i].name then

											has = true

											mobatktimer = tgwaitinfo[i].time

											break

										end

									end

									if not has then mobatktimer = 3500 end

								else

									mobatktimer = 5000

								end

							else

								if not mobshowT then

									mobshowT = GetTime()

								else

									if GetTime() - mobshowT >= mobatktimer then

										local angle = math.atan(-(mob.mx-mx), -(mob.my-my))

										SetFace(angle)

										setYaw(angle)

										if Dist2P(mob.mx,mob.my) > 450 then

											WalkTo(mob.mx,mob.my,mob.mz+200)

										else

											SmashQuickSlot()

											if not needRegenMp then

												GrindComboSet(p,mob)

												if p.MpPrc <= 15 then

													needRegenMp = true

												end

											else

												if p.MpPrc <= 70 then

													if Bot.ACFlagHold then

														Areset()

													end

													RegenMpSet(p,mob)

												else

													needRegenMp = false

												end

											end

										end

									else

										local tleft = (mobatktimer-(GetTime() - mobshowT))/1000

										tleft = tleft-tleft%0.01

										Out_Title("Found target:"..mob.name.." gonna atk in:"..tleft.." sec")

									end

								end

							end

						else

							mobshowT,mobatktimer = nil,nil

						end

					else

						mobshowT,mobatktimer = nil,nil

						if not NoMobT then

							NoMobT = GetTime()

						else

							local tleft = (60000-(GetTime() - NoMobT))/1000

							tleft = tleft-tleft%0.01

							Out_Title("Waiting target:"..tleft)

							if GetTime() - NoMobT >= 60000 then

								Out_Title("Quest Failed,give up quest")

								GiveUpQuest(quest.group,quest.id)

								Delay(500)

								NoMobT = nil

							end

						end

					end

				else

					Out_Title("Getting reward")

					NoMobT = nil

					if not d.dialogopen then

						CallBlackSprite()

					else

						if GetTime() - RTick >= 3000 then

							PressR()

							RTick = GetTime()

						end

					end

				end

			end

		end

		OnPulseShit()

		LoadBotSetting()

		Delay(5)

	end

	if State ~= 12 then

		State = -5

	end

end

local feedworkerT = 0

local feedPetT = GetTime()

local FeedWorkerTimer = 30*60*1000

local FeedPetTimer = 30*60*1000

local FeedWaterTeaT = 0

local MaidSaveT = 0

local MaidSaveMpT = 0

local setFairyT = 0

local saveNewbieT = 0

local PutLightStoneT = 0

local Craped = false

local PressRT = 0



function BuyFromShop(itemid,amount)

	if not amount then amount = 1 end

local code = string.format([[

local id,amount = %i,%i

local count = npcShop_getBuyCount()

for i=0,count-1 do

	local shopItemWrapper = npcShop_getItemBuy(i)

    local shopItemPrice = shopItemWrapper:get():getItemPriceWithOption()

	local shopItem = shopItemWrapper:get()

	local itemid = shopItemWrapper:getStaticStatus():getItemKey()

	local stackable = shopItemWrapper:getStaticStatus():isStackable()

    local itemName = shopItemWrapper:getStaticStatus():getName()

	if itemid == id then

		npcShop_doBuy(i, amount, CppEnums.ItemWhereType.eMoneyInventory, 0, PaGlobal_NPCShop_ALL._value._isCamping)

		break

	end

end

]],itemid,amount)

	Dolua(code)

end



function AutoPutLightStone()

	if Bot.SaveArtific then

	if GetTime() - PutLightStoneT >= 2500 then

	local code = [[

local curcount = ToClient_GetArtifactBagSize()

local maxcount = ToClient_getArtifactInventorySlotCountMax()

if curcount < maxcount then

	local actorProxy = getSelfPlayer():get()

	local invenSize= actorProxy:getInventoryByType(1):size()

	invenSize = invenSize-1

	local has = false

	local unsort = false

	for i =2,invenSize do

		local item =getInventoryItem(i)

		if item then

			local extra = item:getStaticStatus()

			local equipslot = extra:getEquipSlotNo()

			if equipslot == 32 then

				has = true

				if not unsort then

					HandleLUp_AutoSortFunctionPanel_SetCategoryView(0,false)

					ToClient_SetIsUseSort(0,false) local crap = PaGlobal_InvenAutoSort if crap then crap:syncUI(0) crap:updateSlot(0) end

					unsort = true

				end

				if i <= 63 then

					PaGlobalFunc_LightStoneBag_Open()

					HandleEventRUp_Inventory_All_RUpEvent(i-2)

				else

					DragManager:setDragInfo(Panel_Window_Inventory_All, 0, i, "Icon/" .. item:getStaticStatus():getIconPath(), PaGlobalFunc_Inventory_All_GroundClick, getSelfPlayer():getActorKey())

					HandleEventLUp_Inventory_All_LUpEvent(0)

				end

			end

		end

	end

	if has then PaGlobalFunc_Inventory_All_Close() end

end

]]

	Dolua(code)

	PutLightStoneT = GetTime()

end

end

end



function ShowQuestInfo()

	local code = [[

function HandleEventLUp_Quest_All_ShowDetailInfo(questGroupId, questId, questCondition_Chk, groupIdx, nextChk, isCleared, uiIdx)

	msg("group:"..questGroupId.." id:"..questId)

  local isProgressingActive = false

  if PaGlobal_Quest_All._TABTYPE.PROGRESS == PaGlobal_Quest_All._currentTab then

    isProgressingActive = true

  end

  local questListInfo, questGroupInfo, isGroup, groupTitle

  local isNext = false

  local groupCount

  if 0 == nextChk then

    isNext = true

  end

  questListInfo = ToClient_GetQuestList()

  if PaGlobal_Quest_All._TABTYPE.PROGRESS == PaGlobal_Quest_All._currentTab then

    questGroupInfo = questListInfo:getQuestGroupAt(groupIdx)

    isGroup = questGroupInfo:isGroupQuest()

    groupTitle = "nil"

    groupCount = nil

    if isGroup then

      groupCount = questGroupInfo:getTotalQuestCount()

    end

  elseif PaGlobal_Quest_All._TABTYPE.RECOMMEND == PaGlobal_Quest_All._currentTab then

    questGroupInfo = questListInfo:getRecommendationQuestGroupAt(groupIdx)

    isGroup = false

    groupTitle = "nil"

    groupCount = nil

  elseif PaGlobal_Quest_All._TABTYPE.REPEAT == PaGlobal_Quest_All._currentTab then

    questGroupInfo = questListInfo:getRepetitionQuestGroupAt(groupIdx)

    isGroup = false

    groupTitle = "nil"

    groupCount = nil

  elseif PaGlobal_Quest_All._TABTYPE.NEW == PaGlobal_Quest_All._currentTab then

    questGroupInfo = questListInfo:getNewQuestGroupAt(groupIdx)

    isGroup = false

    groupTitle = "nil"

    groupCount = nil

  else

    questGroupInfo = questListInfo:getMainQuestGroupAt(groupIdx)

    isGroup = false

    groupTitle = "nil"

    groupCount = nil

  end

  if true == isGroup then

    groupTitle = questGroupInfo:getTitle()

  end

  PaGlobalFunc_QuestInfo_All_Detail(questGroupId, questId, questCondition_Chk, groupTitle, groupCount, false, not isProgressingActive, isNext, isCleared, nil, uiIdx)

end

]]

Dolua(code)

end



function SkipSequence()

	local code = [[

function SpeedPlay()

	ToClient_SetSequencePlaybackSpeedMode(true, 1000)

end

function SpeedSequence()

	if Panel_SequenceSkip then

		Panel_SequenceSkip:RegisterUpdateFunc("SpeedPlay")

	end

end

--Panel_SequenceSkip:RegisterUpdateFunc("SpeedPlay")

registerEvent("FromClient_PlaySequence", "SpeedSequence")

]]

Dolua(code)

end



function GoBackSelectCharacterScreen()

	Dolua("PaGlobal_GameExit_All_GoToCharacterSelectXXX()")

end



function AutoGear()

	local code = [[

local autoGearT = 0

function AutoGear()

	if GetTime() - autoGearT >= 3000 then

		local actorProxy = getSelfPlayer():get()

		if actorProxy then

			if isDoingAction("WAIT") or isDoingAction("BT_WAIT") then

				local invenSize= actorProxy:getInventoryByType(1):size()

				invenSize = invenSize-1

				local Slot = {0,1,3,4,5,6,7,8,9,10,11,12,29}

				local swapped = false

				for i =2,invenSize do

					local item =getInventoryItem(i)

					if item then

						local extra = item:getStaticStatus()

						local isequip = extra:isEquipable()

						local name = extra:getName()

						if isequip then

							local dp = extra:getDefence()

							local ap = extra:getMaxDamage()

							local equipslot = extra:getEquipSlotNo()

							for a=1,#Slot do

								if Slot[a] == equipslot then

									local EquipInfo = ToClient_getEquipmentItem(Slot[a])

									local EquipInfo2 = nil

									if equipslot == 8 then

										EquipInfo2 = ToClient_getEquipmentItem(9)

									elseif equipslot == 10 then

										EquipInfo2 = ToClient_getEquipmentItem(11)

									end

									if EquipInfo then

										local EquipProxy = EquipInfo:getStaticStatus()

										local EquipProxy2 = EquipInfo:get()

										local Dura = EquipProxy2:getEndurance()

										if EquipProxy and Dura > 0 then

											local EquipDp = EquipProxy:getDefence()

											local EquipAp = EquipProxy:getMaxDamage()

											if not table.find({7,8,9,10,11,12},equipslot) then

												if EquipDp < dp or EquipAp < ap then

													swapped = true

													inventoryUseItem(0,i, nil, true)

												end

											else

												if EquipAp < ap then

													swapped = true

													inventoryUseItem(0,i, nil, true)

												end

											end

										end

										if not swapped then

											if equipslot == 8 or equipslot == 10 then

												if not EquipInfo2 then

													inventoryUseItem(0,i, nil, true)

												end

											end

										end

									else

										inventoryUseItem(0,i, nil, true)

									end

								end

							end

						end

					end

				end

			end

		end

		autoGearT = GetTime()

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "AutoGear")

]]

Dolua(code)

end



function EscapeShow()

	local code = [[

if Panel_Widget_EscapeBar_All:GetShow() then

	return 1

else

	return 2

end

]]

	local str = tonumber(Retlua(code))

	if  str == 1 then

		return true

	else

		return false

	end

end



function IsInBA()

	local code = [[

if ToClient_IsJoinPvpBattleGround() then

	return 1

else

	return 2

end

]]

	local str = tonumber(Retlua(code))

	if  str == 1 then

		return true

	else

		return false

	end

end



function ReloadUI()

	Dolua("ToClient_excuteReloadUI()")

end



function Escape()

	Dolua("callRescue()")

end



function WaitLoadScreen()

	local tick,isload,uinfo,loaddoneT,checkT = nil,false,"",nil,0

	while not ScriptStop() do

		if GetTime() - checkT >= 1000 then

			if IsWindow() then

				if not tick then

					tick = GetTime()

				else

					if GetTime() - tick >= 2000 then

						uinfo = ""

						--uinfo = tostring(Retlua("return tostring(ToClient_isLoadingProcessor())"))

						local code = [[

local shit = false

if Common_FadeOut then

	if Common_FadeOut:GetShow() then

		shit = true

	end

end

if not shit and not ToClient_isLoadingProcessor() then

	return tostring(false)

else

	return tostring(true)

end

]]

uinfo = tostring(Retlua(code))

						print(uinfo)

						tick = GetTime()

					end

				end

				if not isload then

					if uinfo == "true" then

						print("¿ªÊ¼¶ÁÍ¼")

						isload = true

					end

				else

					if uinfo == "false" then

						if not loaddoneT then

							loaddoneT = GetTime()

						else

							if GetTime() - loaddoneT >= 2000 then

								local u = tostring(Retlua("return tostring(isLuaLoadingComplete)"))

								if u == "true" then

									print("¶ÁÍ¼½áÊø")

									break

								else

									loaddoneT = nil

								end

							end

						end

					else

						loaddoneT = nil

					end

				end

			else

				tick = nil

				print("Î´ÏìÓ¦")

			end

			checkT = GetTime()

		end

		Delay(500)

	end

end



function OldMoonRemainTime()

	local code = [[

local player = getSelfPlayer():get()

if player then

	local UI_BUFFTYPE = CppEnums.UserChargeType

	if UI_BUFFTYPE then

		local bookOfCombatTime = player:getUserChargeTime(UI_BUFFTYPE.eUserChargeType_BookOfCombat)

		if tonumber(bookOfCombatTime) then

			return bookOfCombatTime

		else

			return 0

		end

	else

		return 0

	end

else

	return 0

end

]]

return tonumber(Retlua(code))

end



function HasWatchDog()

	local code = [[

return type(RecordMesh)

]]

local str = Retlua(code)

	if str == "function" then

		return true

	else

		return false

	end

end



function È·ÈÏÌìÂíÅÆ×Ó()

	PaGlobal_MessageBox_Edit_All._functionYes()

end



function AutoTurnOnFairy()

	if GetTime() - setFairyT >= 10000 then

		Dolua("if not ToClient_getCurrentAutoUseModeToggleState() then HandleEventLUp_AutoUseBuffItem_ToggleAutoUseMode() ToClient_setAutoUseModeToggleState(true) end")

		setFairyT = GetTime()

	end

end



function PatchSkillToolTip()

	local code = [[

function GetSkillGroupBySkillId(skillid)

	local ret = nil

	local selfPlayerWrapper = getSelfPlayer()

	for i=0,2 do

		local tableWrapper = ToClient_getSkillGroupCellTableWrapper(i, selfPlayerWrapper:getClassType())

		local colMaxCount = tableWrapper:sizeX()

		local rowMaxCount = tableWrapper:sizeY()

		local subGroupSize = tableWrapper:getSubGroupSize()

		for index = 0, subGroupSize - 1 do

			for row = 0, rowMaxCount - 1 do

				for col = 0, colMaxCount - 1 do

					cellWrapper = tableWrapper:atWrapper(col, row)

					if nil ~= cellWrapper and true == cellWrapper:isDefined() then

						local key = cellWrapper:getSkillGroupNo()

						local self = PaGlobal_SkillGroup

						local skillGroup = self._skillGroupList[key]

						if skillGroup then

							for lv=1,skillGroup._maxLevel do

								local skillKey = ToClient_getSkillKeyBySkillGroupNo(key, lv)

								local skillNo = skillKey:getSkillNo()

								if skillNo == skillid then

									ret = key

								end

							end

						end

					end

				end

			end

		end

	end

	return ret

end



function PaGlobal_TooltipSkill_All:showTooltip(target, skillNo, skillTypeSS, isShowNextLevel, isReserveSkillOn, isResetable, isForceResetable, isItemSkillTooltip)

  target.main:SetShow(false, false)

  local isNextLvWidget = target.main ~= Panel_Tooltip_SkillGroup and target.main ~= Panel_Tooltip_SkillGroup_forBlackSpirit and target.main ~= Panel_Tooltip_SkillGroup_forLinkTooltip and target.main ~= Panel_Tooltip_Skill_NextLevel_All

  local isLearnRequireInfo = target.main ~= Panel_Tooltip_SkillGroup_forBlackSpirit and target.main ~= Panel_Tooltip_SkillGroup_forLinkTooltip

  local level = getLearnedSkillLevel(skillTypeSS)

  local skillStatic, nextLevelStatic

  if isNextLvWidget then

    level = level + 1

    target.requireLevel:SetShow(false)

    target.requireLevel_value:SetShow(false)

  end

  if target.main == Panel_Tooltip_Skill_NextLevel_All then

    level = 1

  end

  local skillLevelInfo = getSkillLevelInfo(skillNo)

  if nil == skillLevelInfo then

    return

  end

  if isItemSkillTooltip == true then

    level = 1

  end

  skillStatic = getSkillStaticStatus(skillNo, level)

  if nil == skillStatic then

    return

  end

  if true == skillLevelInfo._usable and not skillStatic:isAutoLearnSkillByLevel() and not skillStatic:isLearnSkillByItem() and skillStatic:isLastSkill() and (nil == isForceResetable or false == isForceResetable) then

    isResetable = true

    local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

    if nil ~= skillTypeStaticWrapper then

      local isGuildSkill = skillTypeStaticWrapper:isGuildSkill()

      if true == isGuildSkill then

        isResetable = false

      end

    end

  end

  local skillTypeSSW = skillStatic:getSkillTypeStaticStatusWrapper()

  if nil == skillTypeSSW then

    return

  end

  local playerWrapper = getSelfPlayer()

  if nil == playerWrapper then

    return

  end

  local player = playerWrapper:get()

  if nil == player then

    return

  end

  if Panel_Tooltip_SkillGroup == target.main then

    if true == isResetable and false == _ContentsGroup_UsePadSnapping then

      target.titleArea:SetShow(true)

      target.title:SetText(PAGetString(Defines.StringSheet_RESOURCE, "PANEL_SKILLTOOLTIP_RESETDESC"))

    else

      target.titleArea:SetShow(false)

    end

  end

  target.skillIcon:ChangeTextureInfoName("icon/" .. skillTypeSSW:getIconPath())

  local x1, y1, x2, y2 = setTextureUV_Func(target.skillIcon, 0, 0, 43, 43)

  target.skillIcon:getBaseTexture():setUV(x1, y1, x2, y2)

  target.skillIcon:setRenderTexture(target.skillIcon:getBaseTexture())

  target.skillName:SetTextMode(__eTextMode_AutoWrap)

  local skillgroupNo = GetSkillGroupBySkillId(skillNo)

if skillgroupNo then

  target.skillName:SetText(skillTypeSSW:getName().."\ngroup:"..skillgroupNo)

else

   target.skillName:SetText(skillTypeSSW:getName() .. "\nid:" .. skillNo)

end

  target.skillName:SetTextVerticalCenter()

  local needLvLearning = skillStatic:get()._needCharacterLevelForLearning

  local needSkillLearning = skillStatic:get()._needSkillPointForLearning

  local needItemLearning

  local isNeedLvLearning = false

  if isLearnRequireInfo then

    local needItemLearningItem = skillStatic:get():needItemForLearning()

    if nil ~= needItemLearningItem then

      local needItemLearningKey = needItemLearningItem._key

      needItemLearning = getItemEnchantStaticStatus(needItemLearningKey)

    end

    target.requireLevel_value:SetTextMode(__eTextMode_AutoWrap)

    local compareType

    if "GuildSkillBox" == self.TooltipSkillGroup._callTooltipType then

      local myGuildInfo = ToClient_GetMyGuildInfoWrapper()

      if nil == myGuildInfo then

        return

      end

      local myGuildRank = myGuildInfo:getMemberCountLevel()

      compareType = myGuildRank

    else

      compareType = player:getLevel()

    end

    if 1 <= needLvLearning then

      if needLvLearning > compareType then

        isNeedLvLearning = true

        local requireLevel_valueText = PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedLevel", "needLvLearning", needLvLearning)

        target.requireLevel_value:SetText(": " .. "<PAColor0xFFDB2B2B>" .. requireLevel_valueText .. "<PAOldColor>")

      else

        if "GuildSkillBox" ~= self.TooltipSkillGroup._callTooltipType then

          isNeedLvLearning = true

        else

          isNeedLvLearning = false

        end

        target.requireLevel_value:SetText(": " .. PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedLevel", "needLvLearning", needLvLearning))

      end

    elseif 0 == needLvLearning then

      isNeedLvLearning = true

      target.requireLevel_value:SetText(": " .. PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_QuestGain"))

    end

    target.requireSP_value:SetTextMode(__eTextMode_AutoWrap)

    if needSkillLearning > player:getRemainSkillPoint() then

      local requireSP_valueText = PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedSP", "needSkillLearning", needSkillLearning)

      target.requireSP_value:SetText(": <PAColor0xFFDB2B2B>" .. requireSP_valueText .. "<PAOldColor>")

    else

      target.requireSP_value:SetText(": " .. PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedSP", "needSkillLearning", needSkillLearning))

    end

    if needSkillLearning > player:getRemainSkillPoint() then

      local requireSP_valueText = PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedSP", "needSkillLearning", needSkillLearning)

      target.requireSP_value:SetText(": <PAColor0xFFDB2B2B>" .. requireSP_valueText .. "<PAOldColor>")

    else

      target.requireSP_value:SetText(": " .. PAGetStringParam1(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedSP", "needSkillLearning", needSkillLearning))

    end

    if nil ~= needItemLearning then

      target.requireItem_value:SetTextMode(__eTextMode_AutoWrap)

      target.requireItem_value:SetAutoResize(true)

      local needItemName = needItemLearning:getName()

      local needCount = tostring(skillStatic:get()._needItemCountForLearning_s64)

      target.requireItem_value:SetText(": " .. PAGetStringParam2(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedItem", "needItemName", needItemName, "needCount", needCount))

    end

  end

  target.needHP_value:SetTextMode(__eTextMode_AutoWrap)

  target.needHP_value:SetAutoResize(true)

  target.needHP_value:SetText(": " .. skillStatic:get()._requireHp)

  local isShowNeedHp = 0 ~= skillStatic:get()._requireHp

  local classType = playerWrapper:getClassType()

  local mpType = CppEnums.ClassType_MpType[classType]

  if mpType == CppEnums.MpBarColor.EP or mpType == CppEnums.MpBarColor.DARKELF then

    target.needMP:SetText(PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedEP"))

  elseif mpType == CppEnums.MpBarColor.FP then

    target.needMP:SetText(PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedFP"))

  elseif mpType == CppEnums.MpBarColor.BP then

    target.needMP:SetText(PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedBP"))

  else

    target.needMP:SetText(PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_NeedMP"))

  end

  target.needMP_value:SetTextMode(__eTextMode_AutoWrap)

  target.needMP_value:SetAutoResize(true)

  target.needMP_value:SetText(": " .. skillStatic:get()._requireMp)

  local isShowNeedMp = 0 ~= skillStatic:get()._requireMp

  local isShowNeedSp = false

  target.needSP_value:SetTextMode(__eTextMode_AutoWrap)

  target.needSP_value:SetAutoResize(true)

  if 1 < skillStatic:get()._requireSp then

    target.needSP_value:SetText(": " .. skillStatic:get()._requireSp)

    isShowNeedSp = true

  else

    isShowNeedSp = false

  end

  local isShowSiegeResource = false

  target.siegeResource_value:SetTextMode(__eTextMode_AutoWrap)

  target.siegeResource_value:SetAutoResize(true)

  local skillType = ToClient_SiegeSkillResourceType(skillNo)

  if __eSiegeSkillResourceType_SiegeAngerPoint == skillType then

    local angerCost = ToClient_GetCostPointSiegeAngerSkill(skillNo)

    local maxAngerCost = ToClient_GetMaxAngerPoint()

    if 0 ~= angerCost and 0 ~= maxAngerCost then

      local percent = angerCost / maxAngerCost

      local percentStr = string.format("%.0f %%", percent * 100)

      isShowSiegeResource = true

      target.siegeResource_value:SetText(": " .. percentStr)

    else

      isShowSiegeResource = false

    end

  else

    isShowSiegeResource = false

  end

  local isShowNeedItem = nil ~= skillStatic:getItemInfo() and nil ~= skillStatic:getItemInfo():get()

  target.needItem_value:SetTextMode(__eTextMode_AutoWrap)

  target.needItem_value:SetTextVerticalTop()

  if not isShowNeedItem then

    target.needItem_value:SetText(PAGetString(Defines.StringSheet_GAME, "Lua_TooltipSkill_NoItemConsumed"))

  else

    local useNeedItemName = skillStatic:getItemInfo():getName()

    local s64_useNeedItemCount = skillStatic:get()._needItemCount_s64

    target.needItem_value:SetText(": " .. PAGetStringParam2(Defines.StringSheet_GAME, "Lua_TooltipSkill_UseNeedItem", "useNeedItemName", useNeedItemName, "useNeedItemCount", tostring(Int64toInt32(s64_useNeedItemCount))))

  end

  local _time = skillStatic:get()._reuseCycle / 1000

  target.reuseCycle_value:SetText(": " .. convertStringFromDatetimeForSkillTooltip(_time))

  local isShowReuseCycle = 0 ~= skillStatic:get()._reuseCycle

  local reusability = skillStatic:get():isUsableWhileInCoolTime()

  if reusability then

    target.reusability:SetText(PAGetString(Defines.StringSheet_GAME, "LUA_TOOLTIPSKILL_REUSABILITY"))

  else

    target.reusability:SetText(PAGetString(Defines.StringSheet_GAME, "LUA_TOOLTIPSKILL_NOREUSABILITY"))

  end

  local commandText = ""

  if true == _ContentsGroup_UsePadSnapping and false == _ContentsGroup_RenewUI then

    commandText = skillTypeSSW:getConsoleCommand()

  else

    commandText = skillTypeSSW:getCommand()

  end

  if "GuildSkillBox" == self.TooltipSkillGroup._callTooltipType then

    commandText = ""

  end

  local isShowCommand = "" ~= commandText

  target.useMethod:SetAutoResize(true)

  target.useMethod:SetTextMode(__eTextMode_AutoWrap)

  target.useMethod:SetText(commandText)

  target.skillEffect_value:SetTextMode(__eTextMode_AutoWrap)

  target.skillEffect_value:SetAutoResize(true)

  target.skillEffect_value:SetText(skillStatic:getDescription())

  local isAwakeningData = false

  local activeSkillSS

  target.awakeningeffect:SetTextMode(__eTextMode_AutoWrap)

  target.awakeningeffect:SetAutoResize(true)

  if skillStatic:isActiveSkillHas() and false == skillStatic:isFusionSkill() then

    activeSkillSS = getActiveSkillStatus(skillStatic)

    if nil == activeSkillSS then

      target.awakeningeffect:SetText("")

    else

      local awakeInfo = ""

      local awakeningDataCount = activeSkillSS:getSkillAwakenInfoCount() - 1

      local realCount = 0

      for idx = 0, awakeningDataCount do

        local skillInfo = activeSkillSS:getSkillAwakenInfo(idx)

        if "" ~= skillInfo then

          awakeInfo = awakeInfo .. "\n" .. skillInfo

          realCount = realCount + 1

        end

      end

      target.awakeningeffect:SetText(awakeInfo)

      isAwakeningData = 0 < realCount

    end

  else

    target.awakeningeffect:SetText("")

  end

  target.skillDescription:SetTextMode(__eTextMode_AutoWrap)

  target.skillDescription:SetAutoResize(true)

  target.skillDescription:SetText(skillTypeSSW:getDescription())

  local elementBiggap = 10

  local elementgap = 0

  local TooltipYPos = 10

  TooltipYPos = SkillGroup_GetControlBottomPos(target.iconArea) + elementBiggap

  local isPetSkill = false

  if target.main == Panel_Tooltip_SkillGroup and (PaGlobal_TooltipSkill_All.TooltipSkillGroup._currentTooltip.slotType == "sealPetListSkill" or PaGlobal_TooltipSkill_All.TooltipSkillGroup._currentTooltip.slotType == "unSealPetListSkill" or PaGlobal_TooltipSkill_All.TooltipSkillGroup._currentTooltip.slotType == "PetSkill") then

    isPetSkill = true

  end

  if isLearnRequireInfo then

    if false == isPetSkill then

      target.learnRequirement_panel:SetPosY(TooltipYPos)

      TooltipYPos = TooltipYPos + elementBiggap

    end

    local isLevelShow = false == isPetSkill

    if "ElfWarSkill" == self.TooltipSkillGroup._callTooltipType then

      isLevelShow = false

    end

    target.requireLevel:SetShow(isLevelShow)

    target.requireLevel_value:SetShow(isLevelShow)

    if isLevelShow then

      target.requireLevel:SetPosY(TooltipYPos)

      target.requireLevel_value:SetPosX(target.requireLevel:GetPosX() + target.requireLevel:GetTextSizeX() + 5)

      target.requireLevel_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.requireLevel_value) + elementgap

    end

    local isSpShow = false == isPetSkill

    if "ElfWarSkill" == self.TooltipSkillGroup._callTooltipType then

      isSpShow = false

    end

    target.requireSP:SetShow(isSpShow)

    target.requireSP_value:SetShow(isSpShow)

    if isSpShow then

      target.requireSP:SetPosY(TooltipYPos)

      target.requireSP_value:SetPosX(target.requireSP:GetPosX() + target.requireSP:GetTextSizeX() + 5)

      target.requireSP_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.requireSP_value) + elementgap

    end

    local isItemShow = nil ~= needItemLearning and false == isPetSkill

    target.requireItem:SetShow(isItemShow)

    target.requireItem_value:SetShow(isItemShow)

    if isItemShow then

      target.requireItem:SetPosY(TooltipYPos)

      target.requireItem_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.requireItem_value) + elementgap

    end

    if isLevelShow or isSpShow or isItemShow then

      TooltipYPos = TooltipYPos + elementBiggap

      target.learnRequirement_panel:SetSize(target.learnRequirement_panel:GetSizeX(), TooltipYPos - target.learnRequirement_panel:GetPosY())

      TooltipYPos = SkillGroup_GetControlBottomPos(target.learnRequirement_panel) + 5

      target.learnRequirement_panel:SetShow(true)

    else

      target.learnRequirement_panel:SetShow(false)

    end

  end

  target.skillDescription:SetPosY(TooltipYPos)

  TooltipYPos = SkillGroup_GetControlBottomPos(target.skillDescription) + elementgap

  if isShowNeedHp or isShowNeedMp or isShowNeedSp or isShowNeedItem or isShowReuseCycle then

    target.useCondition_category:SetPosY(TooltipYPos - 5)

    TooltipYPos = SkillGroup_GetControlBottomPos(target.useCondition_category) + elementgap - elementBiggap

    target.useCondition_category_panel:SetPosY(TooltipYPos)

    TooltipYPos = TooltipYPos + elementBiggap / 2

    if isShowNeedHp then

      target.needHP:SetPosY(TooltipYPos)

      target.needHP_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.needHP_value) + elementgap

    end

    target.needHP:SetShow(isShowNeedHp)

    target.needHP_value:SetShow(isShowNeedHp)

    if isShowNeedMp then

      target.needMP:SetPosY(TooltipYPos)

      target.needMP_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.needMP_value) + elementgap

    end

    target.needMP:SetShow(isShowNeedMp)

    target.needMP_value:SetShow(isShowNeedMp)

    if isShowNeedSp then

      target.needSP:SetPosY(TooltipYPos)

      target.needSP_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.needSP_value) + elementgap

    end

    target.needSP:SetShow(isShowNeedSp)

    target.needSP_value:SetShow(isShowNeedSp)

    if isShowSiegeResource then

      target.siegeResource:SetPosY(TooltipYPos)

      target.siegeResource_value:SetPosX(target.siegeResource:GetPosX() + target.siegeResource:GetTextSizeX() + 5)

      target.siegeResource_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.siegeResource_value) + elementgap

    end

    target.siegeResource:SetShow(isShowSiegeResource)

    target.siegeResource_value:SetShow(isShowSiegeResource)

    if isShowNeedItem then

      target.needItem:SetPosY(TooltipYPos)

      target.needItem_value:SetPosY(TooltipYPos)

      target.needItem_value:SetSize(target.needItem_value:GetSizeX(), target.needItem_value:GetTextSizeY())

      TooltipYPos = SkillGroup_GetControlBottomPos(target.needItem_value) + elementgap

    end

    target.needItem:SetShow(isShowNeedItem)

    target.needItem_value:SetShow(isShowNeedItem)

    if isShowReuseCycle then

      target.reuseCycle:SetPosY(TooltipYPos)

      if target.reuseCycle_value:GetPosX() < target.reuseCycle:GetTextSizeX() + target.reuseCycle:GetPosX() then

        target.reuseCycle_value:SetPosX(target.reuseCycle:GetTextSizeX() + target.reuseCycle:GetPosX() + 20)

      end

      target.reuseCycle_value:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.reuseCycle_value) + elementgap - 2

      target.reusability:SetPosY(TooltipYPos)

      TooltipYPos = SkillGroup_GetControlBottomPos(target.reusability) + elementgap + target.reusability:GetTextSizeY() - target.reusability:GetSizeY()

    end

    target.reusability:SetTextMode(__eTextMode_AutoWrap)

    target.reuseCycle:SetShow(isShowReuseCycle)

    target.reuseCycle_value:SetShow(isShowReuseCycle)

    target.reusability:SetShow(isShowReuseCycle)

    target.useCondition_category_panel:SetSize(target.useCondition_category_panel:GetSizeX(), TooltipYPos - target.useCondition_category_panel:GetPosY() + elementBiggap)

    TooltipYPos = SkillGroup_GetControlBottomPos(target.useCondition_category_panel) + elementgap

    target.useCondition_category:SetShow(true)

    target.useCondition_category_panel:SetShow(true)

  else

    target.needHP:SetShow(isShowNeedHp)

    target.needHP_value:SetShow(isShowNeedHp)

    target.needMP:SetShow(isShowNeedMp)

    target.needMP_value:SetShow(isShowNeedMp)

    target.needSP:SetShow(isShowNeedSp)

    target.needSP_value:SetShow(isShowNeedSp)

    target.siegeResource:SetShow(isShowSiegeResource)

    target.siegeResource_value:SetShow(isShowSiegeResource)

    target.needItem:SetShow(isShowNeedItem)

    target.needItem_value:SetShow(isShowNeedItem)

    target.reuseCycle:SetShow(isShowReuseCycle)

    target.reuseCycle_value:SetShow(isShowReuseCycle)

    target.reusability:SetShow(isShowReuseCycle)

    target.useCondition_category:SetShow(false)

    target.useCondition_category_panel:SetShow(false)

  end

  if isShowCommand then

    target.useMethod:SetPosY(TooltipYPos + elementBiggap)

    TooltipYPos = SkillGroup_GetControlBottomPos(target.useMethod) + elementgap

  end

  target.horizonLine1:SetPosY(TooltipYPos)

  target.skillEffect_category:SetPosY(TooltipYPos - 5)

  TooltipYPos = SkillGroup_GetControlBottomPos(target.skillEffect_category) + elementgap - elementBiggap

  target.skillEffect_panel:SetPosY(TooltipYPos)

  TooltipYPos = TooltipYPos + elementBiggap / 2

  target.skillEffect_value:SetPosY(TooltipYPos)

  TooltipYPos = SkillGroup_GetControlBottomPos(target.skillEffect_value) + elementgap

  target.skillEffect_panel:SetSize(target.skillEffect_panel:GetSizeX(), TooltipYPos - target.skillEffect_panel:GetPosY() + elementBiggap)

  TooltipYPos = SkillGroup_GetControlBottomPos(target.skillEffect_panel) + elementgap

  TooltipYPos = SkillGroup_GetControlBottomPos(target.skillEffect_panel)

  target.horizonLine2:SetPosY(TooltipYPos)

  target.horizonLine2:SetShow(isAwakeningData)

  target.awakeningEffect_category:SetShow(isAwakeningData)

  target.awakeningEffect_panel:SetShow(isAwakeningData)

  target.awakeningeffect:SetShow(isAwakeningData)

  if isAwakeningData then

    target.awakeningEffect_category:SetPosY(TooltipYPos + elementBiggap)

    TooltipYPos = SkillGroup_GetControlBottomPos(target.awakeningEffect_category) + elementgap

    target.awakeningEffect_panel:SetPosY(TooltipYPos)

    TooltipYPos = TooltipYPos + elementBiggap

    target.awakeningeffect:SetPosY(TooltipYPos)

    TooltipYPos = target.awakeningeffect:GetSizeY()

    target.awakeningEffect_panel:SetSize(target.awakeningEffect_panel:GetSizeX(), target.awakeningeffect:GetSizeY() + elementBiggap + 30)

    TooltipYPos = SkillGroup_GetControlBottomPos(target.awakeningEffect_panel) + elementgap

  end

  if true == isPetSkill then

    target.horizonLine1:SetShow(false)

    target.horizonLine2:SetShow(false)

    TooltipYPos = TooltipYPos - elementBiggap * 2

  end

  local panelSizeY = TooltipYPos + elementBiggap

  target.main:SetSize(target.main:GetSizeX(), panelSizeY)

  target.main:SetShow(true, false)

  if panelSizeY > self.TooltipSkillGroup._maxHeight then

    self.TooltipSkillGroup._maxHeight = panelSizeY

  end

end

]]

Dolua(code)

end



function ScrollCollectTime()

	local str = Retlua([[

local selfPlayer = getSelfPlayer()

local player = selfPlayer:get()

local grade = player:getItemCollectionScrollGrade()

local point = Int64toInt32(player:getItemCollectionScrollPoint())

return point

]])

return tonumber(str)

end



function refreshYaw()

	Dolua("Panel_CharacterInfo_All:SetShow(true,true) Panel_CharacterInfo_All:SetShow(false)")

end



function ÒôÀÖ²¥·ÅÆ÷()

	HandleEventLUp_CloseRadioPlayer()

end



function TurnOnItemCollectScroll(idx)

	local code = string.format([[

if Panel_Widget_HopeGaugeOnOff then

	local coolTime = ToClient_getItemCollectionScrollCoolTime()

	if  coolTime == 0 then

		ToClient_ApplyItemCollectionScroll(%i, false)

	end

	PanelCloseFunc_MessageBox()

end

]],idx)

Dolua(code)

end



function TurnOffItemCollectScroll()

	Dolua("local coolTime = ToClient_getItemCollectionScrollCoolTime() if coolTime == 0 then ToClient_ApplyItemCollectionScroll(0, false) PanelCloseFunc_MessageBox() end")

end



function TurnOnAlchemyStone()

	local code = string.format([[

local EquipInfo = ToClient_getEquipmentItem(27)

if EquipInfo then

	local EquipProxy = EquipInfo:get()

	if EquipProxy then

		local Dura = EquipProxy:getEndurance()

		if Dura > 0 then

			PaGlobal_Equipment_All._ui.check_alchemyStone:SetCheck(true)

		end

	end

end

]])

Dolua(code)

end



function TurnOffAlchemyStone()

	Dolua("PaGlobal_Equipment_All._ui.check_alchemyStone:SetCheck(false)")

end



function LootTracker()

local code = [[

local file = io.open(BotPath.."\\json.lua", "r")

if file then

	local code = file:read("*a")

	local func, err = loadstring(code, "json.lua")

	if func then

		func()

		msg("JSON registered")

	end

	file:close()

end

LootLogList = {}

LootTrackerTimer = GetTime()

function extractNumber(s)

    local number = ""

    for i = 1, #s do

        local char = s:sub(i, i)

        if char:match('%d') or char == "," then

            number = number .. char

        else

            if #number > 0 then

                break

            end

        end

    end

	number = string.gsub(number, ",", "")

	if tonumber(number) then number = tonumber(number) end

    return number

end

]]

	code = code..string.format([[

function LoadLootLog()

    local json = JSON:new()

	local file = io.open(BotPath.."\\lootlog.json", "r")

	if file then

		local content = file:read("*a")

		table.merge(LootLogList,json:decode(content))

		if #LootLogList > 0 then

			LootTrackerTimer = LootLogList[1].Time

			msg("Loot season loaded")

		end

		file:close()

	end

end

LootLogShow = false

function ShowItemShit(itemEnchantKey, slotNo, itemCount, whereType)

	local item = getItemEnchantStaticStatus(ItemEnchantKey(itemEnchantKey))--this is itemSSW

	local name = item:getName()

	local isAble = requestIsRegisterItemForItemMarket(item:get()._key)

	local itemKey = item:get()._key:getItemKey()

	local enchantLevel = item:get()._key:getEnchantLevel()

	local enchantKey = ItemEnchantKey(itemKey, enchantLevel)

	local enchantKeyRaw = enchantKey:get()

	local has = false

	for i=1,#LootLogList do

		if LootLogList[i].id == itemEnchantKey then

			has = true

			LootLogList[i].count = LootLogList[i].count + Int64toInt32(itemCount)

		end

	end

	if not has then

		local s64_sellPrice = item:get()._sellPriceToNpc_s64

		table.insert(LootLogList,{id=itemEnchantKey,count=Int64toInt32(itemCount),price=Int64toInt32(s64_sellPrice),total=Int64toInt32(s64_sellPrice)*Int64toInt32(itemCount),Trade=isAble,MarketPrice=0,MarketTotal=0,Time=GetTime()})

	end

end

LoadLootLog()

registerEvent("EventAddItemToInventory", "ShowItemShit")

]])

Dolua(code)

end



function ¼¼ÄÜID()

	local quickSlotInfo = getQuickSlotItem(17)

local id = quickSlotInfo._skillKey:getSkillNo()

local remainTime = getSkillCooltime(quickSlotInfo._skillKey:get())

return id

end



function ¼¼ÄÜCD()

	local skillKey = selfPlayerNextSkillConsoleSkillKey(1661)

    local remainTime = getSkillCooltime(skillKey)

	return remainTime

end



function EquipRod()

local code = string.format([[

local ret = nil

local inventory = ((getSelfPlayer()):get()):getInventoryByType(CppEnums.ItemWhereType.eInventory)

if inventory == nil then

	return -1

end

local invenMaxSize = inventory:sizeXXX()

for ii = 0, invenMaxSize - 1 do

	local itemWrapper = getInventoryItem(ii)

	if itemWrapper ~= nil then

		if (itemWrapper:getStaticStatus()):getEquipType() == 44 then

			local endurance = (itemWrapper:get()):getEndurance()

			if endurance > 0 then

				ret = ii

				inventoryUseItem(0,ii, nil, true)

				return ret

			end

		end

	end

end

return ret

]])

	local str = tonumber(Retlua(code))

	if str then

		return str 

	else

		return nil

	end

end



function RodEquipped()

	if tonumber(Retlua('return ToClient_getEquipmentItem(0):getStaticStatus():getEquipType()')) == 44 then

		return true

	else

		return false

	end

end



function GetMainHandDura()

	local i = tonumber(Retlua('return ToClient_getEquipmentItem(0):get():getEndurance()'))

	return i

end



function NaviToNearNpcType(npctype)

	local code = string.format([[

local player = getSelfPlayer()

local selfPlayer = player:get()

local position = player:get3DPos()

local nearNpcInfo = getNearNpcInfoByType(%i, position)

local uid = nearNpcInfo:getKeyRaw()

local name = nearNpcInfo:getName()

local pos = nearNpcInfo:getPosition()

local npcNaviKey = ToClient_WorldMapNaviStart(pos, NavigationGuideParam(), true,true)

]],npctype)

Dolua(code)

end



function GetNearNpcNameByType(npctype)

	local code = string.format([[

local player = getSelfPlayer()

local selfPlayer = player:get()

local position = player:get3DPos()

local nearNpcInfo = getNearNpcInfoByType(%i, position)

local name = nearNpcInfo:getName()

return name

]],npctype)

local str = tostring(Retlua(code))

return str

end



function GetNearNpcUidByType(npctype)

	local code = string.format([[

local player = getSelfPlayer()

local selfPlayer = player:get()

local position = player:get3DPos()

local nearNpcInfo = getNearNpcInfoByType(%i, position)

local uid = nearNpcInfo:getKeyRaw()

return uid

]],npctype)

local str = tonumber(Retlua(code))

return str

end



function GetNearNpcPosByType(npctype)

	local code = string.format([[

local ret = nil

local player = getSelfPlayer()

local selfPlayer = player:get()

local position = player:get3DPos()

local nearNpcInfo = getNearNpcInfoByType(%i, position)

local pos = nearNpcInfo:getPosition()

if pos then

	ret = "{".."x="..pos.x..",y="..pos.z..",z="..pos.y.."}"

end

return ret

]],npctype)

local str = Retlua(code)

local b = load("return " .. str)

local list = b()

return list

end



function SkillCDOKByID(id)

	local code = string.format([[

local skillNo = %i

local remainTime = 9999

local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

if learnedSkillLevel >= 1 then

	local skillKey = selfPlayerNextSkillConsoleSkillKey(skillNo)

	remainTime = getSkillCooltime(skillKey)

end

return remainTime

]],id)

	local str = tonumber(Retlua(code))

	if str == 0 then

		return true

	else

		return false

	end

end



function °×ÆÁ()

	Dolua("ToClient_openWorldMap()")

end



function ´«ËÍ()

	Dolua("HandleEventLUp_MagnusEasyTeleportMap_Open()")

end



function ÄÚ²¿Ð¡±Ê¼Ç()

	PaGlobal_Memo_All:open()

end



function GetNodeId()

	local code = [[

function ShowNodeID(nodeBtn)

	local node = nodeBtn:FromClient_getExplorationNodeInClient()

	local plantKey = node:getPlantKey()

	local id = plantKey:getWaypointKey()

	chatting_sendMessage('', "Node ID:"..id,5,0)

end

registerEvent("FromClient_RClickedWorldMapNode","ShowNodeID")

]]

Dolua(code)

end



function PatchBuffToolTip()

	local code = [[

local _uiIcon = UI.getChildControl(Panel_Tooltip_Common, "Tooltip_Common_Icon")

local _uiName = UI.getChildControl(Panel_Tooltip_Common, "Tooltip_Common_Name")

local _uiTitle = UI.getChildControl(Panel_Tooltip_Common, "Tooltip_Common_Title")

local _styleDesc = UI.getChildControl(Panel_Tooltip_Common, "Tooltip_Common_Description")

local uiTextGroup = {_uiName = _uiName, _styleDesc = _styleDesc}

local function getMaxRightPos()

  local rightPos = 0

  for _, control in pairs(uiTextGroup) do

    if control:GetShow() then

      local currentControlRight = control:GetPosX() + control:GetTextSizeX()

      if rightPos < currentControlRight then

        rightPos = currentControlRight

      end

    end

  end

  return rightPos

end

local function getMaxBottomPos()

  local bottomPos = 0

  for _, control in pairs(uiTextGroup) do

    if control:GetShow() then

      local currentControlBottom = control:GetPosY() + control:GetTextSizeY()

      if bottomPos < currentControlBottom then

        bottomPos = currentControlBottom

      end

    end

  end

  return bottomPos

end

function ShowBuffTooltip(buffIndex, buffType)

  if _ContentsGroup_RenewUI then

    return

  end

  local appliedBuff = getSelfPlayer():getAppliedBuffByIndexByOrder(buffIndex - 1, buffType)

  if nil == appliedBuff then

    return

  end

  local buffKey = appliedBuff:getBuffKey()

  buffTooltipIndex = buffIndex

  typeTooltipbuff = buffType

  local icon = PaGlobalAppliedBuffList._uiBuffList[buffType][buffIndex]

  local tooltipIndex = buffIndex + buffType * PaGlobalAppliedBuffList._maxBuffCount

  if appliedBuff ~= nil then

    TooltipCommon_Show(tooltipIndex, icon, appliedBuff:getIconName(), appliedBuff:getBuffDesc(), buffKey)

  end

end

local currentIndex = -1

local isShow = false

function TooltipCommon_Show(index, uiWedget, iconPath, name, buffKey, desc)

  if currentIndex == index and isShow then

    return

  else

    currentIndex = index

    isShow = true

  end

  if iconPath ~= nil then

    _uiIcon:ChangeTextureInfoName("icon/" .. iconPath)

  else

    _uiIcon:ChangeTextureInfoName("")

  end

  _uiName:SetTextMode(__eTextMode_AutoWrap)

	if nil ~= buffKey then

	  _uiName:SetText("(" .. buffKey .. ") " .. name)

	else

	  _uiName:SetText(name)

	end

  _uiName:ComputePos()

  if nil == desc then

    _styleDesc:SetShow(false)

  else

    _styleDesc:SetText(desc)

  end

  local width = getMaxRightPos()

  local height = getMaxBottomPos() + 30

  if 0 ~= width and 0 ~= height then

    local posX = uiWedget:GetParentPosX() + uiWedget:GetSizeX() * 0.8

    local posY = uiWedget:GetParentPosY() - uiWedget:GetSizeY() - _uiName:GetTextSizeY()

    if 0 > posY - Panel_Tooltip_Common:GetSizeY() then

      posY = uiWedget:GetParentPosY() + uiWedget:GetSizeY() * 0.8

    end

    if posX + Panel_Tooltip_Common:GetSizeX() > getScreenSizeX() then

      posX = uiWedget:GetParentPosX() - Panel_Tooltip_Common:GetSizeX() + uiWedget:GetSizeX() * 0.2

    end

    Panel_Tooltip_Common:SetPosX(posX)

    Panel_Tooltip_Common:SetPosY(posY)

    Panel_Tooltip_Common:SetSize(Panel_Tooltip_Common:GetSizeX(), height)

    Panel_Tooltip_Common:SetShow(true, false)

  else

    Panel_Tooltip_Common:SetShow(false, false)

  end

end



function TooltipCommon_Hide(index)

  if currentIndex ~= index or false == isShow then

    return

  else

    currentIndex = -1

    isShow = false

  end

  if false == _ContentsGroup_UsePadSnapping and Defines.CloseType.eCloseType_Attacked == getCurrentCloseType() then

    return

  end

  Panel_Tooltip_Common:SetShow(false, false)

end

function TooltipCommon_getCurrentIndex()

  return currentIndex

end

]]

Dolua(code)

end



function PatchItemToolTip()

	local code =

    [[        

function showTooltip_Item(target, itemWrapper, isSSW, isItemWrapper, chattingLinkedItem, index, isNextEnchantInfo, invenSlotNo, itemNamingStr)  

  audioPostEvent_SystemUi(1, 13)

  _AudioPostEvent_SystemUiForXBOX(1, 13)

  target.mainPanel:SetShow(true, false)

  local ret, ret2 = Panel_Tooltip_Item_ShowInfo(target, itemWrapper, isSSW, isItemWrapper, chattingLinkedItem, index, isNextEnchantInfo, invenSlotNo, itemNamingStr)

  local itemId = 0

  if isSSW and not isItemWrapper then    

    itemId = itemWrapper:get()._key:getItemKey() 

  else    

    itemId = ((itemWrapper:get()):getKey()):getItemKey()

  end

  target.itemName:SetText(target.itemName:GetText() .."  id:"..tostring(itemId))

  return ret, ret2

end

    ]]

Dolua(code)

end



function EnabledUser()

	local code = [[

Enableusers = {3355316,4114801,3586007,24014,3582586,4164982,3180012,3950995,51036,1131211,285574,517324,86364,355598,1035587,456247,3582696,4271381,486338,1044727,818507,3277193,939590,4267326,4265588,4264998,4186375,3184167,2475622,4090787,381850,443484,3947058,20729,4257436,1086845,519374,4255942,400689,575151,1325737,92537,3194863,507839,3922554,4251008,4249656,940609,1282831,607035,968898,3923073,4248184,501544,4070598,729109,4248175,2241817,4248134,420946,4247316,34764,3014695,77388,1629555,1013864,3847107,4093816,2620743,1564443,183973,4022604,4246236,74951,1908329,4189768,1805,472625,4230185,633979,4125829,504755,1168385,1035587,74564,2679981,2785074,2740791,4077955,1188506,1021575,232272,961598,4114250,4239344,2849089,686996,4231860,518154,2571413,3913748,45443,4096363,2849089,1032178,3540430,1193949,1483884,1500623,4034283,1850622,4230015,4225115,1636612,811388,4346504,1350646,4232155,1983751,156072}

]]

Dolua(code)

end



function MeshRecorder()

	local code = [[

local recordon,iskeydown = false,false

local meshdist,tom = 200,200

local lx,ly,lz = nil,nil,nil

local mx,my,mz

local list = {}

local begRecord,BegShowWp,keyP1,keyP2=false,false,false,false

MeshRecorderPanel = nil

function SaveMesh()

	local file = io.open(BotPath.."\\MapData.json", "w")

	if file then

		local json = JSON:new()

		file:write(json:encode_pretty(list))

		file:close()

		msg2("Mesh Saved:"..#list.." record stop")

	end

end

function LoadMesh()

	local json = JSON:new()

	local file = io.open(BotPath.."\\MapData.json", "r")

	if file then

		local content = file:read("*a")

		file:close()

		list = json:decode(content)

		msg2("Mesh Loaded:"..#list)

		lx,ly,lz = GetMyPos()

	end

end

function MeshPanel()

	if not MeshRecorderPanel then

		MeshRecorderPanel = UI.createPanel("MeshRecorder_Panel", 8192)

		MeshRecorderPanel:SetSize(150,100)

		MeshRecorderPanel:SetPosX(Panel_LocalWar:GetPosX())

		MeshRecorderPanel:SetPosY(Panel_LocalWar:GetPosY() + 100)

		MeshRecorderPanel:SetShow(true, true)

		MeshRecorderPanel:SetDragEnable(true)

		MeshRecorderPanel:SetIgnore(false)

		MeshRecorderPanel:ActiveMouseEventEffect(true)

		MeshRecorderPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

		MeshRecorderPanel:getBaseTexture():setUV(setTextureUV_Func(MeshRecorderPanel, 7, 6, 405, 542))

		MeshRecorderPanel:setRenderTexture(MeshRecorderPanel:getBaseTexture())

		MeshRecorderPanel:SetAlpha(1)

		MeshRecorderPanel:SetDragAll(true)

		MeshTxt = UI.createControl(__ePAUIControl_StaticText, MeshRecorderPanel, "Meshtitle")

		MeshTxt:SetSize(150, 30)

		MeshTxt:SetPosX(5)

		MeshTxt:SetPosY(5)

		MeshTxt:SetTextVerticalTop()

		MeshTxt:SetTextHorizonLeft()

		MeshTxt:SetText("Mesh dist:")

		MeshTom = UI.createControl(__ePAUIControl_StaticText, MeshRecorderPanel, "Tom_Txt")

		MeshTom:SetSize(100, 30)

		MeshTom:SetPosX(5)

		MeshTom:SetPosY(25)

		MeshTom:SetTextVerticalTop()

		MeshTom:SetTextHorizonLeft()

		MeshTom:SetText("Tom:")

		local _alphaSlider_Control = UI.getChildControl(Panel_ChatOption, "Slider_PanelTransparencyControl")

		MeshDistSlider = UI.cloneControl(_alphaSlider_Control,MeshRecorderPanel, "MeshDist_Slider")

		MeshDistSlider:SetSize(130,5)

		MeshDistSlider:SetInterval(300)

		MeshDistSlider:SetPosX(MeshTxt:GetPosX())

		MeshDistSlider:SetPosY(MeshTxt:GetPosY()+50)

		MeshDistSlider:SetShow(true)

		MeshDistSlider:SetControlPos(meshdist/300*100)

		MeshInfo = UI.createControl(__ePAUIControl_StaticText, MeshRecorderPanel, "MeshInfo_Txt")

		MeshInfo:SetSize(100, 30)

		MeshInfo:SetPosX(5)

		MeshInfo:SetPosY(MeshDistSlider:GetPosY()+20)

		MeshInfo:SetTextVerticalTop()

		MeshInfo:SetTextHorizonLeft()

		MeshInfo:SetText("Recorder Status:")

	else

		MeshRecorderPanel:SetShow(false,false)

		UI.deletePanel("MeshRecorder_Panel")

		MeshRecorderPanel = nil

	end

end



function RecordMesh()

	if not iskeydown then

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_CONTROL) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F9) then

			local userid = getSelfPlayer():get():getUserNo()

			userid = tonumber(tostring(userid))

			if table.find(Enableusers,userid) then

				iskeydown = true

			else

				msg2("You would need to purchase at less one combat rotation to use this  VIP mesh record feature.")

			end

		end

	else

		if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_CONTROL) and not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F9) then

			if not recordon then

				msg2("Mesh Recorder turn on")

				LoadMesh()

				recordon = true

			else

				msg2("Mesh Recorder turn off")

				SaveMesh()

				list = {}

				recordon = false

			end

			MeshPanel()

			iskeydown = false

		end

	end

	if recordon then

		if not keyP1 then

			if isKeyPressed(107) then

				keyP1 = true

			end

		else

			if not isKeyPressed(107) then

				if not begRecord then

					msg2("Mesh record begin")

					begRecord = true

				else

					SaveMesh()

					begRecord = false

				end

				keyP1 = false

			end

		end

		if not keyP2 then

			if isKeyPressed(109) then

				keyP2 = true

			end

		else

			if not isKeyPressed(109) then

				ToClient_DeleteNaviGuideByGroup(0)

				for i =1,#list do

					if Dist2P3D(list[i].x,list[i].z,list[i].y) <= 5000 then

						worldmapNavigatorStart(float3(list[i].x,list[i].z,list[i].y), NavigationGuideParam(),false, true, false)

					end

				end

				keyP2 = false

			end

		end

	end

	if begRecord then

		mx,my,mz = GetMyPos()

		tom = GetDistToTbMin(list,mx,my,mz)

		if meshdist > 0 then

			if tom >= meshdist then

				lx,ly,lz = GetMyPos()

				table.insert(list,{x=lx,y=ly,z=lz})

				msg2("added mesh:"..#list)

			end

		end

	end

	if MeshRecorderPanel then

		meshdist = math.ceil(MeshDistSlider:GetControlPos()*300)

		MeshTxt:SetText("Mesh Dist: <PAColor0xFF00FF00>"..meshdist.."<PAOldColor>")

		MeshTom:SetText("Tom: <PAColor0xFF00FF00>"..tom.." / "..#list.."<PAOldColor>")

		if begRecord then

			MeshInfo:SetText("Meshrecord: <PAColor0xFF00FF00>On<PAOldColor>")

		else

			MeshInfo:SetText("Meshrecord: <PAColor0xFFFF3030>Pause<PAOldColor>")

		end

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "RecordMesh")

]]

Dolua(code)

end



function DbgPanel()

	local code = string.format([[

local shitpressed1,needToShowShit1,shitpressed2,needToShowShit2 = false,false,false,false

dbginfoPanel,dbgText,scrollBtn,BotSettingPanel,AlchemyBtn,AvoidAtHp = nil,nil,nil,nil,nil,nil

EBot = {}

EBot.UseAlchemyStone = true

EBot.UseItemCollectScroll = true

EBot.ItemCollectScrollLv = 1

EBot.DontRestock = false

EBot.AvoidLowHp = true

EBot.AvoidLowHpPrc = 20

EBot.SwapChannelAtPD = true

EBot.SwapChannelAtPDTimer = 20

EBot.OverWriteGrindRange = false

EBot.OverWriteGrindRangeRadius = 12

EBot.DoLoot = false

EBot.DoLootTp = false

EBot.TentBuff = false

EBot.MiniMize = false

EBot.ReviveSwapChannel = false

EBot.EscapeAtSwim = true

EBot.InvestNode = false

EBot.InvestNodeId = nil

EBot.TpOnStuck = true

EBot.NovaBurnLife = true

EBot.BuyCampBuff = false

EBot.BuyVillaBuff = false

EBot.BuyVillaDmgBuff = false

EBot.BuyVillaLifeBuff = false

EBot.CampBuffBuy = {}

EBot.VillaBuffBuy = {}

EBot.AutoChurch = false

EBot.ChurchBuff = {}

EBot.ChurchAP = false

EBot.ChurchDP = false

EBot.ChurchEXP = false

EBot.AutoBuff = {}

EBot.AutoHP = false

EBot.AutoHPAt = 20

EBot.AutoDP = false

EBot.AutoDPAt = 20

EBot.DropIdx = 1

EBot.DMGBuffIdx = 1

EBot.LifeBuffIdx = 1

EBot.TpPriorityMob = true

EBot.RandomPath = true

EBot.DbgSkill = false

EBot.GoCharSelectIfSwapCD = false

EBot.TpAddtionH = 20

EBot.FastGather = false

EBot.FastGatherDelay = 800

EBot.SaveArtific = false

EBot.TentDmg = false

local BeginRecord = false

local recordx,recordy,recordz = nil,nil,nil

local recordstr,recordidx = "",1

local recordTick,BeginRecordT = 0,nil

local RecordKeyPress,SetWp,SetGrindSpot,SetWayPoint = false,false,false,false

local needShowSetting = false

local ZoomHacked = false

local ZoomPress = false

function ZoomHack()

	if not ZoomPress then

		if isKeyPressed(17) and isKeyPressed(121) then

			ZoomPress = true

		end

	else

		if not isKeyPressed(17) and not isKeyPressed(121) then

			ZoomPress = false

			if not ZoomHacked then

				ZoomHacked = true

				msg2("ZoomHack on")

				ToClient_onBossCamera(false)

				local activeViewDistance = 6000

				local viewDistance = 3000

				local minDistance = 100

				local maxDistance = 10000

				local viewBoundaryDistacne = 1000

				local viewInterPlationTime = 0

				local mouse_wheel_sensitivity = 0.6

				local isSuccess = ToClient_onBossCamera(true, activeViewDistance, viewDistance, minDistance, maxDistance, viewBoundaryDistacne, viewInterPlationTime, mouse_wheel_sensitivity)

			else

				msg2("ZoomHack off")

				ZoomHacked = false

				ToClient_onBossCamera(false)

				local activeViewDistance = 1000

				local viewDistance = 1000

				local minDistance = 100

				local maxDistance = 1100

				local viewBoundaryDistacne = 1000

				local viewInterPlationTime = 0

				local mouse_wheel_sensitivity = 0.6

				local isSuccess = ToClient_onBossCamera(true, activeViewDistance, viewDistance, minDistance, maxDistance, viewBoundaryDistacne, viewInterPlationTime, mouse_wheel_sensitivity)

			end

		end

	end

end



function GetEntity()

	local ret = ""

	local actorProxy = getSelfPlayer():get()

	local mx,my,mz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

	for i=0,67 do

		local mob = FromClient_getRadarIconActorList(i)

		if mob then

			for key, control in pairs(mob) do

				local actorProxy = mob[key]

				local actorProxyWrapper = getActor(actorProxy:getActorKeyRaw())

				local isdead = actorProxyWrapper:isDead()

				if not isdead then

					local pos = actorProxyWrapper:get():getPosition()

					local top = math.floor(Dist3DCal(mx,my,mz,pos.x,pos.y,pos.z))/100

					if top <= 15 then

						local uid = actorProxyWrapper:getCharacterStaticStatusWrapper():getCharacterKey()

						local name = actorProxyWrapper:getCharacterStaticStatusWrapper():getName()

						ret = ret.."name:"..name.." uid:"..uid.." type:"..i.." dist:"..top.."\n"

					end

				end

			end

		end

	end

	dbgText:SetText(ret)

end



function GetBuff()

	local str = "Buff info:\n"

	for i =1,100 do

		for a=0,100 do

			local appliedBuff = getSelfPlayer():getAppliedBuffByIndexByOrder(i-1, a)

			if appliedBuff then

				local desc = appliedBuff:getBuffDesc()

				desc = string.gsub(desc, "<[^>]+>", "")

				desc = string.gsub(desc, "\n", "")

				local id = appliedBuff:getBuffKey()

				local isDebuff = appliedBuff:isDebuff()

				local type = appliedBuff:getBuffType()

				local u64_calc_time1 = appliedBuff:getRemainedTime_u64() / Defines.u64_const.u64_1000

				local remainT = appliedBuff:getRemainedTime_u64() / Defines.u64_const.u64_1000

				remainT = tostring(Util.Time.inGameTimeFormattingTop(u64_calc_time1))

				str=str.."id:"..id.." type:"..type.." isDebuff:"..tostring(isDebuff).." Time:"..remainT.." desc:"..desc.."\n"

			end

		end

	end

	dbgText:SetText(str)

end



function GetSkill()

	local strinfo = ""

	local selfPlayerWrapper = getSelfPlayer()

	local tableWrapper = ToClient_getSkillGroupCellTableWrapper(0, selfPlayerWrapper:getClassType())

	local colMaxCount = tableWrapper:sizeX()

	local rowMaxCount = tableWrapper:sizeY()

	local subGroupSize = tableWrapper:getSubGroupSize()

	for index = 0, subGroupSize - 1 do

		local strKey = PAGetString(Defines.StringSheet_GAME, tableWrapper:getAtSubGroupStringKey(index))

		for row = 0, rowMaxCount - 1 do

			for col = 0, colMaxCount - 1 do

				cellWrapper = tableWrapper:atWrapper(col, row)

				if nil ~= cellWrapper and true == cellWrapper:isDefined() then

					local key = cellWrapper:getSkillGroupNo()

					local cellType = cellWrapper:getType(0)

					local skillKey = ToClient_getSkillKeyBySkillGroupNo(key, 1)

					local skillNo = skillKey:getSkillNo()

					local skillTypeSSW = getSkillTypeStaticStatus(skillNo)

					if nil ~= skillTypeSSW then

						local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

						local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

						if learnedSkillLevel >= 1 then

							local skillName = skillTypeSSW:getName()

							strinfo = strinfo..skillName.." "..key.."\n"

						end

					end

				end

			end

		end

	end

	dbgText:SetText(strinfo)

end

function GetBagInfo()

	local str = "Bag info:\n"

	local actorProxy = getSelfPlayer():get()

	local invenSize= actorProxy:getInventoryByType(1):size()

	invenSize = invenSize-1

	for i =2,invenSize do

		local name = nil

		local itemId = 0

		local count = 0

		local itemWrapper = getInventoryItem(i)

		local itemType = 0

		local toolType = 0

		local dura = 100

		if itemWrapper then

			itemId = ((itemWrapper:get()):getKey()):getItemKey()

			name = (itemWrapper:getStaticStatus()):getName()

			itemType = itemWrapper:getStaticStatus():getItemType()

			local istool = itemWrapper:getStaticStatus():isCollectTool()

			local curdura = itemWrapper:get():getEndurance()

			if curdura then dura = curdura end

			if istool then

				toolType = itemWrapper:getStaticStatus():getCollectToolType()

			end

			if itemId == 802 then

				name = "Lucky+"

			end

			count = Int64toInt32((itemWrapper:get()):getCount_s64())

			str = str.."name:"..name.."  id:"..itemId.."  count:"..count.."  type:"..itemType.."  toolType:"..toolType.."  dura:"..dura.."\n"

		end

	end

	dbgText:SetText(str)

end



function CloseDebug()

	dbginfoPanel:SetShow(false,false)

	UI.deletePanel("Panel_Dbginfo")

	dbginfoPanel = nil

	local talkerid = nil

	if BeginRecord then

		recordidx = recordidx + 1

		if Panel_Npc_Dialog_All:GetShow() then

			talkerid = getNpcActor(dialog_getTalker():getActorKey()):getCharacterStaticStatusWrapper():getCharacterKey()

		end

		local str = ""

		if talkerid then

			str = ",npc="..talkerid

		end

		recordstr = recordstr.."{No="..recordidx..",x="..recordx..",y="..recordy..",z="..recordz..str.."},\n"

		recordx,recordy,recordz = GetMyPos()

		DrawPos(recordx+150,recordy+150,recordz)

		SetGrindSpot = false

		SetWayPoint = false

		local file = io.open(BotPath.."\\record.txt", "w")

		if file then

			file:write(recordstr)

			file:close()

		end

		recordx,recordy,recordz = nil,nil,nil

		recordstr = ""

		recordidx = 1

		Proc_ShowMessage_Ack_WithOut_ChattingMessage("Stop Record")

		unregisterEvent("FromClient_LuaTimer_UpdatePerFrame", "PathRecorder")

		BeginRecord = false

		BeginRecordT = nil

		io.popen(BotPath.."\\temp.bat")

	end

end



function DrawPos(x,y,z)

	worldmapNavigatorStart(float3(x,z,y), NavigationGuideParam(),false, true, false)

end



function DeleteDraw()

	ToClient_DeleteNaviGuideByGroup(0)

end



function PathRecorder()

	if not BeginRecordT then

		BeginRecordT = GetTime()

	else

		if GetTime() - BeginRecordT >= 300 then

			if not recordx then

				recordx,recordy,recordz = GetMyPos()

				for i =1,20 do

					DrawPos(recordx+150,recordy+150,recordz)

				end

				recordstr = "{No=1,x="..recordx..",y="..recordy..",z="..recordz.."},\n"

			else

				if Dist2P(recordx,recordy) >= 700 then

					recordidx = recordidx + 1

					recordstr = recordstr.."{No="..recordidx..",x="..recordx..",y="..recordy..",z="..recordz.."},\n"

					Proc_ShowMessage_Ack_WithOut_ChattingMessage("Add waypoint:"..recordidx)

					recordx,recordy,recordz = GetMyPos()

					--DrawPos(recordx+150,recordy+150,recordz)

				else

					if not SetGrindSpot then

						if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_ADD) or isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_OEM_7) then

							SetGrindSpot = true

						end

					else

						if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_ADD) and not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_OEM_7) then

							recordidx = recordidx + 1

							Proc_ShowMessage_Ack_WithOut_ChattingMessage("Add Grind spot:"..recordidx)

							recordstr = recordstr.."{No="..recordidx..",x="..recordx..",y="..recordy..",z="..recordz..",r=12".."},\n"

							recordx,recordy,recordz = GetMyPos()

							--DrawPos(recordx+150,recordy+150,recordz)

							SetGrindSpot = false

						end

					end

					if not SetWayPoint then

						if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_OEM_2) then

							SetWayPoint = true

						end

					else

						if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_OEM_2) then

							recordidx = recordidx + 1

							Proc_ShowMessage_Ack_WithOut_ChattingMessage("Add waypoint:"..recordidx)

							recordstr = recordstr.."{No="..recordidx..",x="..recordx..",y="..recordy..",z="..recordz.."},\n"

							recordx,recordy,recordz = GetMyPos()

							--DrawPos(recordx+150,recordy+150,recordz)

							SetWayPoint = false

						end

					end

				end

			end

			if GetTime() - recordTick >= 200 then

				local file = io.open(BotPath.."\\record.txt", "w")

				if file then

					file:write(recordstr)

					file:close()

				end

				recordTick = GetTime()

			end

		else

			ToClient_DeleteNaviGuideByGroup(0)

		end

	end

end

function RecorderManager()

	local userid = getSelfPlayer():get():getUserNo()

	userid = tonumber(tostring(userid))

	if table.find(Enableusers,userid) then

		if not BeginRecord then

			Proc_ShowMessage_Ack_WithOut_ChattingMessage("Begin Record")

			ToClient_DeleteNaviGuideByGroup(0)

			registerEvent("FromClient_LuaTimer_UpdatePerFrame", "PathRecorder")

			BeginRecord = true

		else

			recordidx = recordidx + 1

			local talkerid = nil

			if Panel_Npc_Dialog_All:GetShow() then

				talkerid = getNpcActor(dialog_getTalker():getActorKey()):getCharacterStaticStatusWrapper():getCharacterKey()

			end

			local str = ""

			if talkerid then

				str = ",npc="..talkerid

			end

			recordstr = recordstr.."{No="..recordidx..",x="..recordx..",y="..recordy..",z="..recordz..str.."},\n"

			recordx,recordy,recordz = GetMyPos()

			DrawPos(recordx+150,recordy+150,recordz)

			SetGrindSpot = false

			SetWayPoint = false

			local file = io.open(BotPath.."\\record.txt", "w")

			if file then

				file:write(recordstr)

				file:close()

			end

			recordx,recordy,recordz = nil,nil,nil

			recordstr = ""

			recordidx = 1

			msg2("Stop Record")

			unregisterEvent("FromClient_LuaTimer_UpdatePerFrame", "PathRecorder")

			BeginRecord = false

			BeginRecordT = nil

			io.popen(BotPath.."\\temp.bat")

		end

	else

		msg2("You would need to purchase at less one combat rotation to use this  VIP record feature.")

	end

end

function CloseBotSetting()

	BotSettingPanel:SetShow(false,false)

	UI.deletePanel("Panel_BotSetting")

	BotSettingPanel = nil

	CloseTent()

end



function CloseTent()

	if TentPanel then

		TentPanel:SetShow(false, false)

		UI.deletePanel("Panel_TentSetting")

		TentPanel = nil

	end

end

function ToggleLv1()

	scrollBtn_Lv1:SetCheck(true)

	scrollBtn_Lv2:SetCheck(false)

end

function ToggleLv2()

	scrollBtn_Lv1:SetCheck(false)

	scrollBtn_Lv2:SetCheck(true)

end

function ToggleOption0()

	Checkbox_DMG:SetCheck(true)

	VillaDamageBuffBtn:SetCheck(false)

	VillaLifeskillBuffBtn:SetCheck(false)

end

function ToggleOption1()

    Checkbox_10P:SetCheck(true)

    Checkbox_20P:SetCheck(false)

    Checkbox_30P:SetCheck(false)

    Checkbox_40P:SetCheck(false)

    Checkbox_50P:SetCheck(false)

end

function ToggleOption2()

    Checkbox_10P:SetCheck(false)

    Checkbox_20P:SetCheck(true)

    Checkbox_30P:SetCheck(false)

    Checkbox_40P:SetCheck(false)

    Checkbox_50P:SetCheck(false)

end

function ToggleOption3()

    Checkbox_10P:SetCheck(false)

    Checkbox_20P:SetCheck(false)

    Checkbox_30P:SetCheck(true)

    Checkbox_40P:SetCheck(false)

    Checkbox_50P:SetCheck(false)

end

function ToggleOption4()

    Checkbox_10P:SetCheck(false)

    Checkbox_20P:SetCheck(false)

    Checkbox_30P:SetCheck(false)

    Checkbox_40P:SetCheck(true)

    Checkbox_50P:SetCheck(false)

end

function ToggleOption5()

    Checkbox_10P:SetCheck(false)

    Checkbox_20P:SetCheck(false)

    Checkbox_30P:SetCheck(false)

    Checkbox_40P:SetCheck(false)

    Checkbox_50P:SetCheck(true)

end

function ToggleVillaOption1()

    Checkbox_60:SetCheck(true)

    Checkbox_90:SetCheck(false)

    Checkbox_120:SetCheck(false)

    Checkbox_180:SetCheck(false)

    Checkbox_300:SetCheck(false)

end

function ToggleVillaOption2()

    Checkbox_60:SetCheck(false)

    Checkbox_90:SetCheck(true)

    Checkbox_120:SetCheck(false)

    Checkbox_180:SetCheck(false)

    Checkbox_300:SetCheck(false)

end

function ToggleVillaOption3()

    Checkbox_60:SetCheck(false)

    Checkbox_90:SetCheck(false)

    Checkbox_120:SetCheck(true)

    Checkbox_180:SetCheck(false)

    Checkbox_300:SetCheck(false)

end

function ToggleVillaOption4()

    Checkbox_60:SetCheck(false)

    Checkbox_90:SetCheck(false)

    Checkbox_120:SetCheck(false)

    Checkbox_180:SetCheck(true)

    Checkbox_300:SetCheck(false)

end

function ToggleVillaOption5()

    Checkbox_60:SetCheck(false)

    Checkbox_90:SetCheck(false)

    Checkbox_120:SetCheck(false)

    Checkbox_180:SetCheck(false)

    Checkbox_300:SetCheck(true)

end

function ToggleLifeOption1()

    LifeCheckbox_60:SetCheck(true)

    LifeCheckbox_90:SetCheck(false)

    LifeCheckbox_120:SetCheck(false)

    LifeCheckbox_180:SetCheck(false)

    LifeCheckbox_300:SetCheck(false)

end

function ToggleLifeOption2()

    LifeCheckbox_60:SetCheck(false)

    LifeCheckbox_90:SetCheck(true)

    LifeCheckbox_120:SetCheck(false)

    LifeCheckbox_180:SetCheck(false)

    LifeCheckbox_300:SetCheck(false)

end

function ToggleLifeOption3()

    LifeCheckbox_60:SetCheck(false)

    LifeCheckbox_90:SetCheck(false)

    LifeCheckbox_120:SetCheck(true)

    LifeCheckbox_180:SetCheck(false)

    LifeCheckbox_300:SetCheck(false)

end

function ToggleLifeOption4()

    LifeCheckbox_60:SetCheck(false)

    LifeCheckbox_90:SetCheck(false)

    LifeCheckbox_120:SetCheck(false)

    LifeCheckbox_180:SetCheck(true)

    LifeCheckbox_300:SetCheck(false)

end

function ToggleLifeOption5()

    LifeCheckbox_60:SetCheck(false)

    LifeCheckbox_90:SetCheck(false)

    LifeCheckbox_120:SetCheck(false)

    LifeCheckbox_180:SetCheck(false)

    LifeCheckbox_300:SetCheck(true)

end

function ToggleVillaDmgBuffs()

    if VillaDamageBuffBtn:IsCheck() then

        VillaLifeskillBuffBtn:SetCheck(false)

		Checkbox_DMG:SetCheck(false)

    end

end

function ToggleVillaBuffs()

	if VillaLifeskillBuffBtn:IsCheck() then

        VillaDamageBuffBtn:SetCheck(false)

		Checkbox_DMG:SetCheck(false)

    end

end

function SaveSetting()

	EBot.UseItemCollectScroll = scrollBtn:IsCheck() 

	if scrollBtn_Lv1:IsCheck() then

		EBot.ItemCollectScrollLv = 1

	elseif scrollBtn_Lv2:IsCheck() then

		EBot.ItemCollectScrollLv = 2

	end

	EBot.SaveArtific = SaveArtBtn:IsCheck()

	EBot.FastGather = FastGatherBtn:IsCheck()

	EBot.FastGatherDelay = GatherDelay:GetControlPos()*2000

	EBot.GoCharSelectIfSwapCD = GoCharSelectBtn:IsCheck()

	EBot.TpPriorityMob = TpPriorityBtn:IsCheck()

	EBot.RandomPath = RandomPathBtn:IsCheck()

	EBot.UseAlchemyStone = AlchemyBtn:IsCheck() 

	EBot.DontRestock = TentBtn:IsCheck()

	EBot.AvoidLowHp = AvoidBtn:IsCheck() 

	if AvoidAtHp then

		if AvoidAtHp:GetControlPos() then

			EBot.AvoidLowHpPrc = math.ceil(AvoidAtHp:GetControlPos()*100)

		end

	end

	EBot.SwapChannelAtPD = SwapAtPDBtn:IsCheck()

	if SwapChannlePDtimer then

		EBot.SwapChannelAtPDTimer = math.ceil(SwapChannlePDtimer:GetControlPos()*300)

	end

	EBot.OverWriteGrindRange = OverWriteGrindBtn:IsCheck() 

	if OverWriteGrindRadius then

		EBot.OverWriteGrindRangeRadius = math.ceil(OverWriteGrindRadius:GetControlPos()*30)

	end

	EBot.TpAddtionH = math.ceil(TpHeightSlider:GetControlPos()*600)	

	EBot.DoLoot = LootBtn:IsCheck()

	EBot.DoLootTp = LootTpBtn:IsCheck()

	EBot.TentBuff = TentBuffBtn:IsCheck()

	EBot.MiniMize = MinimizeBtn:IsCheck()

	EBot.NovaBurnLife = NovaBurnBtn:IsCheck()

	EBot.ReviveSwapChannel = AutoReviveBtn:IsCheck()

	EBot.EscapeAtSwim = AutoEscapeBtn:IsCheck()

	EBot.InvestNode = InvestBtn:IsCheck()

	EBot.TpOnStuck = TpOnStuckBtn:IsCheck()

	EBot.DbgSkill = DbgSkillBtn:IsCheck()

	if tonumber(MyInvestNodeID:GetText()) then

		EBot.InvestNodeId = tonumber(MyInvestNodeID:GetText())

	else

		EBot.InvestNodeId = nil

	end

	if TentPanel then

		EBot.CampBuffBuy = {}

		if Checkbox_DMG:IsCheck() then

			EBot.TentDmg = true

			table.insert(EBot.CampBuffBuy,{id=57456,idx=5})

		else

			EBot.TentDmg = false

		end

		EBot.BuyCampBuff = droprateBtn:IsCheck()

		if Checkbox_10P:IsCheck() then

			EBot.DropIdx=1

			table.insert(EBot.CampBuffBuy,{id=57484,idx=6})

		elseif Checkbox_20P:IsCheck() then

			EBot.DropIdx=2

			table.insert(EBot.CampBuffBuy,{id=57485,idx=7})

		elseif Checkbox_30P:IsCheck() then

			EBot.DropIdx=3

			table.insert(EBot.CampBuffBuy,{id=57486,idx=8})

		elseif Checkbox_40P:IsCheck() then

			EBot.DropIdx=4

			table.insert(EBot.CampBuffBuy,{id=57487,idx=9})

		elseif Checkbox_50P:IsCheck() then

			EBot.DropIdx=5

			table.insert(EBot.CampBuffBuy,{id=57488,idx=10})

		end

		if VillaDamageBuffBtn:IsCheck() then

			EBot.BuyVillaDmgBuff = true

			EBot.BuyVillaLifeBuff = false

			EBot.BuyVillaBuff = true

			EBot.TentDmg = false

			if Checkbox_60:IsCheck() then

				EBot.DMGBuffIdx = 1

				EBot.VillaBuffBuy = {id=52369,idx=2}

			elseif Checkbox_90:IsCheck() then

				EBot.DMGBuffIdx = 2

				EBot.VillaBuffBuy = {id =57239,idx=5}

			elseif Checkbox_120:IsCheck() then

				EBot.DMGBuffIdx = 3

				EBot.VillaBuffBuy = {id=52372,idx=8}

			elseif Checkbox_180:IsCheck() then

				EBot.DMGBuffIdx = 4

				EBot.VillaBuffBuy = {id=57242,idx=11}

			elseif Checkbox_300:IsCheck() then

				EBot.DMGBuffIdx = 5

				EBot.VillaBuffBuy = {id=58276,idx=14}

			end

		elseif VillaLifeskillBuffBtn:IsCheck() then

			EBot.BuyVillaLifeBuff = true

			EBot.BuyVillaDmgBuff = false

			EBot.BuyVillaBuff = true

			EBot.TentDmg = false

			if LifeCheckbox_60:IsCheck() then

				EBot.LifeBuffIdx = 1

				EBot.VillaBuffBuy = {id=52370,idx=0}

			elseif LifeCheckbox_90:IsCheck() then

				EBot.LifeBuffIdx = 2

				EBot.VillaBuffBuy = {id=57240,idx=3}

			elseif LifeCheckbox_120:IsCheck() then

				EBot.LifeBuffIdx = 3

				EBot.VillaBuffBuy = {id=52373,idx=6}

			elseif LifeCheckbox_180:IsCheck() then

				EBot.LifeBuffIdx = 4

				EBot.VillaBuffBuy = {id=57243,idx=9}

			elseif LifeCheckbox_300:IsCheck() then

				EBot.LifeBuffIdx = 5

				EBot.VillaBuffBuy = {id=58267,idx=12}

			end

		else

			EBot.BuyVillaLifeBuff = false

			EBot.BuyVillaDmgBuff = false

			EBot.BuyVillaBuff = false

		end

		EBot.AutoChurch = AutoChurchBuffBtn:IsCheck()

		EBot.ChurchBuff = {}

		if Checkbox_AP:IsCheck() then

			EBot.ChurchAP = true

			table.insert(EBot.ChurchBuff,{id=58282,idx=12})

		end

		if Checkbox_DP:IsCheck() then

			EBot.ChurchDP = true

			table.insert(EBot.ChurchBuff,{id=58284,idx=14})

		end

		if Checkbox_EXP:IsCheck() then

			EBot.ChurchEXP = true

			table.insert(EBot.ChurchBuff,{id=58286,idx=16})

		end

		EBot.AutoHP = AutoHPBuffBtn:IsCheck()

		EBot.AutoDP = AutoDPBuffBtn:IsCheck()

		EBot.AutoHPAt = math.ceil(AutoHpBuffSlider:GetControlPos()*100)

		EBot.AutoDPAt = math.ceil(AutoDPBuffSlider:GetControlPos()*100)

	end

	local file = io.open(BotPath.."\\settings.json", "w")

	if file then

		local json = JSON:new()

		file:write(json:encode_pretty(EBot))

		file:close()

	end

	Proc_ShowMessage_Ack_WithOut_ChattingMessage("Bot Setting Saved")

end



function LoadSetting()

	local json = JSON:new()

	local file = io.open(BotPath.."\\settings.json", "r")

	if file then

		local content = file:read("*a")

		file:close()

		table.merge(EBot, json:decode(content))

		chatting_sendMessage('', 'Bot Setting Loaded',5,0)

	else

		file = io.open(BotPath.."\\settings.json", "w")

		if file then

			local json = JSON:new()

			file:write(json:encode_pretty(EBot))

			file:close()

		end

	end

end



function OpenTent()

	if not TentPanel then

	local _alphaSlider_Control = UI.getChildControl(Panel_ChatOption, "Slider_PanelTransparencyControl")

	local newname = "Panel_TentSetting"

	TentPanel = UI.createPanel(newname, 8192)

	TentPanel:SetSize(450, 900)

	TentPanel:SetPosX(Panel_BotSetting:GetPosX()+450)

	TentPanel:SetPosY(Panel_BotSetting:GetPosY())

	TentPanel:SetShow(true, true)

	TentPanel:SetDragEnable(true)

	TentPanel:SetIgnore(false)

	TentPanel:ActiveMouseEventEffect(true)

	TentPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

	TentPanel:getBaseTexture():setUV(setTextureUV_Func(TentPanel, 7, 6, 405, 542))

	TentPanel:setRenderTexture(TentPanel:getBaseTexture())

	TentPanel:SetAlpha(1)

	TentPanel:SetDragAll(true)

	local closeBtn = UI.createControl(__ePAUIControl_Button, TentPanel, "Btn_CloseTent")

	closeBtn:addInputEvent("Mouse_LUp", "CloseTent()")

	closeBtn:SetSize(45, 20)

	closeBtn:ActiveMouseEventEffect(true)

	closeBtn:SetPosX(390)

	closeBtn:SetPosY(7)

	closeBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

	closeBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

	closeBtn:setRenderTexture(closeBtn:getBaseTexture())

	closeBtn:SetText("Close")

	local droprateIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_SettingIcon")

    droprateIcon:SetSize(50,50)

    droprateIcon:SetPosY(60)

    droprateIcon:SetPosX(9)

    droprateIcon:ActiveMouseEventEffect(true)

    droprateIcon:SetIgnore(false)

	local shitcrap = UI.getChildControl(PaGlobal_ChatOption_All._ui.stc_selectTemplate, "CheckButton_1")

    local item = getItemEnchantStaticStatus(ItemEnchantKey(43930))

    droprateIcon:ChangeTextureInfoName("icon/" .. item:getIconPath())

    droprateIcon:SetShow(true)	

	local _checkRemainMsg = UI.getChildControl(Panel_Window_ItemMarketAlarmList_New, "CheckButton_RemainMessage")

	droprateBtn = UI.cloneControl(_checkRemainMsg,TentPanel, "DropRate_Btn")

	droprateBtn:SetText("Tent Buff")

	droprateBtn:SetPosX(droprateIcon:GetPosX()+50)

	droprateBtn:SetPosY(droprateIcon:GetPosY()+15)

	

	Checkbox_DMG = UI.cloneControl(shitcrap,TentPanel, "DMG_Btn")

	Checkbox_DMG:SetText("dmg")

	Checkbox_DMG:SetPosX(droprateIcon:GetPosX()+180)

	Checkbox_DMG:SetPosY(droprateIcon:GetPosY()+15)

	local tentdroptxt = UI.createControl(__ePAUIControl_StaticText, TentPanel, "tentdrop_txt")

	tentdroptxt:SetSize(50, 30)

	tentdroptxt:SetPosX(droprateIcon:GetPosX()+65)

	tentdroptxt:SetPosY(droprateBtn:GetPosY()+14)

	tentdroptxt:SetText("drop rate:")

	Checkbox_10P = UI.cloneControl(shitcrap,TentPanel, "DropRate_Btn10")

	Checkbox_10P:SetText("10prc")

	Checkbox_10P:SetPosX(droprateIcon:GetPosX()+50)

	Checkbox_10P:SetPosY(droprateBtn:GetPosY()+40)

	Checkbox_20P = UI.cloneControl(shitcrap,TentPanel, "DropRate_Btn20")

	Checkbox_20P:SetText("20prc")

	Checkbox_20P:SetPosX(Checkbox_10P:GetPosX()+75)

	Checkbox_20P:SetPosY(Checkbox_10P:GetPosY())

	Checkbox_30P = UI.cloneControl(shitcrap,TentPanel, "DropRate_Btn30")

	Checkbox_30P:SetText("30prc")

	Checkbox_30P:SetPosX(Checkbox_10P:GetPosX()+150)

	Checkbox_30P:SetPosY(Checkbox_10P:GetPosY())

	Checkbox_40P = UI.cloneControl(shitcrap,TentPanel, "DropRate_Btn40")

	Checkbox_40P:SetText("40prc")

	Checkbox_40P:SetPosX(Checkbox_10P:GetPosX()+225)

	Checkbox_40P:SetPosY(Checkbox_10P:GetPosY())

	Checkbox_50P = UI.cloneControl(shitcrap,TentPanel, "DropRate_Btn50")

	Checkbox_50P:SetText("50prc")

	Checkbox_50P:SetPosX(Checkbox_10P:GetPosX()+300)

	Checkbox_50P:SetPosY(Checkbox_10P:GetPosY())

	Checkbox_10P:addInputEvent("Mouse_LUp","ToggleOption1()")

	Checkbox_20P:addInputEvent("Mouse_LUp","ToggleOption2()")	

	Checkbox_30P:addInputEvent("Mouse_LUp","ToggleOption3()")	

	Checkbox_40P:addInputEvent("Mouse_LUp","ToggleOption4()")	

	Checkbox_50P:addInputEvent("Mouse_LUp","ToggleOption5()")

	Checkbox_DMG:addInputEvent("Mouse_LUp","ToggleOption0()")	

	local villaDamageBuffIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_VillaDamageBuff")

	villaDamageBuffIcon:SetSize(50, 50)

	villaDamageBuffIcon:SetPosY(droprateIcon:GetPosY()+90)

	villaDamageBuffIcon:SetPosX(9)

	villaDamageBuffIcon:ActiveMouseEventEffect(true)

	villaDamageBuffIcon:SetIgnore(false)

	local itemVillaDamage = getItemEnchantStaticStatus(ItemEnchantKey(43703)) 

	villaDamageBuffIcon:ChangeTextureInfoName("icon/" .. itemVillaDamage:getIconPath())

	villaDamageBuffIcon:SetShow(true)

	VillaDamageBuffBtn = UI.cloneControl(_checkRemainMsg, TentPanel, "VillaDamageBuff_Btn")

	VillaDamageBuffBtn:SetText("Damage Buff")

	VillaDamageBuffBtn:SetPosX(villaDamageBuffIcon:GetPosX()+50)

	VillaDamageBuffBtn:SetPosY(villaDamageBuffIcon:GetPosY()+15)

	

	Checkbox_60 = UI.cloneControl(shitcrap, TentPanel, "Timer_Btn60")

	Checkbox_60:SetText("60m")

	Checkbox_60:SetPosX(villaDamageBuffIcon:GetPosX()+50)

	Checkbox_60:SetPosY(villaDamageBuffIcon:GetPosY()+50)

	Checkbox_90 = UI.cloneControl(shitcrap, TentPanel, "Timer_Btn90")

	Checkbox_90:SetText("90m")

	Checkbox_90:SetPosX(Checkbox_60:GetPosX()+75)

	Checkbox_90:SetPosY(Checkbox_60:GetPosY())

	Checkbox_120 = UI.cloneControl(shitcrap, TentPanel, "Timer_Btn120")

	Checkbox_120:SetText("120m")

	Checkbox_120:SetPosX(Checkbox_60:GetPosX()+150)

	Checkbox_120:SetPosY(Checkbox_60:GetPosY())

	Checkbox_180 = UI.cloneControl(shitcrap, TentPanel, "Timer_Btn180")

	Checkbox_180:SetText("180m")

	Checkbox_180:SetPosX(Checkbox_60:GetPosX()+225)

	Checkbox_180:SetPosY(Checkbox_60:GetPosY())

	Checkbox_300 = UI.cloneControl(shitcrap, TentPanel, "Timer_Btn300")

	Checkbox_300:SetText("300m")

	Checkbox_300:SetPosX(Checkbox_60:GetPosX()+300)

	Checkbox_300:SetPosY(Checkbox_60:GetPosY())

	

	local villaLifeskillBuffIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_VillaLifeskillBuff")

	villaLifeskillBuffIcon:SetSize(50, 50)

	villaLifeskillBuffIcon:SetPosY(villaDamageBuffIcon:GetPosY()+90) 

	villaLifeskillBuffIcon:SetPosX(9) 

	villaLifeskillBuffIcon:ActiveMouseEventEffect(true)

	villaLifeskillBuffIcon:SetIgnore(false)

	local itemVillaLifeskill = getItemEnchantStaticStatus(ItemEnchantKey(43701))

	villaLifeskillBuffIcon:ChangeTextureInfoName("icon/" .. itemVillaLifeskill:getIconPath())

	villaLifeskillBuffIcon:SetShow(true)

	VillaLifeskillBuffBtn = UI.cloneControl(_checkRemainMsg, TentPanel, "VillaLifeskillBuff_Btn")

	VillaLifeskillBuffBtn:SetText("Lifeskill Buff")

	VillaLifeskillBuffBtn:SetPosX(villaLifeskillBuffIcon:GetPosX()+50) 

	VillaLifeskillBuffBtn:SetPosY(villaLifeskillBuffIcon:GetPosY()+15) 

	

	LifeCheckbox_60 = UI.cloneControl(shitcrap, TentPanel, "LifeTimer_Btn60")

	LifeCheckbox_60:SetText("60m")

	LifeCheckbox_60:SetPosX(villaLifeskillBuffIcon:GetPosX()+50)

	LifeCheckbox_60:SetPosY(villaLifeskillBuffIcon:GetPosY()+50)

	LifeCheckbox_90 = UI.cloneControl(shitcrap, TentPanel, "LifeTimer_Btn90")

	LifeCheckbox_90:SetText("90m")

	LifeCheckbox_90:SetPosX(LifeCheckbox_60:GetPosX()+75)

	LifeCheckbox_90:SetPosY(LifeCheckbox_60:GetPosY())

	LifeCheckbox_120 = UI.cloneControl(shitcrap, TentPanel, "LifeTimer_Btn120")

	LifeCheckbox_120:SetText("120m")

	LifeCheckbox_120:SetPosX(LifeCheckbox_60:GetPosX()+150)

	LifeCheckbox_120:SetPosY(LifeCheckbox_60:GetPosY())

	LifeCheckbox_180 = UI.cloneControl(shitcrap, TentPanel, "LifeTimer_Btn180")

	LifeCheckbox_180:SetText("180m")

	LifeCheckbox_180:SetPosX(LifeCheckbox_60:GetPosX()+225)

	LifeCheckbox_180:SetPosY(LifeCheckbox_60:GetPosY())

	LifeCheckbox_300 = UI.cloneControl(shitcrap, TentPanel, "LifeTimer_Btn300")

	LifeCheckbox_300:SetText("300m")

	LifeCheckbox_300:SetPosX(LifeCheckbox_60:GetPosX()+300)

	LifeCheckbox_300:SetPosY(LifeCheckbox_60:GetPosY())

	

	

	Checkbox_60:addInputEvent("Mouse_LUp", "ToggleVillaOption1()")

	Checkbox_90:addInputEvent("Mouse_LUp", "ToggleVillaOption2()")    

	Checkbox_120:addInputEvent("Mouse_LUp", "ToggleVillaOption3()")   

	Checkbox_180:addInputEvent("Mouse_LUp", "ToggleVillaOption4()")   

	Checkbox_300:addInputEvent("Mouse_LUp", "ToggleVillaOption5()") 

	LifeCheckbox_60:addInputEvent("Mouse_LUp", "ToggleLifeOption1()")

	LifeCheckbox_90:addInputEvent("Mouse_LUp", "ToggleLifeOption2()")    

	LifeCheckbox_120:addInputEvent("Mouse_LUp", "ToggleLifeOption3()")   

	LifeCheckbox_180:addInputEvent("Mouse_LUp", "ToggleLifeOption4()")   

	LifeCheckbox_300:addInputEvent("Mouse_LUp", "ToggleLifeOption5()")   

	VillaDamageBuffBtn:addInputEvent("Mouse_LUp", "ToggleVillaDmgBuffs()")

	VillaLifeskillBuffBtn:addInputEvent("Mouse_LUp", "ToggleVillaBuffs()")

	local autoChurchIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_AutoChurch")

	autoChurchIcon:SetSize(50, 50)

	autoChurchIcon:SetPosY(villaLifeskillBuffIcon:GetPosY()+90)  

	autoChurchIcon:SetPosX(9)

	autoChurchIcon:ActiveMouseEventEffect(true)

	autoChurchIcon:SetIgnore(false)

	local itemChurch = getItemEnchantStaticStatus(ItemEnchantKey(573))  -- Using the specific item ID for the church buff

	autoChurchIcon:ChangeTextureInfoName("icon/" .. itemChurch:getIconPath())

	autoChurchIcon:SetShow(true)

	AutoChurchBuffBtn = UI.cloneControl(_checkRemainMsg, TentPanel, "AutoChurch_Btn")

	AutoChurchBuffBtn:SetText("Auto Church Buff")

	AutoChurchBuffBtn:SetPosX(autoChurchIcon:GetPosX()+50)

	AutoChurchBuffBtn:SetPosY(autoChurchIcon:GetPosY()+15) 

	Checkbox_AP = UI.cloneControl(shitcrap, TentPanel, "ChurchBuff_AP")

	Checkbox_AP:SetText("AP")

	Checkbox_AP:SetPosX(autoChurchIcon:GetPosX()+50)

	Checkbox_AP:SetPosY(autoChurchIcon:GetPosY()+50)  

	Checkbox_AP:SetShow(true)

	Checkbox_DP = UI.cloneControl(shitcrap, TentPanel, "ChurchBuff_DP")

	Checkbox_DP:SetText("DP")

	Checkbox_DP:SetPosX(Checkbox_AP:GetPosX()+75)

	Checkbox_DP:SetPosY(Checkbox_AP:GetPosY())  

	Checkbox_DP:SetShow(true)

	Checkbox_EXP = UI.cloneControl(shitcrap, TentPanel, "ChurchBuff_EXP")

	Checkbox_EXP:SetText("EXP")

	Checkbox_EXP:SetPosX(Checkbox_AP:GetPosX()+150)

	Checkbox_EXP:SetPosY(Checkbox_AP:GetPosY())  

	Checkbox_EXP:SetShow(true)

	Checkbox_AP:addInputEvent("Mouse_LUp", "ToggleChurchAP()")

	Checkbox_DP:addInputEvent("Mouse_LUp", "ToggleChurchDP()")

	Checkbox_EXP:addInputEvent("Mouse_LUp", "ToggleChurchEXP()")

	local autoHPIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_AutoHP")

	autoHPIcon:SetSize(50, 50)

	autoHPIcon:SetPosY(autoChurchIcon:GetPosY()+90)  

	autoHPIcon:SetPosX(9)

	autoHPIcon:ActiveMouseEventEffect(true)

	autoHPIcon:SetIgnore(false)

	local itemAutoHP = getItemEnchantStaticStatus(ItemEnchantKey(576)) 

	autoHPIcon:ChangeTextureInfoName("icon/" .. itemAutoHP:getIconPath())

	autoHPIcon:SetShow(true)

	AutoHPBuffBtn = UI.cloneControl(_checkRemainMsg, TentPanel, "AutoHP_Btn")

	AutoHPBuffBtn:SetText("Auto HP Buff at HP prc: ")

	AutoHPBuffBtn:SetPosX(autoHPIcon:GetPosX()+50)

	AutoHPBuffBtn:SetPosY(autoHPIcon:GetPosY()+15)  

	AutoHpBuffSlider = UI.cloneControl(_alphaSlider_Control,TentPanel, "AutoHpBuff_Slider")

	AutoHpBuffSlider:SetInterval(100)

	AutoHpBuffSlider:SetPosX(AutoHPBuffBtn:GetPosX()-30)

	AutoHpBuffSlider:SetPosY(AutoHPBuffBtn:GetPosY()+45)

	AutoHpBuffSlider:SetShow(true)

	AutoHpBuffSlider:SetControlPos(EBot.AutoHPAt)

	local autoDPIcon = UI.createControl(__ePAUIControl_Static, TentPanel, "Static_AutoDP")

	autoDPIcon:SetSize(50, 50)

	autoDPIcon:SetPosY(autoHPIcon:GetPosY()+90) 

	autoDPIcon:SetPosX(9)  

	autoDPIcon:ActiveMouseEventEffect(true)

	autoDPIcon:SetIgnore(false)

	local itemAutoDP = getItemEnchantStaticStatus(ItemEnchantKey(733))

	autoDPIcon:ChangeTextureInfoName("icon/" .. itemAutoDP:getIconPath())

	autoDPIcon:SetShow(true)

	AutoDPBuffBtn = UI.cloneControl(_checkRemainMsg, TentPanel, "AutoDP_Btn")

	AutoDPBuffBtn:SetText("Auto DP Buff at HP prc: ")

	AutoDPBuffBtn:SetPosX(autoDPIcon:GetPosX()+50) 

	AutoDPBuffBtn:SetPosY(autoDPIcon:GetPosY()+15) 

	AutoDPBuffSlider = UI.cloneControl(_alphaSlider_Control,TentPanel, "AutoDPBuff_Slider")

	AutoDPBuffSlider:SetInterval(100)

	AutoDPBuffSlider:SetPosX(AutoDPBuffBtn:GetPosX()-30)

	AutoDPBuffSlider:SetPosY(AutoDPBuffBtn:GetPosY()+45)

	AutoDPBuffSlider:SetShow(true)

	AutoDPBuffSlider:SetControlPos(EBot.AutoDPAt)

	LoadSetting()

	droprateBtn:SetCheck(EBot.BuyCampBuff)

	if EBot.DropIdx == 1 then

		Checkbox_10P:SetCheck(true)

	elseif EBot.DropIdx == 2 then

		Checkbox_20P:SetCheck(true)

	elseif EBot.DropIdx == 3 then

		Checkbox_30P:SetCheck(true)

	elseif EBot.DropIdx == 4 then

		Checkbox_40P:SetCheck(true)

	elseif EBot.DropIdx == 5 then

		Checkbox_50P:SetCheck(true)

	end

	Checkbox_DMG:SetCheck(EBot.TentDmg)

	if EBot.DMGBuffIdx == 1 then

		Checkbox_60:SetCheck(true)

	elseif EBot.DMGBuffIdx == 2 then

		Checkbox_90:SetCheck(true)

	elseif EBot.DMGBuffIdx == 3 then

		Checkbox_120:SetCheck(true)

	elseif EBot.DMGBuffIdx == 4 then

		Checkbox_180:SetCheck(true)

	elseif EBot.DMGBuffIdx == 5 then

		Checkbox_300:SetCheck(true)

	end

	if EBot.LifeBuffIdx == 1 then

		LifeCheckbox_60:SetCheck(true)

	elseif EBot.LifeBuffIdx == 2 then

		LifeCheckbox_90:SetCheck(true)

	elseif EBot.LifeBuffIdx == 3 then

		LifeCheckbox_120:SetCheck(true)

	elseif EBot.LifeBuffIdx == 4 then

		LifeCheckbox_180:SetCheck(true)

	elseif EBot.LifeBuffIdx == 5 then

		LifeCheckbox_300:SetCheck(true)

	end

	VillaDamageBuffBtn:SetCheck(EBot.BuyVillaDmgBuff)

	VillaLifeskillBuffBtn:SetCheck(EBot.BuyVillaLifeBuff)

	AutoChurchBuffBtn:SetCheck(EBot.AutoChurch)

	Checkbox_AP:SetCheck(EBot.ChurchAP)

	Checkbox_DP:SetCheck(EBot.ChurchDP)

	Checkbox_EXP:SetCheck(EBot.ChurchEXP)

	AutoHPBuffBtn:SetCheck(EBot.AutoHP)

	AutoDPBuffBtn:SetCheck(EBot.AutoDP)

	AutoHpBuffSlider:SetControlPos(EBot.AutoHPAt)

	AutoDPBuffSlider:SetControlPos(EBot.AutoDPAt)

	end

end



function OpenBotSetting()

	local newname = "Panel_BotSetting"

	BotSettingPanel = UI.createPanel(newname, 8192)

	BotSettingPanel:SetSize(450, 900)

	BotSettingPanel:SetPosX(Panel_Widget_ServantIcon:GetPosX()+Panel_Widget_ServantIcon:GetSizeX()+450)

	BotSettingPanel:SetPosY(Panel_Widget_ServantIcon:GetPosY())

	BotSettingPanel:SetShow(true, true)

	BotSettingPanel:SetDragEnable(true)

	BotSettingPanel:SetIgnore(false)

	BotSettingPanel:ActiveMouseEventEffect(true)

	BotSettingPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

	BotSettingPanel:getBaseTexture():setUV(setTextureUV_Func(BotSettingPanel, 7, 6, 405, 542))

	BotSettingPanel:setRenderTexture(BotSettingPanel:getBaseTexture())

	BotSettingPanel:SetAlpha(1)

	BotSettingPanel:SetDragAll(true)

	local _alphaSlider_Control = UI.getChildControl(Panel_ChatOption, "Slider_PanelTransparencyControl")

	local closeBtn = UI.createControl(__ePAUIControl_Button, BotSettingPanel, "Btn_ClsBotSet")

	closeBtn:addInputEvent("Mouse_LUp", "CloseBotSetting()")

	closeBtn:SetSize(45, 20)

	closeBtn:ActiveMouseEventEffect(true)

	closeBtn:SetPosX(390)

	closeBtn:SetPosY(7)

	closeBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

	closeBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

	closeBtn:setRenderTexture(closeBtn:getBaseTexture())

	closeBtn:SetText("Close")

	local SaveBtn = UI.createControl(__ePAUIControl_Button, BotSettingPanel, "Btn_SavBotSet")

	SaveBtn:addInputEvent("Mouse_LUp", "SaveSetting()")

	SaveBtn:SetSize(45, 20)

	SaveBtn:ActiveMouseEventEffect(true)

	SaveBtn:SetPosX(340)

	SaveBtn:SetPosY(7)

	SaveBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

	SaveBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

	SaveBtn:setRenderTexture(closeBtn:getBaseTexture())

	SaveBtn:SetText("Save")

	local OpenTentBtn = UI.createControl(__ePAUIControl_Button, BotSettingPanel, "Btn_OpenTent")

	OpenTentBtn:addInputEvent("Mouse_LUp", "OpenTent()")

	OpenTentBtn:SetSize(45, 20)

	OpenTentBtn:ActiveMouseEventEffect(true)

	OpenTentBtn:SetPosX(390)

	OpenTentBtn:SetPosY(28)

	OpenTentBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

	OpenTentBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

	OpenTentBtn:setRenderTexture(closeBtn:getBaseTexture())

	OpenTentBtn:SetText("Tent")

	local scrollIcon = UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_scroll")

	scrollIcon:SetSize(50,50)

	scrollIcon:SetPosY(60)

	scrollIcon:SetPosX(9)

	scrollIcon:ActiveMouseEventEffect(true)

	scrollIcon:SetIgnore(false)

	local item = getItemEnchantStaticStatus(ItemEnchantKey(17572))

	scrollIcon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	scrollIcon:SetShow(true)

	local _checkRemainMsg = UI.getChildControl(Panel_Window_ItemMarketAlarmList_New, "CheckButton_RemainMessage")

	scrollBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "ScrollCollect_Btn")

	scrollBtn:SetText("Use Item Collect Scroll at Grinding")

	scrollBtn:SetPosX(60)

	scrollBtn:SetPosY(80)

	local shitcrap = UI.getChildControl(PaGlobal_ChatOption_All._ui.stc_selectTemplate, "CheckButton_1")

	scrollBtn_Lv1 = UI.cloneControl(shitcrap,BotSettingPanel, "ScrollCollect_Btn_Lv1")

	scrollBtn_Lv1:SetText("Lv1")

	scrollBtn_Lv1:SetPosX(85)

	scrollBtn_Lv1:SetPosY(100)

	scrollBtn_Lv2 = UI.cloneControl(shitcrap,BotSettingPanel, "ScrollCollect_Btn_Lv2")

	scrollBtn_Lv2:SetText("Lv2")

	scrollBtn_Lv2:SetPosX(150)

	scrollBtn_Lv2:SetPosY(100)

	

	SaveArtBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "SaveArt_Btn")

	SaveArtBtn:SetText("Auto Save Artifact")

	SaveArtBtn:SetPosX(215)

	SaveArtBtn:SetPosY(103)



	scrollBtn_Lv1:addInputEvent("Mouse_LUp","ToggleLv1()")

	scrollBtn_Lv2:addInputEvent("Mouse_LUp","ToggleLv2()")

	local alchemyicon = UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_alchemy")

	alchemyicon:SetSize(50,50)

	alchemyicon:SetPosY(120)

	alchemyicon:SetPosX(9)

	alchemyicon:ActiveMouseEventEffect(true)

	alchemyicon:SetIgnore(false)

	item = getItemEnchantStaticStatus(ItemEnchantKey(45352))

	alchemyicon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	alchemyicon:SetShow(true)

	AlchemyBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "AlchemyStone_Btn")

	AlchemyBtn:SetText("Use AlchemyStone at Grinding")

	AlchemyBtn:SetPosX(60)

	AlchemyBtn:SetPosY(140)

	

	FastGatherBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "FastGather_Btn")

	FastGatherBtn:SetText("Fast Gather delay:")

	FastGatherBtn:SetPosX(60)

	FastGatherBtn:SetPosY(160)

	

	GatherDelay = UI.cloneControl(_alphaSlider_Control,BotSettingPanel, "GatherDelay_Slider")

	GatherDelay:SetSize(200,5)

	GatherDelay:SetInterval(2000)

	GatherDelay:SetPosX(FastGatherBtn:GetPosX()+170)

	GatherDelay:SetPosY(FastGatherBtn:GetPosY()+22)

	GatherDelay:SetShow(true)

	GatherDelay:SetControlPos(EBot.FastGatherDelay/2000*100)

	

	local tenticon = UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_tent")

	tenticon:SetSize(50,50)

	tenticon:SetPosY(180)

	tenticon:SetPosX(9)

	tenticon:ActiveMouseEventEffect(true)

	tenticon:SetIgnore(false)

	item = getItemEnchantStaticStatus(ItemEnchantKey(49806))

	tenticon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	tenticon:SetShow(true)

	TentBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Tent_Btn")

	TentBtn:SetText("Don't Restock\n( Not recommanded if dont have enough Maid)")

	TentBtn:SetPosX(60)

	TentBtn:SetPosY(200)

	local Avoidicon = UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_Avoid")

	Avoidicon:SetSize(50,50)

	Avoidicon:SetPosY(240)

	Avoidicon:SetPosX(9)

	Avoidicon:ActiveMouseEventEffect(true)

	Avoidicon:SetIgnore(false)

	local skillKey = ToClient_getSkillKeyBySkillGroupNo(146, 1)

	local skillNo = skillKey:getSkillNo()

	local skillTypeSSW = getSkillTypeStaticStatus(skillNo)

	Avoidicon:ChangeTextureInfoName("icon/" .. skillTypeSSW:getIconPath())

	Avoidicon:SetShow(true)

	AvoidBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Avoid_Btn")

	AvoidBtn:SetText("Emergency Escape when Hp is Low")

	AvoidBtn:SetPosX(60)

	AvoidBtn:SetPosY(260)

	AvoidAtHp = UI.cloneControl(_alphaSlider_Control,BotSettingPanel, "AvoidHp_Slider")

	AvoidAtHp:SetInterval(100)

	AvoidAtHp:SetPosX(AvoidBtn:GetPosX()-30)

	AvoidAtHp:SetPosY(AvoidBtn:GetPosY()+45)

	AvoidAtHp:SetShow(true)

	AvoidAtHp:SetControlPos(EBot.AvoidLowHpPrc)

	local hpprc = math.floor(AvoidAtHp:GetControlPos()*100)

	AvoidBtn:SetText("Emergency Escape at Hp precent:"..hpprc)

	SwapAtPDIcon =  UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_SwapAtPDicon")

	SwapAtPDIcon:ChangeTextureInfoName("New_UI_Common_forLua/Widget/worldmap/worldmap_icon_04.dds")

	SwapAtPDIcon:getBaseTexture():setUV(setTextureUV_Func(SwapAtPDIcon, 0, 203, 167, 398))

	SwapAtPDIcon:setRenderTexture(SwapAtPDIcon:getBaseTexture())

	SwapAtPDIcon:SetSize(50,50)

	SwapAtPDIcon:SetPosY(AvoidBtn:GetPosY()+60)

	SwapAtPDIcon:SetPosX(9)

	SwapAtPDIcon:ActiveMouseEventEffect(true)

	SwapAtPDIcon:SetIgnore(false)

	SwapAtPDBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "SwapAtPD_Btn")

	SwapAtPDBtn:SetText("Swap channel if detect other players")

	SwapAtPDBtn:SetPosX(60)

	SwapAtPDBtn:SetPosY(SwapAtPDIcon:GetPosY()+15)

	SwapChannlePDtimer = UI.cloneControl(_alphaSlider_Control,BotSettingPanel, "PDTimer_Slider")

	SwapChannlePDtimer:SetInterval(300)

	SwapChannlePDtimer:SetPosX(SwapAtPDBtn:GetPosX()-30)

	SwapChannlePDtimer:SetPosY(SwapAtPDBtn:GetPosY()+45)

	SwapChannlePDtimer:SetShow(true)

	SwapChannlePDtimer:SetControlPos(EBot.SwapChannelAtPDTimer)

	

	GoCharSelectBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "GoCharSelect_Btn")

	GoCharSelectBtn:SetText("Go back character select if channel swap in CD")

	GoCharSelectBtn:SetPosX(60)

	GoCharSelectBtn:SetPosY(SwapAtPDBtn:GetPosY()+45)

	

	OverWriteGrindIcon = UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_OverWriteicon")

	OverWriteGrindIcon:SetSize(50,50)

	OverWriteGrindIcon:SetPosY(SwapAtPDBtn:GetPosY()+60)

	OverWriteGrindIcon:SetPosX(9)

	OverWriteGrindIcon:ActiveMouseEventEffect(true)

	OverWriteGrindIcon:SetIgnore(false)

	item = getItemEnchantStaticStatus(ItemEnchantKey(750127))

	OverWriteGrindIcon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	OverWriteGrindIcon:SetShow(true)

	OverWriteGrindBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "OverWriteGrind_Btn")

	OverWriteGrindBtn:SetText("Over write Grinding/Gathering radius")

	OverWriteGrindBtn:SetPosX(60)

	OverWriteGrindBtn:SetPosY(OverWriteGrindIcon:GetPosY()+15)

	OverWriteGrindRadius = UI.cloneControl(_alphaSlider_Control,BotSettingPanel, "OverWriteRadius_Slider")

	OverWriteGrindRadius:SetInterval(30)

	OverWriteGrindRadius:SetPosX(OverWriteGrindBtn:GetPosX()-30)

	OverWriteGrindRadius:SetPosY(OverWriteGrindBtn:GetPosY()+45)

	OverWriteGrindRadius:SetShow(true)

	TentBuffIcon =  UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_TentBufficon")

	item = getItemEnchantStaticStatus(ItemEnchantKey(43929))

	TentBuffIcon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	TentBuffIcon:SetSize(50,50)

	TentBuffIcon:SetPosY(OverWriteGrindBtn:GetPosY()+60)

	TentBuffIcon:SetPosX(9)

	TentBuffIcon:ActiveMouseEventEffect(true)

	TentBuffIcon:SetIgnore(false)

	TentBuffBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "TentBuff_Btn")

	TentBuffBtn:SetText("Auto apply tent buff")

	TentBuffBtn:SetPosX(60)

	TentBuffBtn:SetPosY(TentBuffIcon:GetPosY()+15)

	MinimizeBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Minize_Btn")

	MinimizeBtn:SetText("Minimize Game")

	MinimizeBtn:SetPosX(270)

	MinimizeBtn:SetPosY(TentBuffIcon:GetPosY()+15)

	NovaBurnBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "NovaBurn_Btn")

	NovaBurnBtn:SetText("Nova use BurnLife")

	NovaBurnBtn:SetPosX(270)

	NovaBurnBtn:SetPosY(MinimizeBtn:GetPosY()+20)

	TpPriorityBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "TpPriority_Btn")

	TpPriorityBtn:SetText("Teleport to priorty mob")

	TpPriorityBtn:SetPosX(60)

	TpPriorityBtn:SetPosY(MinimizeBtn:GetPosY()+20)

	RandomPathBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "TRandomPath_Btn")

	RandomPathBtn:SetText("Randomize pathing")

	RandomPathBtn:SetPosX(60)

	RandomPathBtn:SetPosY(TpPriorityBtn:GetPosY()+20)

	

	DbgSkillBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "DbgSkill_Btn")

	DbgSkillBtn:SetText("Debug skill info")

	DbgSkillBtn:SetPosX(270)

	DbgSkillBtn:SetPosY(TpPriorityBtn:GetPosY()+20)



	LootIcon =  UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_Looticon")

	item = getItemEnchantStaticStatus(ItemEnchantKey(46894))

	LootIcon:ChangeTextureInfoName("icon/" .. item:getIconPath())

	LootIcon:SetSize(50,50)

	LootIcon:SetPosY(TentBuffBtn:GetPosY()+60)

	LootIcon:SetPosX(9)

	LootIcon:ActiveMouseEventEffect(true)

	LootIcon:SetIgnore(false)

	LootBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Loot_Btn")

	LootBtn:SetText("Packet Loot\n<PAColor0xFFFF4500>Bot loot via packet, use at your own risk.<PAOldColor>")

	LootBtn:SetPosX(60)

	LootBtn:SetPosY(LootIcon:GetPosY()+15)

	LootTpBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "LootTp_Btn")

	LootTpBtn:SetText("Corpses Loot\n<PAColor0xFFFF4500>Bot Tp at corpses to loot, use at your own risk.<PAOldColor>")

	LootTpBtn:SetPosX(60)

	LootTpBtn:SetPosY(LootBtn:GetPosY()+40)

	InvestIcon =  UI.createControl(__ePAUIControl_Static, BotSettingPanel, "Static_InvestIcon")

	InvestIcon:ChangeTextureInfoName("new_ui_common_forlua/widget/worldmap/WorldMap_Etc_05.dds")

	InvestIcon:getBaseTexture():setUV(setTextureUV_Func(InvestIcon, 1, 253, 20, 272))

	InvestIcon:setRenderTexture(InvestIcon:getBaseTexture())

	InvestIcon:SetSize(50,50)

	InvestIcon:SetPosY(LootBtn:GetPosY()+60)

	InvestIcon:SetPosX(9)

	InvestIcon:ActiveMouseEventEffect(true)

	InvestIcon:SetIgnore(false)

	InvestBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Invest_Btn")

	InvestBtn:SetText("Auto Invest Node Id:")

	InvestBtn:SetPosX(60)

	InvestBtn:SetPosY(InvestIcon:GetPosY()+15)

	local inputtemp = UI.getChildControl(PaGlobal_MessageBox_Edit_All._ui.stc_bg, "Edit_ItemName")

	MyInvestNodeID = UI.cloneControl(inputtemp,BotSettingPanel, "invest_Nodeid")

	MyInvestNodeID:SetSize(80,35)

	MyInvestNodeID:SetPosX(InvestBtn:GetPosX()+180)

	MyInvestNodeID:SetPosY(InvestBtn:GetPosY()-10)

	MyInvestNodeName = UI.createControl(__ePAUIControl_StaticText, BotSettingPanel, "Node_Name")

	MyInvestNodeName:SetSize(130, 30)

	MyInvestNodeName:SetPosX(MyInvestNodeID:GetPosX()+50)

	MyInvestNodeName:SetPosY(MyInvestNodeID:GetPosY())

	MyInvestNodeName:SetText("")

	

	TpHeightSlider = UI.cloneControl(_alphaSlider_Control,BotSettingPanel, "TpHeight_Slider")

	TpHeightSlider:SetInterval(600)

	TpHeightSlider:SetPosX(InvestIcon:GetPosX())

	TpHeightSlider:SetPosY(InvestIcon:GetPosY()+65)

	TpHeightSlider:SetShow(true)

	TpHeightSlider:SetControlPos(EBot.TpAddtionH/600*100)

	TpHeightTxt = UI.createControl(__ePAUIControl_StaticText, BotSettingPanel, "TpHeight_Txt")

	TpHeightTxt:SetSize(130, 30)

	TpHeightTxt:SetPosX(TpHeightSlider:GetPosX()+65)

	TpHeightTxt:SetPosY(TpHeightSlider:GetPosY()-25)

	TpHeightTxt:SetText("Additional Height Tp to mob: ")

	

	TpOnStuckBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "TpStuck_Btn")

	TpOnStuckBtn:SetText("Teleport when get stucked during walk")

	TpOnStuckBtn:SetPosX(60)

	TpOnStuckBtn:SetPosY(InvestBtn:GetPosY()+75)

	AutoReviveBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "Revive_Btn")

	AutoReviveBtn:SetText("Auto revive and swap channel after died")

	AutoReviveBtn:SetPosX(60)

	AutoReviveBtn:SetPosY(TpOnStuckBtn:GetPosY()+75)

	AutoEscapeBtn = UI.cloneControl(_checkRemainMsg,BotSettingPanel, "AutoEscape_Btn")

	AutoEscapeBtn:SetText("Auto escape if stuck in water")

	AutoEscapeBtn:SetPosX(60)

	AutoEscapeBtn:SetPosY(AutoReviveBtn:GetPosY()+60)

	local textTitle = UI.createControl(__ePAUIControl_StaticText, BotSettingPanel, "title")

	textTitle:SetSize(300, 30)

	textTitle:SetPosX(5)

	textTitle:SetPosY(10)

	local userid = getSelfPlayer():get():getUserNo()

	textTitle:SetText("<PAColor0xFFFFFF00>\nETH BDO bot setting     Userid:  "..tonumber(tostring(userid)).."\nGrinding\n=================================================<PAOldColor>")

	textTitle:SetTextHorizonLeft()

	LoadSetting()

	SaveArtBtn:SetCheck(EBot.SaveArtific)

	if EBot.ItemCollectScrollLv == 1 then

		scrollBtn_Lv1:SetCheck(true)

	elseif EBot.ItemCollectScrollLv == 2 then

		scrollBtn_Lv2:SetCheck(true)

	end

	FastGatherBtn:SetCheck(EBot.FastGather)

	GatherDelay:SetControlPos(EBot.FastGatherDelay/2000*100)

	scrollBtn:SetCheck(EBot.UseItemCollectScroll)

	AlchemyBtn:SetCheck(EBot.UseAlchemyStone)

	TentBtn:SetCheck(EBot.DontRestock)

	AvoidBtn:SetCheck(EBot.AvoidLowHp)

	if EBot.AvoidLowHpPrc then

		AvoidAtHp:SetControlPos(EBot.AvoidLowHpPrc)

		local hpprc = math.ceil(AvoidAtHp:GetControlPos()*100)

		AvoidBtn:SetText("Emergency Escape at Hp precent:"..hpprc)

	end

	if EBot.SwapChannelAtPDTimer then

		SwapChannlePDtimer:SetControlPos(EBot.SwapChannelAtPDTimer/300*100)

		SwapAtPDBtn:SetText("Swap channel if player detected for"..EBot.SwapChannelAtPDTimer.." sec")

	end

	SwapAtPDBtn:SetCheck(EBot.SwapChannelAtPD)

	OverWriteGrindBtn:SetCheck(EBot.OverWriteGrindRange)

	if EBot.OverWriteGrindRangeRadius then

		OverWriteGrindRadius:SetControlPos(EBot.OverWriteGrindRangeRadius/30*100)

	end

	LootBtn:SetCheck(EBot.DoLoot)

	LootTpBtn:SetCheck(EBot.DoLootTp)

	TentBuffBtn:SetCheck(EBot.TentBuff)

	MinimizeBtn:SetCheck(EBot.MiniMize)

	AutoReviveBtn:SetCheck(EBot.ReviveSwapChannel)

	AutoEscapeBtn:SetCheck(EBot.EscapeAtSwim)

	AutoEscapeBtn:SetCheck(EBot.EscapeAtSwim)

	InvestBtn:SetCheck(EBot.InvestNode)

	TpOnStuckBtn:SetCheck(EBot.TpOnStuck)

	TpOnStuckBtn:SetCheck(EBot.TpOnStuck)

	NovaBurnBtn:SetCheck(EBot.NovaBurnLife)

	TpPriorityBtn:SetCheck(EBot.TpPriorityMob)

	RandomPathBtn:SetCheck(EBot.RandomPath)

	DbgSkillBtn:SetCheck(EBot.DbgSkill)

	GoCharSelectBtn:SetCheck(EBot.GoCharSelectIfSwapCD)

	local ivid = tonumber(EBot.InvestNodeId)

	if ivid then

		MyInvestNodeID:SetText(ivid)

		local nodeName = ToClient_GetNodeNameByWaypointKey(ivid)

		if nodeName then

			MyInvestNodeName:SetText(nodeName)

		end

	end

end

local gatherT = nil

function ShowBotSetting()

	if EBot.FastGather then

		if isCollectingAction() then

			if not gatherT then

				gatherT = GetTime()

			else

				if GetTime() - gatherT >= EBot.FastGatherDelay then

					getSelfPlayer():setActionChart('WAIT')

					gatherT = nil

				end

			end

		else

			gatherT = nil

		end

	end

	if not needShowSetting then

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F6) then

			needShowSetting = true

		end

	else

		if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F6) then

			if not BotSettingPanel then

				OpenBotSetting()

			else

				CloseBotSetting()

			end

			needShowSetting = false

		end

	end

	if BotSettingPanel then

		if AvoidBtn:IsCheck() then

			AvoidAtHp:SetInterval(100)

			AvoidAtHp:SetPosX(AvoidBtn:GetPosX()-30)

			AvoidAtHp:SetPosY(AvoidBtn:GetPosY()+45)

			AvoidAtHp:SetShow(true)

			local hpprc = math.ceil(AvoidAtHp:GetControlPos()*100)

			AvoidBtn:SetText("Emergency Escape at Hp precent:"..hpprc)

		else

			if AvoidAtHp then

				AvoidAtHp:SetShow(false)

			end

		end

		if SwapAtPDBtn:IsCheck() then

			SwapChannlePDtimer:SetShow(true)

			local Pdtimer = math.ceil(SwapChannlePDtimer:GetControlPos()*300)

			SwapAtPDBtn:SetText("Swap channel if player detected for "..Pdtimer.." sec\nDont recommand turn this off.\nYou could get banned if get reported by players")

		else

			local Pdtimer = math.ceil(SwapChannlePDtimer:GetControlPos()*300)

			SwapAtPDBtn:SetText("Swap channel if player detected for "..Pdtimer.." sec\n<PAColor0xFFFF4500>Turn this off at your own risk.\nYou could get banned if get reported by players<PAOldColor>")

			SwapChannlePDtimer:SetShow(false)

		end

		if OverWriteGrindBtn:IsCheck() then

			OverWriteGrindRadius:SetShow(true)

			local overwriteR = math.ceil(OverWriteGrindRadius:GetControlPos()*30)

			OverWriteGrindBtn:SetText("Over write Grinding/Gathering radius for "..overwriteR.." yard\n<PAColor0xFFFF4500>It could cause stuck if set it too big\nrecommand 10-12<PAOldColor>")

		else

			OverWriteGrindRadius:SetShow(false)

		end

		local gatherTimer = math.ceil(GatherDelay:GetControlPos()*2000)

		FastGatherBtn:SetText("Fast Gather delay:<PAColor0xFF00FF00>"..gatherTimer.."<PAOldColor> ms")

		local addH = math.ceil(TpHeightSlider:GetControlPos()*600)

		TpHeightTxt:SetText("Additional Height Tp to mob:"..addH.." yard")

		local ivid = tonumber(MyInvestNodeID:GetText())

		if ivid then

			local nodeName = ToClient_GetNodeNameByWaypointKey(ivid)

			if nodeName then

				MyInvestNodeName:SetText(nodeName)

			end

		end

	end

	if TentPanel then

		local hpprc = math.ceil(AutoHpBuffSlider:GetControlPos()*100)

		AutoHPBuffBtn:SetText("Auto HP Buff at HP prc: "..hpprc)

		hpprc = math.ceil(AutoDPBuffSlider:GetControlPos()*100)

		AutoDPBuffBtn:SetText("Auto DP Buff at HP prc: "..hpprc)

	end

end



function ShowBagAndBuff()

	if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F12) then

		ToClient_excuteReloadUI()

	end

	if not shitpressed1 then

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F8) then

			shitpressed1 = true

		end

	else

		if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F8) then

			needToShowShit1 = true

			shitpressed1 = false

		end

	end

	if not shitpressed2 then

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F9) then

			shitpressed2 = true

		end

	else

		if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F9) then

			needToShowShit2 = true

			shitpressed2 = false

		end

	end

	if needToShowShit2 then

		RecorderManager()

		needToShowShit2 = false

	end

	if needToShowShit1 then

		if not dbginfoPanel then

			local newname = "Panel_Dbginfo"

			dbginfoPanel = UI.createPanel(newname, 8192)

			dbginfoPanel:SetSize(600, 600)

			dbginfoPanel:SetPosX(30)

			dbginfoPanel:SetPosY(200)

			dbginfoPanel:SetShow(true, true)

			dbginfoPanel:SetDragEnable(true)

			dbginfoPanel:SetIgnore(false)

			dbginfoPanel:ActiveMouseEventEffect(true)

			dbginfoPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

			dbginfoPanel:getBaseTexture():setUV(setTextureUV_Func(dbginfoPanel, 7, 6, 405, 542))

			dbginfoPanel:setRenderTexture(dbginfoPanel:getBaseTexture())

			dbginfoPanel:SetAlpha(1)

			dbginfoPanel:SetDragAll(true)

			local closeBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_Cls")

			closeBtn:addInputEvent("Mouse_LUp", "CloseDebug()")

			closeBtn:SetSize(45, 20)

			closeBtn:ActiveMouseEventEffect(true)

			closeBtn:SetPosX(390)

			closeBtn:SetPosY(7)

			closeBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			closeBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

			closeBtn:setRenderTexture(closeBtn:getBaseTexture())

			closeBtn:SetText("Close")

			local settingBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_set")

			settingBtn:addInputEvent("Mouse_LUp", "OpenBotSetting()")

			settingBtn:SetSize(45, 20)

			settingBtn:ActiveMouseEventEffect(true)

			settingBtn:SetPosX(530)

			settingBtn:SetPosY(7)

			settingBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			settingBtn:getBaseTexture():setUV(setTextureUV_Func(settingBtn, 1, 131, 86, 153))

			settingBtn:setRenderTexture(settingBtn:getBaseTexture())

			settingBtn:SetText("Setting")

			textTitle = UI.createControl(__ePAUIControl_StaticText, dbginfoPanel, "title")

			textTitle:SetSize(300, 30)

			textTitle:SetPosX(5)

			textTitle:SetPosY(2)

			textTitle:SetText("<PAColor0xFFFFFF00>\nDebug Panel<PAOldColor>")

			textTitle:SetTextHorizonLeft()

			local bagBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_Rst")

			bagBtn:addInputEvent("Mouse_LUp", "GetBagInfo()")

			bagBtn:SetSize(45, 20)

			bagBtn:ActiveMouseEventEffect(true)

			bagBtn:SetPosX(340)

			bagBtn:SetPosY(7)

			bagBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			bagBtn:getBaseTexture():setUV(setTextureUV_Func(bagBtn, 1, 131, 86, 153))

			bagBtn:setRenderTexture(bagBtn:getBaseTexture())

			bagBtn:SetText("Bag")

			local buffBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_Buff")

			buffBtn:addInputEvent("Mouse_LUp", "GetBuff()")

			buffBtn:SetSize(45, 20)

			buffBtn:ActiveMouseEventEffect(true)

			buffBtn:SetPosX(290)

			buffBtn:SetPosY(7)

			buffBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			buffBtn:getBaseTexture():setUV(setTextureUV_Func(buffBtn, 1, 131, 86, 153))

			buffBtn:setRenderTexture(buffBtn:getBaseTexture())

			buffBtn:SetText("Buff")

			local skillBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_Skill")

			skillBtn:addInputEvent("Mouse_LUp", "GetSkill()")

			skillBtn:SetSize(45, 20)

			skillBtn:ActiveMouseEventEffect(true)

			skillBtn:SetPosX(240)

			skillBtn:SetPosY(7)

			skillBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			skillBtn:getBaseTexture():setUV(setTextureUV_Func(buffBtn, 1, 131, 86, 153))

			skillBtn:setRenderTexture(buffBtn:getBaseTexture())

			skillBtn:SetText("Skill")

			local ActorBtn = UI.createControl(__ePAUIControl_Button, dbginfoPanel, "Btn_Actor")

			ActorBtn:addInputEvent("Mouse_LUp", "GetEntity()")

			ActorBtn:SetSize(45, 20)

			ActorBtn:ActiveMouseEventEffect(true)

			ActorBtn:SetPosX(190)

			ActorBtn:SetPosY(7)

			ActorBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			ActorBtn:getBaseTexture():setUV(setTextureUV_Func(buffBtn, 1, 131, 86, 153))

			ActorBtn:setRenderTexture(buffBtn:getBaseTexture())

			ActorBtn:SetText("Actor")

			dbgText = UI.createControl(__ePAUIControl_StaticText, dbginfoPanel, "dtxt")

			dbgText:SetPosY(50)

			dbgText:SetPosX(9)

			dbgText:SetSize(190, 60)

			dbgText:SetTextVerticalTop()

			dbgText:SetTextHorizonLeft()

			local class = getSelfPlayer():getClassType()

			dbgText:SetText("Current Class:"..class)

		else

			CloseDebug()

		end

		needToShowShit1 = false

	end

	if not BeginRecord then

		BeginRecordT = nil

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "ShowBagAndBuff")

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "ShowBotSetting")

registerEvent("FromClient_LuaTimer_UpdatePerFrame","ZoomHack")

LoadSetting()

]])

Dolua(code)

end



function AutoInvestNode()

	local code = [[

local investTick = GetTime()

function NodeInvestor()

	if EBot.InvestNode then

		if GetTime() - investTick >= 10000 then

			local id = EBot.InvestNodeId

			if tonumber(id) then

				local max = ToClient_GetNodeMaxLevel()

				local lv = ToClient_GetNodeLevel(id)

				if lv then

					if  lv < max then

						--InvestNodeLevelNumpad(id)

						for i= 0,100 do

							local characterData = getCharacterDataByIndex(i)

							if characterData then

								local Wp = ToClient_getWpInCharacterDataList(i)

								if Wp >= 10 then

									ToClient_RequestIncreaseExperienceNodeByCharacterIndex(id,i,(math.floor(Wp/10)*10))

									break

								end

							end

						end

					end

				end

			end

			investTick = GetTime()

		end

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "NodeInvestor")

]]

Dolua(code)

end



function ShowLootTrack()

	local code = string.format([[

local refreshT,refreshT2,refreshT3 = GetTime(),0,0

local renewT = 0

local shitpressed = false

local needToShowShit = false

local str2 = getItemEnchantStaticStatus(ItemEnchantKey(1)):getName()

LootTrackPanel,LootTrackText = nil,nil

local textTitle = nil

local displayLoot = {}

function CloseLootTracker()

	LootTrackPanel:SetShow(false,false)

	UI.deletePanel("Panel_LootTracker")

	LootTrackPanel = nil

	displayLoot = {}

	renewT = 0

end

function ResetLoot()

	for i =1,#displayLoot do

		if displayLoot[i].icon then displayLoot[i].icon:SetShow(false) end

		if displayLoot[i].str then displayLoot[i].str:SetShow(false) end

	end

	displayLoot = {}

	LootLogList = {}

	LootTrackerTimer = GetTime()

end

function SaveLootLog()

	if GetTime() - refreshT3 >= 1000 then

		local file = io.open(BotPath.."\\lootlog.json", "w")

		if file then

			local json = JSON:new()

			file:write(json:encode_pretty(LootLogList))

			file:close()

		end

		refreshT3 = GetTime()

	end

end

function GetTradePrice()

	local needfastsync = false

	for i =1,#LootLogList do

		if LootLogList[i].Trade == true then

			local itemSSW = getItemEnchantStaticStatus(ItemEnchantKey(LootLogList[i].id))

			PaGlobalFunc_MarketPlace_ShowToolTip(itemSSW, control, true)

			Panel_Tooltip_Item_hideTooltip()

			local tradeInfo_Value = UI.getChildControl(Panel_Tooltip_Item, "StaticText_TradePriceValue")

			if tradeInfo_Value then

				local mkprice = extractNumber(tradeInfo_Value:GetText())

				if type(mkprice) =="number" then

					LootLogList[i].MarketTotal =mkprice*LootLogList[i].count

				end

			end

			if LootLogList[i].MarketTotal == 0 then

				needfastsync = true

			end

		end

	end

	if needfastsync then

		renewT = GetTime() - 30100

	else

		renewT = GetTime()

	end

end

function ShowLootTrack()

	if not shitpressed then

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F10) then

			shitpressed = true

		end

	else

		if not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and not isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F10) then

			needToShowShit = true

			GetTradePrice()

			shitpressed = false

		end

	end

	if GetTime() - refreshT >= 500 then

		if #LootLogList > 0 then

			for i =1,#LootLogList do

				LootLogList[i].total=LootLogList[i].price*LootLogList[i].count

			end

		end

		refreshT = GetTime()

	end

	if needToShowShit then

		if not LootTrackPanel then

			local newname = "Panel_LootTracker"

			LootTrackPanel = UI.createPanel(newname, 8192)

			LootTrackPanel:SetSize(650, 650)

			LootTrackPanel:SetPosX(30)

			LootTrackPanel:SetPosY(200)

			LootTrackPanel:SetShow(true, true)

			LootTrackPanel:SetDragEnable(true)

			LootTrackPanel:SetIgnore(false)

			LootTrackPanel:ActiveMouseEventEffect(true)

			LootTrackPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

			LootTrackPanel:getBaseTexture():setUV(setTextureUV_Func(LootTrackPanel, 7, 6, 405, 542))

			LootTrackPanel:setRenderTexture(LootTrackPanel:getBaseTexture())

			LootTrackPanel:SetAlpha(1)

			LootTrackPanel:SetDragAll(true)

			local closeBtn = UI.createControl(__ePAUIControl_Button, LootTrackPanel, "Btn_Cls")

			closeBtn:addInputEvent("Mouse_LUp", "CloseLootTracker()")

			closeBtn:SetSize(45, 20)

			closeBtn:ActiveMouseEventEffect(true)

			closeBtn:SetPosX(390)

			closeBtn:SetPosY(7)

			closeBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			closeBtn:getBaseTexture():setUV(setTextureUV_Func(closeBtn, 1, 131, 86, 153))

			closeBtn:setRenderTexture(closeBtn:getBaseTexture())

			closeBtn:SetText("Close")

			textTitle = UI.createControl(__ePAUIControl_StaticText, LootTrackPanel, "title")

			textTitle:SetSize(300, 30)

			textTitle:SetPosX(5)

			textTitle:SetPosY(2)

			textTitle:SetText("<PAColor0xFF0099CC>\nLoot Tracker<PAOldColor>")

			textTitle:SetTextHorizonLeft()

			local rstBtn = UI.createControl(__ePAUIControl_Button, LootTrackPanel, "Btn_Rst")

			rstBtn:addInputEvent("Mouse_LUp", "ResetLoot()")

			rstBtn:SetSize(45, 20)

			rstBtn:ActiveMouseEventEffect(true)

			rstBtn:SetPosX(340)

			rstBtn:SetPosY(7)

			rstBtn:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Buttons.dds")

			rstBtn:getBaseTexture():setUV(setTextureUV_Func(rstBtn, 1, 131, 86, 153))

			rstBtn:setRenderTexture(rstBtn:getBaseTexture())

			rstBtn:SetText("Reset")

			LootTrackText = UI.createControl(__ePAUIControl_StaticText, LootTrackPanel, "dtxt")

			LootTrackText:SetPosY(50)

			LootTrackText:SetPosX(9)

			LootTrackText:SetSize(190, 60)

			LootTrackText:SetTextVerticalTop()

			LootTrackText:SetTextHorizonLeft()

			LootTrackText:SetText("")

		else

			CloseLootTracker()

		end

		needToShowShit = false

	end

	if LootTrackPanel then

		if GetTime() - refreshT2 >= 500 then

			local BotRunningTime = (GetTime()-LootTrackerTimer)/1000

			local seconds = math.floor(math.fmod(BotRunningTime, 60))

			local min = math.floor(BotRunningTime/60)

			local hour = math.floor(min/60) 

			local day = math.floor(hour/24)

			local str = ""

			if tonumber(seconds) > 0 and tonumber(seconds) < 60 then

				str = ""..seconds.."sec" ..str

			end

			if tonumber(min - hour*60)>0 and tonumber(min - hour*60)<60 then

				str = ""..(min - hour*60).."min"..str

			end

			if tonumber(hour - day*24)>0 and tonumber(hour - day*60)<24 then

				str = (hour - day*24).."hour"..str

			end

			if tonumber(day) > 0 then

				str = day.."day"..str

			end

			local str ="<PAColor0xFF0099CC>\n\n\n\nLootTracker Been running for:<PAOldColor>".."<PAColor0xFFFF0000>"..str.."<PAOldColor>"

			local silversum,sliversumwithmarket = 0,0

			for i =1,#LootLogList do

				local b =LootLogList[i]

				silversum = silversum + b.total

				sliversumwithmarket = sliversumwithmarket + b.MarketTotal

			end

			local silverpersec = (silversum+sliversumwithmarket)/math.floor(BotRunningTime)

			str = str.."\n".."Marketplace Silver:"..tostring(makeDotMoney(sliversumwithmarket)).." ".."    Total Silver:"..tostring(makeDotMoney(silversum+sliversumwithmarket)).."\n"..str2.."/Hour:<PAColor0xFFFFFF00>"..tostring(makeDotMoney(math.floor(silverpersec*3600))).."<PAOldColor>\n=================================================\n"

			textTitle:SetText(str)

			if #displayLoot ~= #LootLogList then

				for i =1,(#LootLogList-#displayLoot) do

					table.insert(displayLoot,{icon=nil,str=nil})

				end

			end

			for i =1,#LootLogList do

				local b =LootLogList[i]

				silversum = silversum + b.total

				sliversumwithmarket = sliversumwithmarket + b.MarketTotal

				local itemstr = ""

				local item = getItemEnchantStaticStatus(ItemEnchantKey(LootLogList[i].id))

				local name = item:getName()

				local itemtype = item:getItemType()

				local avg = ""

				if itemtype == 17 or b.id == 721048 or b.id == 721003 or b.id == 16001 then avg = "  Avg:"..tostring(AvgCount(b.count,BotRunningTime)).."/hour" end

				if not b.Trade then

					if b.id ~= 1 then

						itemstr = "x"..b.count.." "..name.."  "..str2..":"..tostring(makeDotMoney(b.total))..avg

					else

						itemstr = "x"..b.count.." "..name.."  "..str2..":"..tostring(makeDotMoney(b.count))

					end

				else

					local mprice = tostring(makeDotMoney(b.MarketTotal))

					if mprice == "0" then

						mprice = "Syncing..."

					end

					itemstr = "x"..b.count.." "..name.."  "..str2..":"..tostring(makeDotMoney(b.total)).."      MarketTotal:"..mprice..avg

				end

				if not displayLoot[i].icon then

					displayLoot[i].icon = UI.createControl(__ePAUIControl_Static, LootTrackPanel, "Static_"..b.id)

					displayLoot[i].icon:SetSize(30,30)

					displayLoot[i].icon:SetPosY(35*i+50)

					displayLoot[i].icon:SetPosX(9)

					displayLoot[i].icon:ActiveMouseEventEffect(true)

					displayLoot[i].icon:SetIgnore(false)

					local item = getItemEnchantStaticStatus(ItemEnchantKey(b.id))

					displayLoot[i].icon:ChangeTextureInfoName("icon/" .. item:getIconPath())

					displayLoot[i].icon:SetShow(true)

					displayLoot[i].str:SetText(itemstr)

				else

					if not displayLoot[i].str then

						displayLoot[i].str = UI.createControl(__ePAUIControl_StaticText, LootTrackPanel, "dtxt"..b.id)

						displayLoot[i].str:SetPosY(displayLoot[i].icon:GetPosY()+5)

						displayLoot[i].str:SetPosX(displayLoot[i].icon:GetPosX()+35)

						displayLoot[i].str:SetSize(400, 60)

						displayLoot[i].str:SetTextVerticalTop()

						displayLoot[i].str:SetTextHorizonLeft()

						displayLoot[i].str:SetText(itemstr)

						displayLoot[i].str:SetShow(true)

					else

						displayLoot[i].str:SetText(itemstr)

					end

				end

			end

			refreshT2 = GetTime()

		end

		if GetTime() - renewT >= 30000 then

			GetTradePrice()

		end

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "ShowLootTrack")

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "SaveLootLog")

]])

Dolua(code)

end



function MemoShit()

	--PaGlobal_Memo_All:open()

	if LootLogList then

		if #LootLogList > 0 then

			HandleEventLUp_Memo_Main_All_MemoRemoveAll()

			messageBox_YesButtonUp()

			local memoInfo = ToClient_addMemo()

			local newId = memoInfo:getId()

			PaGlobal_Memo_All._currentFocusId = newId

			PaGlobal_Memo_All._ui._List2:getElementManager():pushKey(toInt64(0, newId))

			PaGlobal_Memo_All:createStickyMemoWrapper(newId)

			if Panel_Window_Memo_Main_All:GetShow() then

				PaGlobal_Memo_All:StickySetDefaultPos(newId)

			end

			PaGlobal_Memo_All:ListUpdate()

			--HandleEventLUp_Memo_Main_All_ListClose()

			local stickyMemo = PaGlobal_Memo_All._stickyMemoList[newId]

			local str = ""

			local silversum,sliversumwithmarket = 0,0

			for i =1,#LootLogList do

				local b =LootLogList[i]

				silversum = silversum + b.total

				sliversumwithmarket = sliversumwithmarket + b.MarketTotal

				if not b.Trade then

					if b.id ~= 1 then

						str =str..b.name.."x"..b.count.."      Silver:"..b.total.."\n"

					else

						str =str..b.name.."x"..b.count.."      Silver:"..b.count.."\n"

					end

				else

					str =str..b.name.."x"..b.count.."      Silver:"..b.total.."      MarketTotal:"..b.MarketTotal.."\n"

				end

			end

			str = str.."Total Silver:"..silversum.."\n".."Total Silver with Marketplace:"..sliversumwithmarket

			local currentEdit = stickyMemo._ui._MultiLineText:SetEditText(str)

			HandleEventLUp_Memo_Main_All_MemoSave(2,newid)

		end

	end

end



function GetAimTg()

	local tgKeyRaw=  getSelfPlayer():get():getCrosshairHitedActorKeyRaw()

	local tgactor = getCharacterActor(tgKeyRaw)

	local curHP =tgactor:get():getHp()

	local maxHP = tgactor:get():getMaxHp()

	local Name = tgactor:getCharacterStaticStatusWrapper():getName()

	local pos=tgactor:get():getPosition()

	local uid = tgactor:getCharacterStaticStatusWrapper():getCharacterKey()

	return Name.."/"..curHP.."/"..maxHP.."/   pos:"..pos.x..","..pos.y..","..pos.z

end



function getScreenSizeX()

	getScreenSizeX()

end



function OpenManufacture()

	Dolua("PaGlobalFunc_Manufacture_All_ToggleWindow()")

end



function SwapPet()

	if GetTime() - swapPetT >= 3000 then

		HandleEventLUp_PetList_GroupUnseal_All(swapidx)

		swapidx = swapidx + 1

		if swapidx >= 3 then

			swapidx = 1

		end

		swapPetT = GetTime()

	end

end



function CloseManufacture()

	Dolua("PaGlobalFunc_Manufacture_All_Close()")

end



function AutoFeedWorker()

	if GetTime() - feedworkerT >= FeedWorkerTimer then

	local code = string.format([[

PaGlobalFunc_WorkerManager_All_Open()

HandleEventLUp_WorkerManager_All_RestoreAll()

HandleEventLUp_WorkerManagerRestore_All_SelectItem(0)

HandleEventLUp_WorkerManagerRestore_All_Confirm()

HandleEventLUp_WorkerManager_All_RepeatAll()

HandleEventLUp_WorkerManager_All_Close()

]])

	Dolua(code)

	feedworkerT = GetTime()

	FeedWorkerTimer = math.random(30*60*1000,60*60*1000)

end

end



function AutoFeedPet()

	if GetTime() - feedPetT >= FeedPetTimer then

		FeedPet()

		feedPetT = GetTime()

		FeedPetTimer = math.random(30*60*1000,60*60*1000)

	end

end



function AutoMiniMize()

	if Bot.MiniMize then

		if GetTime() - Bot.minimizeT >= 20000 then

			MinimizeGame()

			Bot.minimizeT = GetTime()

		end

	end

end



function AutoFeedWaterAndTea()

	if GetTime() - FeedWaterTeaT >= 15000 then

		HasBuff(id)

		FeedWaterTeaT = GetTime()

	end

end



function ChangeGameSettingForBot()

	local code = string.format([[

local controlName = {"CheckButton_DamageMeter","CheckButton_AutoFindTarget","CheckButton_GameMouseMode","CheckButton_UseNewQuickSlot","CheckButton_HideWindowByAttacked","CheckButton_HideFullUiByAttacked"}

for i =1,#controlName do

	local strsplit = string.split(controlName[i], "_")

	local controlTypeName = strsplit[1]

	local elementName = strsplit[2]

	local self = PaGlobal_GameOption_All

	local needvalue = true

	if i >= 5 then

		needvalue = false

	end

	self:setOptionValue(elementName,needvalue)

	self:ClickedConfirmOption()

end

]])

Dolua(code)

end



function AutoRegisteWatchDog()

	local code = "BotPath = "..'"'..DllPath()..'"'

	Dolua(code)

	if not Bot.WatchDogRegistered or not HasWatchDog() then

		local tick = GetTime()

		while not ScriptStop() do

			RoundWindow()

			if not HasWatchDog() then

				if GetTime() - tick >= 500 then

					DOAction("WAIT")

					BDO_mouse()

					Dolua("if not ToClient_getCurrentAutoUseModeToggleState() then HandleEventLUp_AutoUseBuffItem_ToggleAutoUseMode() ToClient_setAutoUseModeToggleState(true) end")

					Walk(0,0,0)

					EnabledUser()

					LootTracker()

					ShowLootTrack()

					PatchSkillToolTip()

					PatchItemToolTip()

					PatchBuffToolTip()

					DbgPanel()

					GetNodeId()

					SkipSequence()

					ChangeGameSettingForBot()

					AutoInvestNode()

					AutoGetTalkerId()

					ShowQuestInfo()

					RegisterWatchDog()

					MeshRecorder()

					tick = GetTime()

				end

			else

				DOAction("WAIT")

				BDO_mouse()

				Walk(0,0,0)

				print("Resgiter WatchDog")

				Bot.WatchDogRegistered = true

				break

			end

			Delay(100)

		end

	end

end



function RegisterWatchDog()

	local code = string.format([[

WatchDogEntityList = {}

BotStatus = ""

MovieBreaked = false

local checkGMT = 0

local checkMobT = 0

local MemTick = 0

WatchDogStartTick = GetTime()

local GetRewardT = 0

local newname = "Panel_BotStatus"

BotStatusPanel = UI.createPanel(newname, 8192)

BotStatusPanel:SetSize(350, 50)

BotStatusPanel:SetPosX(Panel_Widget_ServantIcon:GetPosX())

BotStatusPanel:SetPosY(Panel_Widget_ServantIcon:GetPosY() + 200)

BotStatusPanel:SetShow(true, true)

BotStatusPanel:SetDragEnable(true)

BotStatusPanel:SetIgnore(false)

BotStatusPanel:ActiveMouseEventEffect(true)

BotStatusPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

BotStatusPanel:getBaseTexture():setUV(setTextureUV_Func(BotStatusPanel, 7, 6, 405, 542))

BotStatusPanel:setRenderTexture(BotStatusPanel:getBaseTexture())

BotStatusPanel:SetAlpha(0.65)

BotStatusPanel:SetDragAll(true)

CSTargetPanel = UI.createPanel("Panel_CSTarget", 8192)

CSTargetPanel:SetSize(300, 75)

CSTargetPanel:SetPosY(Panel_Widget_ServantIcon:GetPosY() + 80)

CSTargetPanel:SetPosX(Panel_Widget_ServantIcon:GetPosX())

CSTargetPanel:SetShow(true, true)

CSTargetPanel:SetDragEnable(true)

CSTargetPanel:SetIgnore(false)

CSTargetPanel:ActiveMouseEventEffect(true)

CSTargetPanel:ChangeTextureInfoName("New_UI_Common_forLua/window/inventory/inven_main.dds")

CSTargetPanel:getBaseTexture():setUV(setTextureUV_Func(CSTargetPanel, 7, 6, 405, 542))

CSTargetPanel:setRenderTexture(CSTargetPanel:getBaseTexture())

CSTargetPanel:SetAlpha(0.65)

CSTargetPanel:SetDragAll(true)

local Tg_text = UI.createControl(__ePAUIControl_StaticText, CSTargetPanel, "tgtitle")

Tg_text:SetSize(350, 50)

Tg_text:SetPosX(5)

Tg_text:SetPosY(5)

Tg_text:SetTextVerticalTop()

Tg_text:SetTextHorizonLeft()

Tg_text:SetText("")

local Tg_NormalHpRate = UI.getChildControl(Panel_Monster_Bar, "Progress2_TargetHP_Rate")

local Tg_HpBar = UI.cloneControl(Tg_NormalHpRate,CSTargetPanel, "tg_hpbar")

Tg_HpBar:ChangeTextureInfoName("New_UI_Common_forLua/Default/Default_Gauges_01.dds")

Tg_HpBar:SetSize(200,20)

local Tg_HpprcText = UI.createControl(__ePAUIControl_StaticText, CSTargetPanel, "tg_hpprctxt")

Tg_HpprcText:SetSize(20, 20)

Tg_HpprcText:SetPosX(220)

Tg_HpprcText:SetPosY(5)

local StaticText_Title = UI.createControl(__ePAUIControl_StaticText, BotStatusPanel, "title")

StaticText_Title:SetSize(350, 50)

StaticText_Title:SetPosX(5)

StaticText_Title:SetPosY(5)

StaticText_Title:SetTextVerticalTop()

StaticText_Title:SetTextHorizonLeft()

local dcaneT = nil

local chargetScollT = 0

local autoItemT = 0

local dialogT = 0

function ShowMiniGameIdx(gameIndex)

	chatting_sendMessage('', 'mini game idx:'..gameIndex,5,0)

end

registerEvent("EventStartActionMiniGame", "ShowMiniGameIdx")



function SkipBullShit()

	local _staticText_CantSkip = UI.getChildControl(Panel_SequenceSkip, "StaticText_CantSkip")

	if not _staticText_CantSkip:GetShow() then

		ToClient_SetSequencePlaybackSpeedMode(true, 700)

	end

end

Panel_SequenceSkip:RegisterUpdateFunc("SkipBullShit")

local talkT = 0

local talkT2 = 0

function ConfirmRW()

	if GetTime() - talkT2 >= 200 then

		HandleEventEnter_DialogQuest_All_SelectConfirmReward()

		talkT2 = GetTime()

	end

end

local MsgList = {}

function NotFoundMsg(msg)

	if #MsgList > 0 then

		for i =1,#MsgList do

			if MsgList[i].content == msg then

				return true

			end

		end

		return false

	else

		return false

	end

end

function NotMsgPosted(msg)

	if #MsgList > 0 then

		for i =1,#MsgList do

			if MsgList[i].content == msg then

				if MsgList[i].post then

					return true

				else

					MsgList[i].post = true

					return false

				end

			end

		end

		return false

	else

		return false

	end

end

function WatchDog()

	if GetTime() - autoItemT >= 2000 then

		local actorProxy = getSelfPlayer():get()

		local myHp = actorProxy:getHp()

		local myMaxHp = actorProxy:getMaxHp()

		local Mp = actorProxy:getMp()

		local MaxMp = actorProxy:getMaxMp()

		local mpPrc =Mp/MaxMp*100

		local hpPrc = myHp/myMaxHp*100

		local actorProxy = getSelfPlayer():get()

		local invenSize= actorProxy:getInventoryByType(1):size()

		invenSize = invenSize-1

		local autouseList = {491,492,9485,44245,66228,9497}

		local autoPotion = {517,518,519,40770}

		local autoMpPotion = {522,40771}

		for i =2,invenSize do

			local itemWrapper = getInventoryItem(i)

			if itemWrapper then

				local itemId = ((itemWrapper:get()):getKey()):getItemKey()

				if table.find(autouseList,itemId) then

					inventoryUseItem(0,i, nil, true)

				end

				if hpPrc <= 95 then

					if table.find(autoPotion,itemId) then

						inventoryUseItem(0,i, nil, true)

					end

				end

				if mpPrc <= 90 then

					if table.find(autoMpPotion,itemId) then

						inventoryUseItem(0,i, nil, true)

					end

				end

			end

		end

		autoItemT = GetTime()

	end

	if GetTime() - chargetScollT >= 10000 then

		local point = Int64toInt32(getSelfPlayer():get():getItemCollectionScrollPoint())

		--msg("remain time:"..point)

		if point <= 3600 then

			HandleEventLUp_HopeGaugeOnOff_ChargeOpen()

			HandleClicked_SelectFeedItem(0)

			HandleEventLUp_NumberPad_All_AllButton_Click(0)

			HandleEventLUp_NumberPad_All_ConfirmButton_Click()

			messageBox_YesButtonUp()

			HandleEventLUp_NumberPad_All_CancelButton_Click()

			PaGlobal_HopeGauge:prepareClose()

		end

		chargetScollT = GetTime()

	end

	if GetTime() - dialogT >= 500 then

		if dialog_getTalker() then 

			local talkerid = getNpcActor(dialog_getTalker():getActorKey()):getCharacterStaticStatusWrapper():getCharacterKey()

			local npcshit = {24890,24891,24892}

			if table.find(npcshit,talkerid) then

				if Panel_Dialog_List_All then 

					if Panel_Dialog_List_All:GetShow() then

						if not dcaneT then

							dcaneT = GetTime()

						else

							if GetTime() - dcaneT >= 200 then

								HandleEventLUp_DialogMain_All_ExitClick()

							end

						end

						ConfirmRW()

					else

						local dialogData = ToClient_GetCurrentDialogData()

						local funcButton = nil

						local funcButtonType = nil

						for i = 0, 5 do 

							funcButton = dialogData:getFuncButtonAt(i)

							if funcButton then 

								funcButtonType = tonumber(funcButton._param)

								if funcButtonType == 38 then

									HandleEventLUp_DialogMain_All_FuncButton(i)

									break

								end

							end

						end

					end 

				end

			end

		else

			dcaneT = nil

		end

		dialogT = GetTime()

	end

	if BotStatus == "KnowledgeBot" or BotStatus == "QuestNav" then

		if GetTime() - talkT >= 200 then

			if Panel_Npc_Dialog_All:GetShow() then

				local dialogData = ToClient_GetCurrentDialogData()

				if Panel_Dialog_List_All:GetShow() then

					local count = dialogData:getDialogButtonCount()

					local has = false

					for i =0,count-1 do

						local dialogButton = dialogData:getDialogButtonAt(i)

						local type = dialogButton._dialogButtonType

						if type == 1 then

							has = true

							HandleEventLUp_DialogList_All_ButtonClick(i)

							break

						end

					end

					if not has then HandleEventLUp_DialogMain_All_ExitClick() end

				else

					local funcButton = nil

					local funcButtonType = nil

					local has = false

					for i = 0, 5 do 

						funcButton = dialogData:getFuncButtonAt(i)

						if funcButton then 

							funcButtonType = tonumber(funcButton._param)

							if funcButtonType == 38 then

								has = true

								HandleEventLUp_DialogMain_All_FuncButton(i)

							end

						end

					end

					if not has then HandleEventLUp_DialogMain_All_ExitClick() end

				end

			end

			talkT = GetTime()

		end

	end

	if GetTime() - MemTick >= 10000 then

		collectgarbage("collect")

		MemTick = GetTime()

	end

	if not ToClient_isLoadingProcessor() and isLuaLoadingComplete then

		if isDoingAction("FISHING_HOOK_DELAY") or isDoingAction("FISHING_HOOK_START") or isDoingAction("FISHING_HOOK_GOOD") then

			getSelfPlayer():get():SetMiniGameResult(3)

		end

		if isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_SHIFT) and isKeyPressed(CppEnums.VirtualKeyCode.KeyCode_F11) then

			ResetLoot()

		end

		if Panel_Widget_AccesoryQuest then

			if Panel_Widget_AccesoryQuest:GetShow() then

				if GetTime() - GetRewardT >= 1000 then

					Input_AccesoryQuest_ApplyReward()

					GetRewardT = GetTime()

				end

			end

		end

		if Panel_Cutscene then 

			if Panel_Cutscene:GetShow() then

				Panel_Window_CutSceneSkip:SetShow(true,true)

				ToClient_CutsceneStop()

				MovieBreaked = true

			end

		end

		if Panel_Window_Looting_All then

			if Panel_Window_Looting_All:GetShow() then

				looting_pickAllItemToPlayer()

				PaGlobal_Looting_All:prepareClose()

			end

		end

		if Panel_Looting then

			if Panel_Looting:GetShow() then

				looting_pickAllItemToPlayer()

				Panel_Looting:SetShow(false, false)

			end

		end

		if isDialogMoviePlaying then CloseDialogMovie() MovieBreaked = true end

		if isIntroMoviePlaying then CloseIntroMovie() MovieBreaked = true end

		if FGlobal_GetIsCutScenePlay() then 

			Multiline_Subtitle:SetText("")

			Static_LatterBoxTop:SetShow(false)

			Static_LatterBoxBottom:SetShow(false)

			Static_LetterBoxRight:SetShow(false)

			Static_LetterBoxLeft:SetShow(false)

			Panel_Cutscene:SetShow(false)

			Static_FadeScreen:SetShow(false)

			FGlobal_SetIsCutScenePlay(false)

			renderMode:reset()

			crossHair_SetShow(true)

			postProcessMessageData()

			PaGlobal_CutSceneSkip_Close()

			PaGlobalFunc_CutSceneEscSkip_Close()

		end

		if Panel_Window_CutSceneScript then if Panel_Window_CutSceneScript:GetShow() then PaGlobal_CutSceneSkip:doSkip() MovieBreaked = true end end

		if Panel_PhotoMode_Main:GetShow() then Panel_PhotoMode_Main:SetShow(false) end

		if Panel_Npc_Dialog_All:GetShow() then

			local dialogData = dialog_getTalker()

			if dialogData then

				local shit = ToClient_GetCurrentDialogData()

				if shit then

					local funcButton = shit:getFuncButtonAt(0)

					if not funcButton then

						ConfirmRW()

					end

				end

			end

		end

		if GetTime() - checkGMT >= 100 then

			local ret=0

			for i =0,4 do

				local chatPanel = ToClient_getChattingPanel(i)

				if chatPanel then

					local chattingMessage = chatPanel:beginMessage(0)

					for a =0,300 do

						if chattingMessage then

							local msg = chattingMessage:getContent()

							local isGameManager = chattingMessage.isGameManager

							local chatType = chattingMessage.chatType

							local time = chattingMessage:getTimeString()

							if chatType == 4 or chatType == 22 then

								if not NotFoundMsg(msg) then

									table.insert(MsgList,{content=msg,post=false})

								end

								if isGameManager then

									ret = 1

									local file = io.open("c:\\gmlog.txt", "w")

									if file then

										local current_time = os.date()

										file:write("GM Found335511".." Msg:"..msg.." Time:"..time.." ChatType:"..chatType.." Date:"..current_time.."\n")

										file:close()

									end

									file = io.open(BotPath.."\\gmstatus.txt", "w")

									if file then

										local content = "gmfound"

										file:write(content)

										file:close()

									end

									if not NotMsgPosted(msg) then

										file = io.open(BotPath.."\\newmsg.txt", "w")

										if file then

											file:write("Get GM Pmed!!! PM Content:"..msg.." Time:"..time)

											file:close()

										end

									end

								else

									if string.match(msg,"GM Found335511") then

										ret = 1

										local file = io.open("c:\\gmlog.txt", "w")

										if file then

											local current_time = getTimeYearMonthDayHourMinSecByTTime64(getUtc64())

											file:write("GM Found335511".." Msg:"..msg.." Time:"..time.." ChatType:"..chatType.." Date:"..current_time.."\n")

											file:close()

										end

									end

									if not NotMsgPosted(msg) then

										local file = io.open(BotPath.."\\newmsg.txt", "w")

										if file then

											file:write("Get Pmed!!! PM Content:"..msg.." Time:"..time)

											file:close()

										end

									end

								end

							end

							chattingMessage = chatPanel:nextMessage()

						else

							break

						end

					end

				end

			end

			if ret == 0 then

				local file = io.open("c:\\gmlog.txt", "w")

				if file then

					local current_time = os.date()

					file:write("No GM".." Date:"..current_time.."\n")

					file:close()

				end

			end

			checkGMT = GetTime()

		end

		if GetTime() - checkMobT >= 100 then

			WatchDogEntityList = {}

			local drawshit = false

			local forceduel = false

			local lastPlayerName,lx,ly,lz = nil,nil,nil,nil

			local px,py,pz = GetMyPos()

			local longdist = math.huge

			local myname = getSelfPlayer():getName()

			if isKeyPressed(17) then

				if isKeyPressed(119) then

					DeleteDraw()

					drawshit = true

				end

				if isKeyPressed(123) then

					forceduel = true

				end

			end

			for i=0,67 do

				local mob = FromClient_getRadarIconActorList(i)

				if mob then

					for key, control in pairs(mob) do

						local actorProxy = mob[key]

						local actorProxyWrapper = getActor(actorProxy:getActorKeyRaw())

						if drawshit then

							local gatheractor = getCollectActor(actorProxy:getActorKeyRaw())

							if gatheractor then

								local gpos = actorProxyWrapper:get():getPosition()

								DrawPos(gpos.x,gpos.z,gpos.y)

							end

						end

						if forceduel then

							local playerActor = getPlayerActor(actorProxy:getActorKeyRaw())

							if playerActor then

								local playername = playerActor:getName()

								if playername ~= myname then

									local gpos = actorProxyWrapper:get():getPosition()

									local top = Dist2P3D(gpos.x,gpos.y,gpos.z)

									if longdist > top then

										longdist = top

										lastPlayerName = playername

										lx,ly,lz = gpos.x,gpos.y,gpos.z

									end

								end

							end

						end

						local muid = actorProxyWrapper:getCharacterStaticStatusWrapper():getCharacterKey()

						if muid ~= 32 and muid ~= 27 then

							local mname = actorProxyWrapper:getCharacterStaticStatusWrapper():getName()

							local mLv = actorProxyWrapper:get():getCharacterStaticStatus().level

							local mcurHP = actorProxyWrapper:get():getHp()

							local mmaxHP = actorProxyWrapper:get():getMaxHp()

							local mpos = actorProxyWrapper:get():getPosition()

							table.insert(WatchDogEntityList,{uid=muid,name=mname,curHp=mcurHP,maxHp=mmaxHP,pos=mpos,Lv=mLv,type=i,actordata=actorProxyWrapper,proxy=actorProxy,gid =actorProxy:getActorKeyRaw()})

						end

					end

				end

			end

			if lastPlayerName then

				PvPBattle_AskPvPBattle(lastPlayerName,false,false)

				DrawPos(lx,lz,ly)

				msg("try to force duel:"..lastPlayerName)

			end

			checkMobT = GetTime()

			if #WatchDogEntityList > 0 then

				local top,aaidx = math.huge,nil

				local actorProxy = getSelfPlayer():get()

				local plyx,plyy,plyz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

				for i =1,#WatchDogEntityList do 

					if (WatchDogEntityList[i].type >=3 and WatchDogEntityList[i].type <=9) and WatchDogEntityList[i].name ~= "Black Spirit's Energy" and WatchDogEntityList[i].curHp >0 then

						if WatchDogEntityList[i].curHp > 1 then

							local toc = math.abs(math.sqrt((plyx - WatchDogEntityList[i].pos.x)^2 + (plyy - WatchDogEntityList[i].pos.y)^2 + (plyz - WatchDogEntityList[i].pos.z)^2))

							if top > toc then

								top = toc

								aaidx = i

							end

						end

					end

				end

				if aaidx then

					local tgactor = WatchDogEntityList[aaidx].actordata

					local Name = WatchDogEntityList[aaidx].name

					local curHP = WatchDogEntityList[aaidx].curHp

					local maxHP = math.floor(WatchDogEntityList[aaidx].maxHp)

					local nowHP = curHP * 100 / maxHP

					Tg_HpBar:SetProgressRate(nowHP)

					Tg_HpBar:SetShow(true)

					Tg_HpBar:SetPosX(2)

					Tg_HpBar:SetPosY(2)

					Tg_HpprcText:SetText("<PAColor0xFFFFFF00>"..math.floor(nowHP).." prc<PAOldColor>")

					local top = Dist2P3D(WatchDogEntityList[aaidx].pos.x,WatchDogEntityList[aaidx].pos.y,WatchDogEntityList[aaidx].pos.z)/100

					local myRegionKey = getSelfPlayer():getRegionKey():get()

					local myRegionInfoWrapper = getRegionInfoWrapper(myRegionKey)

					local myWayPointKey = myRegionInfoWrapper:getExplorationKey()

					local regiontxt = "Region id:"..myRegionKey.."   Node id:"..myWayPointKey

					Tg_text:SetText("\n<PAColor0xFFFFFF00>"..Name.."<PAOldColor>  Hp:"..curHP.." / "..maxHP.." \nLv:"..WatchDogEntityList[aaidx].Lv.." Uid:"..WatchDogEntityList[aaidx].uid.." Type:"..WatchDogEntityList[aaidx].type.." Dist:"..top.."\n"..regiontxt)

				end

			end

			local BotRunningTime = (GetTime()-WatchDogStartTick)/1000

			local seconds = math.floor(math.fmod(BotRunningTime, 60))

			local min = math.floor(BotRunningTime/60)

			local hour = math.floor(min/60) 

			local day = math.floor(hour/24)

			local str = ""

			if tonumber(seconds) > 0 and tonumber(seconds) < 60 then

				str = ""..seconds.."sec" ..str

			end

			if tonumber(min - hour*60)>0 and tonumber(min - hour*60)<60 then

				str = ""..(min - hour*60).."min"..str

			end

			if tonumber(hour - day*24)>0 and tonumber(hour - day*60)<24 then

				str = (hour - day*24).."hour"..str

			end

			if tonumber(day) > 0 then

				str = day.."day"..str

			end

			local curChannelData = getCurrentChannelServerData()

			local curWorldData = getGameWorldServerDataByWorldNo(curChannelData._worldNo)

			local channelMoveableRemainTime = getChannelMoveableRemainTime(curWorldData._worldNo)

			local specialChannelMoveableRemainTime = getSpecialChannelMoveableRemainTime(curWorldData._worldNo)

			local swapCD = ""

			if getSelfPlayer():get():isSeasonCharacter() then

				swapCD = convertStringFromDatetime(specialChannelMoveableRemainTime)

			else

				swapCD = convertStringFromDatetime(channelMoveableRemainTime)

			end

			str = "<PAColor0xFF00FF00>ETH BDO been running for: <PAOldColor>"..str.."       FPS:"..math.floor(ToClient_getFPS()).."\n<PAColor0xFF00FF00>Bot status: <PAOldColor>"..BotStatus.."   Swap CD:"..swapCD

			StaticText_Title:SetText(str)

		end

	end

end

registerEvent("FromClient_LuaTimer_UpdatePerFrame", "WatchDog")

]])

	Dolua(code)

end



function AutoGetTalkerId()

	local code = [[

function ShowTalkerid()

	chatting_sendMessage('',"talker id:"..getNpcActor(dialog_getTalker():getActorKey()):getCharacterStaticStatusWrapper():getCharacterKey(),5,0)

end

registerEvent("FromClient_ShowDialog", "ShowTalkerid")

]]

Dolua(code)

end



function ChannelMoveable()

	local code = string.format([[

  local curChannelData = getCurrentChannelServerData()

  local curWorldData = getGameWorldServerDataByWorldNo(curChannelData._worldNo)

  local channelMoveableRemainTime = getChannelMoveableRemainTime(curWorldData._worldNo)

  local specialChannelMoveableRemainTime = getSpecialChannelMoveableRemainTime(curWorldData._worldNo)

if getSelfPlayer():get():isSeasonCharacter() then

	return convertStringFromDatetime(specialChannelMoveableRemainTime)

else

	return convertStringFromDatetime(channelMoveableRemainTime)

end

	]])

	local str = Retlua(code)

	if str == ""  then

		return true

	else

		return false

	end

end



function SwapCD()

	local code = [[

local time = 0

local curChannelData = getCurrentChannelServerData()

local curWorldData = getGameWorldServerDataByWorldNo(curChannelData._worldNo)

local channelMoveableRemainTime = getChannelMoveableRemainTime(curWorldData._worldNo)

local specialChannelMoveableRemainTime = getSpecialChannelMoveableRemainTime(curWorldData._worldNo)

if getSelfPlayer():get():isSeasonCharacter() then

	time = convertStringFromDatetimeType2(specialChannelMoveableRemainTime)

else

	time = convertStringFromDatetimeType2(channelMoveableRemainTime)

end

local shit = convertTimeToSeconds(time)

if time ~= "" then

	return convertTimeToSeconds(time)

else

	return 0

end

]]

local str = tonumber(Retlua(code))

if str then

	return str 

else

	return 0

end

end



function SwapToRandomChannel()

	local code = string.format([[

local ret = ""

local curChannelData = getCurrentChannelServerData()

local curWorldData = getGameWorldServerDataByWorldNo(curChannelData._worldNo)

local channelCount = getGameChannelServerDataCount(curWorldData._worldNo)

local isSeason = getSelfPlayer():get():isSeasonCharacter()

local channelamount = channelCount-3

if isSeason then

	local chidx = 1

	for i=1,10 do

		local selectedChannelIdx = PaGlobal_ChannelSelect_All._serverIndexTable[i]

		local selectedChannel = getGameChannelServerDataByWorldNo(curChannelData._worldNo, selectedChannelIdx)

		if selectedChannel._isSeasonChannel and selectedChannel._PVPServerType == 0 then

			chidx = i

		end

	end

	channelamount = chidx

end

local idx= math.random(1,channelamount)

local selectedChannelIdx = PaGlobal_ChannelSelect_All._serverIndexTable[idx]

local selectedChannel = getGameChannelServerDataByWorldNo(curChannelData._worldNo, selectedChannelIdx)

local channelName = getChannelName(selectedChannel._worldNo, selectedChannel._serverNo)

if isSeason then

	if selectedChannel._isSeasonChannel and selectedChannel._PVPServerType == 0 then

		PaGlobal_GameExit_ALL_SaveCurrentData()

		gameExit_MoveChannel(selectedChannelIdx)

		ret = channelName

	end

else

	if not selectedChannel._isSiegeChannel and selectedChannel._isHadumChannel and selectedChannel._PVPServerType == 0 then

		if selectedChannel._isSeasonNewbieChannel then

			local isAccessible = ToClient_CheckToAccessSeasonNewbieChannel()

			if isAccessible then

				if getSelfPlayer():get():getLevel() < 61 then

					PaGlobal_GameExit_ALL_SaveCurrentData()

					gameExit_MoveChannel(selectedChannelIdx)

					ret = channelName

				end

			end

		else

			PaGlobal_GameExit_ALL_SaveCurrentData()

			gameExit_MoveChannel(selectedChannelIdx)

			ret = channelName

		end

	end

end

if Panel_Window_MessageBox_All:GetShow() then messageBoxCheck_ApplyButtonUp() end

return ret

]])

local str = Retlua(code)

return str

end



function FadeShow()

	local code = [[

if Common_FadeOut then

	if Common_FadeOut:GetShow() then

		return 1

	else

		return 2

	end

else

	return 2

end

]]

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function DoSwapChannel()

	if ChannelMoveable() then

		print("Begin Swap Channel")

		local current_time = os.date()

		local file = io.open(DllPath().."\\newmsg.txt", "w")

		if file then

			file:write("Begin Swap Channel".." Date:"..current_time)

			file:close()

		end

		Areset()

		local mx,my,mz = Pos()

		Walk(mx,my,mz)

		local tick,isload,isFade,isinCDT = GetTime(),false,false,nil

		local channelname = ""

		local stopOnce = false

		local tick2 = 0

		Dolua("PaGlobalFunc_ChannelSelect_All_Open() PaGlobalFunc_ChannelSelect_All_Close()")

		while not ScriptStop() do

			if not isload then

				if not Loading_Init() then

					if not isFade then

						if not ChannelMoveable() then

							if not isinCDT then

								isinCDT = GetTime()

							else

								if GetTime() - isinCDT >= 10000 then

									break

								end

							end

						else

							isinCDT = GetTime()

						end

						if GetTime() - tick >= 500 then

							if not FadeShow() then

								channelname = SwapToRandomChannel()

								Out_Title("Try swap channel:"..channelname)

							else

								if not stopOnce then

									AtStopBot()

									stopOnce = true

								end

								Out_Title("Swap to channel:"..channelname)

								print("Swap to channel:"..channelname)

								isFade = true

							end

							tick = GetTime()

						end

					end

				else

					isload = true

					Out_Title("Wait loading channel")

					print("Begin Loading")

				end

			else

				if not Loading_Init() then

					if  GetTime() - tick2 >= 2000 then

						if IsWindow() then

							if not FadeShow() then

								local u = tostring(Retlua("return tostring(isLuaLoadingComplete)"))

								if u == "true" then

									print("Loading finished")

									Out_Title("Loading finished")

									Bot.SwapChannelTime = Bot.SwapChannelTime + 1

									break

								end

							end

						end

						tick2 = GetTime()

					end

				end

			end

			Delay(200)

		end

		print("End Swap Channel")

	else

		--print("Swap channel in CD")

		Out_Title("Swap time:"..Bot.SwapChannelTime)

		print("Swap time:"..Bot.SwapChannelTime)

	end

	Delay(2000)

	RoundWindow()

	BDO_mouse()

	ResetPDR(1)

	Bot.minimizeT = GetTime()

	Bot.SeasonT = GetTime()

	current_time = os.date()

	file = io.open(DllPath().."\\newmsg.txt", "w")

	if file then

		file:write("Swap channel finished!".." Date:"..current_time)

		file:close()

	end

	Bot.NeedSwapChannelatMobDetected = false

	Bot.SamePlayerDetectWithinShortTime = false

	Bot.WatchDogRegistered = false

	Bot.StartT = nil

	Bot.Click1 = false

	Bot.Click2 = false

	State = -1

end



function EnterHF()

	local didenter = false

	while not ScriptStop() do

		local p = PlayerInfo()

		if not p.IsInHF then

			if not didenter then

				if not string.match(ActionName(),"ENTER_TO_HADUMFIELD") then

					print("Try to enter Hadumfield")

					Dolua("ToClient_EnterOrLeaveHadumField()")

				else

					Out_Title("Entering Hadumfield")

					didenter = true

				end

			end

		else

			Out_Title("Entering Hadumfield finish")

			print("Enter Hadumfield succeed")

			break

		end

		Delay(100)

	end

end



function LeaveHF()

	local didenter = false

	while not ScriptStop() do

		local p = PlayerInfo()

		if p.IsInHF then

			if not didenter then

				if not string.match(ActionName(),"ENTER_TO_HADUMFIELD") then

					print("Try to leave Hadumfield")

					Dolua("ToClient_EnterOrLeaveHadumField()")

				else

					Out_Title("Leaving Hadumfield")

					didenter = true

				end

			end

		else

			Out_Title("Leaving Hadumfield finish")

			print("Leaving Hadumfield succeed")

			break

		end

		Delay(100)

	end

end



function InteractType(num)

	local code = string.format([[

interaction_processInteraction(%i)

]],num)

	Dolua(code)

end



function IsInteractable()

	local code = string.format([[

local actor = interaction_getInteractable()

if actor then

	return 1

else

	return 2

end

]])

	local i = Retlua(code)

	if tonumber(i) == 1 then

		return true

	else

		return false

	end

end



function IsGatherable()

	local code = string.format([[

local actor = interaction_getInteractable()

if actor then

	if actor:isSetInteracatbleFrag(8) then

		return 1

	else

		return 2

	end

else

	return 2

end

]])

	local i = Retlua(code)

	if tonumber(i) == 1 then

		return true

	else

		return false

	end

end



function IsLootable()

	local code = string.format([[

local ret = 2

local actor = interaction_getInteractable()

if actor then

	if actor:isSetInteracatbleFrag(7) then

		ret = 1

	end

end

return ret

]])

	local i = Retlua(code)

	if tonumber(i) == 1 then

		return true

	else

		return false

	end

end



function RecordGM()

	local code = string.format([[

local strinfo = "GM found"

local file = io.open("c:\\log.txt", "w+")

file:write(strinfo)

file:close()

]])

Dolua(code)

end



function InputPassWord(num)

	local code = string.format([[

local num = "%s"

for i = 1, #num do

	local digit = tonumber(num:sub(i,i))

	for i = 0, 9 do

		local shuffleIndex = lobbyPassword_getShuffleIndex(i)

		if digit == shuffleIndex then

			HandleEventLUp_LoginPassword_All_NumBtnInput(i)

		end

	end

end

HandleEventLUp_LoginPassword_All_Apply()

]],num)

	Dolua(code)

end



function BuyShopItem(idx,count)

	local code = string.format([[

npcShop_doBuy(%i,%i, CppEnums.ItemWhereType.eMoneyInventory,0,PaGlobal_NPCShop_ALL._value._isCamping)

]],idx,count)

Dolua(code)

end



function GetShopItemInfo()

local code = string.format([[

local itemWrapper = npcShop_getItemBuy(2)

local name = itemWrapper:getStaticStatus():getName()

local itemSSW = itemWrapper:getStaticStatus()

local itemid = itemSSW:get()._key:getItemKey()

return itemid

]])

end



function BuyPetFeed()

	local code = string.format([[

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

local has = false

for i =2,invenSize do

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		local itemId = ((itemWrapper:get()):getKey()):getItemKey()

		if itemId == 54016 then

			has = true

			local count = Int64toInt32((itemWrapper:get()):getCount_s64())

			if count < 300 then

				for a =0,100 do

					local itemWrapper = npcShop_getItemBuy(a)

					if itemWrapper then

						local itemid = itemWrapper:getStaticStatus():get()._key:getItemKey()

						if itemid == 54016 then

							npcShop_doBuy(a,(300-count),CppEnums.ItemWhereType.eMoneyInventory,0,PaGlobal_NPCShop_ALL._value._isCamping)

						end

					end

				end

			end

			break

		end

	end

end

if not has then

	for a =0,100 do

		local itemWrapper = npcShop_getItemBuy(a)

		if itemWrapper then

			local itemid = itemWrapper:getStaticStatus():get()._key:getItemKey()

			if itemid == 54016 then

				npcShop_doBuy(a,1,CppEnums.ItemWhereType.eMoneyInventory,0,PaGlobal_NPCShop_ALL._value._isCamping)

			end

		end

	end

end

]])

Dolua(code)

end



function Laydown()

	Dolua("HandleClicked_ToggleChatMacro(1) HandleClicked_SocialIcon(19) HandleClicked_Button(1,0)")

end



function PhotoMode()

	Dolua("ToClient_InputPhotoModeFromLua()") 

	-- Delay(20) Dolua("Panel_PhotoMode_Main:SetShow(false)")

end



function ClosePhotoMode()

	Dolua("ToClient_cancelRequestAddToFile() ToClient_RequestPhotoModeClose()")

end



function MinimizeGame()

	Dolua("ToClient_CheckTrayIcon() PaGlobalFunc_ExitTrayConfirm_All_Close() PaGlobal_GameExit_All_Close() PaGlobal_ExitTrayConfirm_All._ui.chk_tray:SetCheck(true)")

end



function BagMaxSize()

	return tonumber(Retlua("Inventory_GetCurrentInventory():size()"))

end



function PersonalGrindSpot()

	Dolua("HandleEventLUp_Widget_PersonalField_All_Leave()")

end



function OpenMarketWallet()

	Dolua("InputMLUp_MarketPlace_WalletOpen()")

end



function ExitMarketPlace()

	Dolua("PaGlobalFunc_MarketPlace_Function_Close()")

end



function OpenInventory()

	Dolua("InventoryWindow_Show()")

end



function AutoDeleteItem()

	if #Bot.DeleteItem > 0 then

	local code = "local list={"

	for i =1,#Bot.DeleteItem do

		code = code..Bot.DeleteItem[i]..","

	end

	code=code.."}"

	code = code..[[

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

for i =2,invenSize do

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		local itemId = ((itemWrapper:get()):getKey()):getItemKey()

		if table.find(list,itemId) then

			local name = (itemWrapper:getStaticStatus()):getName()

			local count = Int64toInt32((itemWrapper:get()):getCount_s64())

			deleteItem(getSelfPlayer():getActorKey(),0,i,count)

			chatting_sendMessage('', 'Item deleted:'..name.." "..itemId.." count:"..count,5,0)

		end

	end

end

]]

Dolua(code)

end

end



function DeleteItem(id)

	local code = string.format([[

local id = %i

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

for i =2,invenSize do

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		local itemId = ((itemWrapper:get()):getKey()):getItemKey()

		if itemId == id then

			local name = (itemWrapper:getStaticStatus()):getName()

			local count = Int64toInt32((itemWrapper:get()):getCount_s64())

			deleteItem(getSelfPlayer():getActorKey(),0,i,count)

			chatting_sendMessage('', 'Item deleted:'..name.." "..itemId.." count:"..count,5,0)

			break

		end

	end

end

]],id)

	Dolua(code)

end



function PressR(num)

	if GetTime() - PressRT >= 100 then

		if not num then

			Dolua("HandleEventLUp_DialogMain_All_ContinueClick() HandleEventLUp_DialogQuest_All_SelectReward(0) HandleEventEnter_DialogQuest_All_SelectConfirmReward() messageBox_YesButtonUp()")

		else

			Dolua([[HandleEventLUp_DialogList_All_ButtonClick(]]..num..[[)]])

		end

		PressRT = GetTime()

	end

end



function PressContinue()

	Dolua("HandleEventLUp_DialogMain_All_ContinueClick()")

end



function DialogInfo()

	local code = string.format([[

local ret = "{}"

local talker = nil

local talkerid = 0

local talkertype = nil

local dialogopen = false

local dialoglist = false

local functionbtn = false

local countinuebtn = false

local sellopen = false

local repairopen = false

local warehouseopen = false

local tradeopen = false

local dialogData = ToClient_GetCurrentDialogData()

local marketwalletopen = false

local marketplaceopen = false

local skillopen = false

local isBS = false

local villaopen = false

local campopen = false

local questdialog = false

local msgboxshow = false

if Panel_Window_SkillGroup then if Panel_Window_SkillGroup:GetShow() then skillopen = true end end

if dialogData then talker = dialogData:getContactNpcName() if dialogData:getFuncButtonAt(0) then functionbtn = true end end

if Panel_Window_MarketPlace_Main then if Panel_Window_MarketPlace_Main:GetShow() then marketplaceopen = true end end

if PaGlobalFunc_MarketPlace_WalletInven_GetShow() then marketwalletopen = true end

if PaGlobalFunc_DialogMain_All_GetShowContinueBtn() then countinuebtn = true end

if dialog_getTalker() then talkertype = dialog_getTalker():getName() talkerid = getNpcActor(dialog_getTalker():getActorKey()):getCharacterStaticStatusWrapper():getCharacterKey() end

if Panel_Npc_Dialog_All then if Panel_Npc_Dialog_All:GetShow() then dialogopen = true end end

if Panel_Dialog_NPCShop_All then if Panel_Dialog_NPCShop_All:GetShow() then sellopen = true end end

if Panel_Dialog_Repair_Function_All then if Panel_Dialog_Repair_Function_All:GetShow() then repairopen = true end end

if Panel_Window_Warehouse then if Panel_Window_Warehouse:GetShow() then warehouseopen = true end end

if Panel_Dialog_List_All then if Panel_Dialog_List_All:GetShow() then dialoglist = true end end

if dialogopen then if talker== "" and talkerid == 0 then isBS = true end end

if Panel_Window_BuildingBuff_All then if Panel_Window_BuildingBuff_All:GetShow() then villaopen = true end end

if Panel_Window_Camp_All then if Panel_Window_Camp_All:GetShow() then campopen = true end end

if Panel_Dialog_Trade_MyBasket_All then if Panel_Dialog_Trade_MyBasket_All:GetShow() then tradeopen = true end end

if Panel_Dialog_Quest_All then if Panel_Dialog_Quest_All:GetShow() then questdialog = true end end

if Panel_Window_MessageBox_All then if Panel_Window_MessageBox_All:GetShow() then msgboxshow = true end end

if string.match(talker,"'") then

	ret = "{talker="..'"'..tostring(talker)..'"'..",talkerid="..talkerid..",msgboxshow="..tostring(msgboxshow)..",questdialog="..tostring(questdialog)..",dialogopen="..tostring(dialogopen)..",sellopen="..tostring(sellopen)..",repairopen="..tostring(repairopen)..",warehouseopen="..tostring(warehouseopen)..",dialoglist="..tostring(dialoglist)..",talkertype="..'"'..tostring(talkertype)..'"'..",countinuebtn="..tostring(countinuebtn)..",marketwalletopen="..tostring(marketwalletopen)..",marketplaceopen="..tostring(marketplaceopen)..",functionbtn="..tostring(functionbtn)..",isBS="..tostring(isBS)..",skillopen="..tostring(skillopen)..",villaopen="..tostring(villaopen)..",campopen="..tostring(campopen)..",tradeopen="..tostring(tradeopen).."}"

else

	ret = "{talker=".."'"..tostring(talker).."'"..",talkerid="..talkerid..",msgboxshow="..tostring(msgboxshow)..",questdialog="..tostring(questdialog)..",dialogopen="..tostring(dialogopen)..",sellopen="..tostring(sellopen)..",repairopen="..tostring(repairopen)..",warehouseopen="..tostring(warehouseopen)..",dialoglist="..tostring(dialoglist)..",talkertype="..'"'..tostring(talkertype)..'"'..",countinuebtn="..tostring(countinuebtn)..",marketwalletopen="..tostring(marketwalletopen)..",marketplaceopen="..tostring(marketplaceopen)..",functionbtn="..tostring(functionbtn)..",isBS="..tostring(isBS)..",skillopen="..tostring(skillopen)..",villaopen="..tostring(villaopen)..",campopen="..tostring(campopen)..",tradeopen="..tostring(tradeopen).."}"

end

return ret

]])

local str = Retlua(code)

local b = load("return " .. str)

return b()

end



function UiInfo()

	local code = string.format([[

local luaload = false

local loginshow = false

local passshow = false

local servershow = false

local msgboxshow = false

local characterselectshow = false

local isloading = false

local lootshow = false

local ismovie = false

local manufactureshow = false

local isquestbranch = false

local herbminigame = false

if isLuaLoadingComplete then luaload = true end

if Panel_Window_Manufacture_All then if Panel_Window_Manufacture_All:GetShow() then manufactureshow = true end end

if Panel_Window_Looting_All then if Panel_Window_Looting_All:GetShow() then lootshow = true end end

if isDialogMoviePlaying then ismovie = true end

if Panel_Window_QuestBranch then if Panel_Window_QuestBranch:GetShow() then isquestbranch = true end end

if Panel_Window_CutSceneScript then if Panel_Window_CutSceneScript:GetShow() then ismovie = true end end

if Panel_Sequence_R_SkipMessageBox then if Panel_Sequence_R_SkipMessageBox:GetShow() then ismovie = true end end

if Panel_Lobby_Login_All then if Panel_Lobby_Login_All:GetShow() then loginshow = true end end

if Panel_Login_Password_All then if Panel_Login_Password_All:GetShow() then passshow = true end end

if Panel_Lobby_ServerSelect_All then if Panel_Lobby_ServerSelect_All:GetShow() then servershow = true end end

if Panel_Window_MessageBox_All then if Panel_Window_MessageBox_All:GetShow() then msgboxshow = true end end

if Panel_CharacterSelect_All then if Panel_CharacterSelect_All:GetShow() then characterselectshow = true end end

if Panel_MiniGame_Timing_All then if Panel_MiniGame_Timing_All:IsShow() then herbminigame = true end end

if ToClient_isLoadingProcessor() then isloading = true end

ret="{loginshow="..tostring(loginshow)..",herbminigame="..tostring(herbminigame)..",lootshow="..tostring(lootshow)..",passshow="..tostring(passshow)..",servershow="..tostring(servershow)..",msgboxshow="..tostring(msgboxshow)..",characterselectshow="..tostring(characterselectshow)..",isloading="..tostring(isloading)..",luaload="..tostring(luaload)..",ismovie="..tostring(ismovie)..",isquestbranch="..tostring(isquestbranch)..",manufactureshow="..tostring(manufactureshow).."}"

return ret

]])

local str = Retlua(code)

local b = load("return " .. str)

if type(b) == "function" then

	return b()

else

	return {loginshow=false,lootshow=false,passshow=false,servershow=false,msgboxshow=false,characterselectshow=false,isloading=false,luaload=false,ismovie=false,isquestbranch=false}

end



end



function LoadingInfo()

	local code = string.format([[

local luaload = false

local isloading = false

if ToClient_isLoadingProcessor() then isloading = true end

if isLuaLoadingComplete then luaload = true end

ret="{luaload="..tostring(luaload)..",isloading="..tostring(isloading).."}"

return ret

]])

local str = Retlua(code)

local b = load("return " .. str)

return b()	

end



function SkipShit()

	local _sequenceNo = toUint64(0, 0)

	local _skipDataID = toUint64(0, 0)

Sequence_R_SkipMessageBox_Show(_sequenceNo, _skipDataID)

end



function DoLoot()

	Dolua("Interaction_ButtonPushed(7)")

end



function DoGather()

	local code = "local list = {"

for i =1,#Bot.GatherActionPriority do

	code = code..Bot.GatherActionPriority[i]..","

end

code = code.."}"

code = code..[[

local self = PaGlobal_InteractionGathering_All

local actorWrapper = interaction_getInteractable()

local could = {}

if actorWrapper then

	if self._activatedIconCount > 0 then

		for i = 0,self._activatedIconCount-1 do

			for a=1,#list do

				local action = self._activatedIconList[i]

				if list[a]== action then

					table.insert(could,{act=action,idx=a})

				end

			end

		end

	end

end

local todo,idx = math.huge,1

for i=1,#could do

	if could[i].idx < todo then

		todo = could[i].idx

		idx = i

	end

end

if todo ~= math.huge then

	ToClient_SetCollectToolType(could[idx].act)

	interaction_processInteraction(8)

end

]]

Dolua(code)

end



function GatherExist(gid)

	local code = string.format([[

local ret = 0

local gid = %i

if getCollectActor(gid) then

	ret = 1

end

return ret

]],gid)

	local str = tonumber(Retlua(code))

	if str == 1 then

		return true

	else

		return false

	end

end



function SwapProperTool(gid)

local code = string.format([[

local ret = 0

local gid = %i

local collectWrapper = getCollectActor(gid)

local NeedToolType,NeedSwap = nil,false

local has = false

if collectWrapper then

	local bycurtool = collectWrapper:isCollectableUsingMyCollectTool()

	if not bycurtool then

		for i=0,16 do

			local isAble = collectWrapper:getCharacterStaticStatusWrapper():isCollectableToolType(i)

			if isAble then

				NeedToolType = i

				if NeedToolType ~= 0 then

					NeedSwap = true

				end

				break

			end

		end

	else

		for i=0,16 do

			local isAble = collectWrapper:getCharacterStaticStatusWrapper():isCollectableToolType(i)

			if isAble then

				NeedToolType = i

				break

			end

		end

		if NeedToolType ~= 0 then

			if ToClient_getEquipmentItem(2) then

				local ToolDura = ToClient_getEquipmentItem(2):get():getEndurance()

				if ToolDura == 0 then

					NeedSwap = true

				else

					ret = 1

				end

			end

		else

			ret = 1

		end

	end

end

if NeedToolType and NeedSwap then

	for i =2,192 do

		local itemWrapper = getInventoryItem(i)

		local toolType = 0

		local dura = 100

		if itemWrapper then

			local istool = itemWrapper:getStaticStatus():isCollectTool()

			if istool then

				dura = itemWrapper:get():getEndurance()

				toolType = itemWrapper:getStaticStatus():getCollectToolType()

				if dura > 0 and toolType == NeedToolType then

					ret = 1

					PaGlobalFunc_Inventory_All_UseItemTargetSelf(0,i,2)

					if NeedToolType ~= 0 then

						has = true

					end

					break

				end

			end

		end

	end

end

if not has and NeedSwap and NeedToolType ~= 0 then

	if ret == 1 then ret = 0 end

end

return ret

]],gid)

	local str = tonumber(Retlua(code))

	if str == 1 then

		return true

	else

		return false

	end

end



function WaitSwapTool(gid)

	local shitT = GetTime()

	local tick,count = 0,0

	local crap = false

	while not ScriptStop() do

		if GetTime() - tick >= 800 then

			if not CheckAT("COLLECT") then

				crap = SwapProperTool(gid)

			end

			tick = GetTime()

		else

			if crap then

				return true

			else

				if GetTime() - shitT >= 1600 then

					return false

				end

			end

		end

		Delay(1)

	end

end



function IsHiddenMob(uid)

	local code = string.format([[

local ret = 1

local cantatk,has = false,false

local signlist = {}

local function tablefind(t, value)

	if #t == 0 then

		return false

	else

		for i = 1,#t do 

			if t[i]~= nil then

				if t[i]== value then

					return true

				end

			else

				break

			end

		end

		return false

	end

end

for i =1,#WatchDogEntityList do

	if WatchDogEntityList[i].uid == %i then

		if not tablefind(signlist,WatchDogEntityList[i].type) then

			table.insert(signlist,WatchDogEntityList[i].type)

		end

		has = true

	end

end

if not has then

	ret = 0

else

	if (tablefind(signlist,1) or tablefind(signlist,0)) and not tablefind(signlist,3) and not tablefind(signlist,4) and not tablefind(signlist,5) and not tablefind(signlist,6) and not tablefind(signlist,7) and not tablefind(signlist,8) then

		ret = 0

	end

end

return ret

]],uid)

	local str = Retlua(code)

	if tonumber(str) == 0 then

		return true

	else

		return false

	end

end



function MovieSkiped()

	local code = string.format([[

local ret = 0 

if MovieBreaked then

	ret = 1

end

return ret

]])

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function PrintBotStatus(str)

	local code = string.format([[

BotStatus="%s"

]],str)

Dolua(code)

end



function HasGM()

	local file = io.open("c:\\gmlog.txt", "r")

	if file then

		local content = file:read("*a")

		io.close(file)

		if string.match(content,"GM Found335511") then

			LoadSound("\\Date\\1.wav")

			return true

		else

			return false

		end

	else

		return false

	end

end



function UnregisterWatchDog()

	Dolua('WatchDogEntityList = {} Panel_Monster_Bar:SetShow(false,false) UI.getChildControl(BotStatusPanel, "StaticText_ImageName"):SetText("<PAColor0xFFFFFF00>ETH BDO Stopped<PAOldColor>") unregisterEvent("FromClient_LuaTimer_UpdatePerFrame", "WatchDog")')

end



function DialogOpened()

	--return tostring(Panel_Npc_Dialog_All:GetShow())

local code = string.format([[

if ToClient_isCheckRenderModeDialog() then

	return 1

else

	return 2

end

]])

	local i = tonumber(Retlua(code))

	if i == 1 then

		return true

	else

		return false

	end

end



function IsLoading()

	local code = string.format([[

		local i = ToClient_isLoadingProcessor()

		if i then

			return 1

		else

			return 2

		end

	]])

	local i = tonumber(Retlua(code))

	if i == 1 then

		return true

	else

		return false

	end

end



function WaitLoading(login)

	local loading,tick,CheckT = false,0,0

	local loginT = 0

	while not ScriptStop() do

		if GetTime() - tick >= 500 then

			if not loading then

				if Loading_Init() then

					print("Loading Start")

					loading = true

				else

					if login then

						if not FadeShow() then

							if GetTime() - loginT >= 1000 then

								Dolua("HandleEventLUp_CharacterSelect_All_PrepareEnterToField(0)")

							end

						end

					end

				end

			else

				if not Loading_Init() then

					if GetTime() - CheckT >= 1000 then

						if IsWindow() then

							local u = tostring(Retlua("return tostring(isLuaLoadingComplete)"))

							if u == "true" then

								print("Loading finish")

								Out_Title("Loading Finish")

								break

							end

						end

						CheckT = GetTime()

					end

				else

					Out_Title("Wait Loading")

				end

			end

			tick = GetTime()

		end

		Delay(100)

	end

	Delay(2000)

end



function TalkerName()

	local code =

  [[

	local dialogData = ToClient_GetCurrentDialogData()

	local npcName = dialogData:getContactNpcName()

	return tostring(npcName)

	]]

	local i = Retlua(code)

	return i

end



function ApplyReward()

	Dolua("Input_AccesoryQuest_ApplyReward()")

end



function FeedPet()

	Dolua("HandleEventLUp_PetList_FeedToAll_All() HandleEventLUp_PetList_UseFeedItemToAll_All() PaGlobal_PetList_Close_All()")

end



function OpenWareHouseMaid()

	Dolua("PaGlobalFunc_MaidList_All_SelectMaid(2)")

end



function CloseWareHouseMaid()

	Dolua("PaGlobal_Warehouse_All_Close() PaGlobalFunc_Inventory_All_Close()")

end



function SetMultiMaid()

	Dolua("PaGlobal_MaidList_All._ui.chk_UseMultiMaid:SetCheck(true)")

end



function MaidWareHouseOpened()

	local str = Retlua("if PaGlobal_WareHouse_All_GetShow() then return tostring(PaGlobal_WareHouse_All:isMaid()) else return tostring(false) end")

	if str == "true" then

		return true

	else

		return false

	end

end



function SaveItemByMaid()

	if GetTime() - MaidSaveT >= 5000 then

	local code = "local list={"

	for i =1,#Bot.MaidSave do

		code = code..Bot.MaidSave[i]..","

	end

	code = code.."}"

	local code = code..string.format([[

local StorageMaid =ToClient_getUsableMaidCountByType(false)

if StorageMaid >=1 then

	local actorProxy = getSelfPlayer():get()

	local invenSize= actorProxy:getInventoryByType(1):size()

	invenSize = invenSize-1

	for i =2,invenSize do

		local itemWrapper = getInventoryItem(i)

		if itemWrapper then

			local itemId = ((itemWrapper:get()):getKey()):getItemKey()

			local itemType = itemWrapper:getStaticStatus():getItemType()

			for a=1,#list do

				if list[a] == itemId or itemType == 17 then

					local count = Int64toInt32((itemWrapper:get()):getCount_s64())

					local itemSSW = itemWrapper:getStaticStatus()

					local name = itemSSW:getName()

					local weight = Int64toInt32(itemSSW:get()._weight) / 10000

					local totalweight = weight*count

					if totalweight >= 100 then

						local selfPlayer = getSelfPlayer():get()

						local regionInfo = getRegionInfoByPosition(selfPlayer:getPosition())

						local regionInfoWrapper = getRegionInfoWrapper(regionInfo:getAffiliatedTownRegionKey())

						PaGlobal_WareHouse_All._currentWaypointKey = regionInfoWrapper:getPlantKeyByWaypointKey():getWaypointKey()

						local moveCountOnce = 0

						local dividedByWeight = 0

						if 0 < weight then

						dividedByWeight = math.floor(100 / weight)

						end

						moveCountOnce = toInt64(0, math.min(dividedByWeight, Int64toInt32(count)))

						count = math.floor(100/weight)

						msg2('', "Save Item By Maid:"..name.." count:"..count,5,0)

						warehouse_pushFromInventoryItemByMaid(whereType,i,count,getSelfPlayer():getActorKey(), moveCountOnce, PaGlobal_WareHouse_All._currentWaypointKey)

					end

				end

			end

		end

	end

end

]])

	Dolua(code)

	MaidSaveT = GetTime()

end

end





function SaveMPByMaid()

	if GetTime() - MaidSaveMpT >= 5000 then

	local code = "local list={"

	for i =1,#Bot.MaidMpSave do

		code = code..Bot.MaidMpSave[i]..","

	end

	code = code.."}"

	local code = code..string.format([[

local StorageMaid =ToClient_getUsableMaidCountByType(true)

if StorageMaid >=1 then

	local selfPlayer = getSelfPlayer():get()

	local regionInfo = getRegionInfoByPosition(selfPlayer:getPosition())

	local regionInfoWrapper = getRegionInfoWrapper(regionInfo:getAffiliatedTownRegionKey())

	PaGlobal_WareHouse_All._currentWaypointKey = regionInfoWrapper:getPlantKeyByWaypointKey():getWaypointKey()

	for i =2,192 do

		local itemWrapper = getInventoryItem(i)

		if itemWrapper then

			local itemId = ((itemWrapper:get()):getKey()):getItemKey()

			local has = false

			for a=1,#list do

				if list[a] == itemId then

					local isStackable = itemWrapper:getStaticStatus():isStackable()

					local itemCount = Int64toInt32((itemWrapper:get()):getCount_s64())

					local itemname = (itemWrapper:getStaticStatus()):getName()

					if isStackable then

						local itemCount = Int64toInt32((itemWrapper:get()):getCount_s64())

						local weight = itemWrapper:getStaticStatus():getWorldMarketVolume()

						if toInt64(0, 0) ~= weight then

							local buffRate = 1

							local applyStarter = getSelfPlayer():get():isApplyChargeSkill(CppEnums.UserChargeType.eUserChargeType_StarterPackage)

							if true == _ContentsGroup_Kamasilv_TradeBuff and true == applyStarter then

							  buffRate = 2

							end

							local maxCountByWeight = Int64toInt32(toInt64(0, __eTWorldTradeMarketMaxVolumeByMaid * buffRate) / weight)

							if maxCountByWeight < itemCount then

								itemCount = maxCountByWeight

							end

						end

					else

						itemCount = 1

					end

					msg("Save marketplace:"..itemname.." "..itemId.." count:"..itemCount)

					requestMoveItemInventoryToWallet(0, i, itemCount, true, PaGlobal_WareHouse_All._currentWaypointKey)

					has = true

					break

				end

			end

			if has then break end

		end

	end

end

]])

	Dolua(code)

	MaidSaveMpT = GetTime()

end

end



function Repair()

	local code = [[

HandleEventLUp_RepairFunc_All_RepairAll()

messageBox_YesButtonUp()

PaGlobalFunc_RepairFunc_All_Close()

]]

Dolua(code)

end



function CloseSkillPage()

	Dolua("PaGlobal_SkillGroup:close()")

end



function GetItemDura(Index)

	local code = string.format([[

			local itemWrapper = getInventoryItem(%i)

			local endurance = (itemWrapper:get()):getEndurance()

			return endurance

		]],Index)

	local i = AIO.Player.BDOBackLuaExecute(code)

	return tonumber(i)

end



function OpenReward(list)

	local code = "local list={"

for i =1,#list do

	code=code..'"'..list[i]..'"'..","

end

code = code.."}"

code = code..string.format([[

for i =2,192 do

    local name = nil

    local itemId = 0

    local count = 0

    local itemWrapper = getInventoryItem(i)

    if itemWrapper then

		name = (itemWrapper:getStaticStatus()):getName()

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		for a=1,#list do

			if name == list[a] or itemId == tonumber(list[a]) then

				inventoryUseItem(0,i, nil, true)

			end

		end

    end

end

]])

	Dolua(code)

end



function SellItem(list)

	local tick = GetTime()

	while not ScriptStop() do

OpenReward(Bot.OpenReward)

		local code = "local list={"

for i =1,#list do

	code=code..'"'..list[i]..'"'..","

end

code = code.."} "

code = code.." local reward={"

for i=1,#Bot.OpenReward do

	code = code..'"'..Bot.OpenReward[i]..'"'..","

end

code = code.."}"

code = code..string.format([[

if Panel_Dialog_NPCShop_All:GetShow() then

	for i =2,192 do

		local itemWrapper = getInventoryItem(i)

		if itemWrapper then

			local itemId = ((itemWrapper:get()):getKey()):getItemKey()

			local name = (itemWrapper:getStaticStatus()):getName()

			local count = Int64toInt32((itemWrapper:get()):getCount_s64())

			for a=1,#list do

				if tonumber(list[a]) == itemId or list[a] == name then

					local fromWhereType = CppEnums.ItemWhereType.eInventory 

					local toWhereType = CppEnums.ItemWhereType.eMoneyInventory 

					getSelfPlayer():get():requestSellItem(i,count, fromWhereType, toWhereType, PaGlobal_NPCShop_ALL._value._isCamping)

				end

			end

			for a=1,#reward do

				if name == reward[a] or itemId == tonumber(reward[a]) then

					inventoryUseItem(0,i, nil, true)

				end

			end

		end

	end

end

]])

Dolua(code)

if GetTime() - tick >= 2000 then

	break

end

Delay(1)

end

end





function Rideable()

	local code = string.format([[

		local actor = interaction_getInteractable() 

		local isShow = actor:isSetInteracatbleFrag(5)

		if tostring(isShow) == 'true' then

			return 1

		else

			return 2

		end

	]])

	local i = Retlua(code)

	if tonumber(i) == 1 then

		return true

	else

		return false

	end

end



function UsableMaidCount()

	local code = string.format([[

local storage =ToClient_getUsableMaidCountByType(false)

local market = ToClient_getUsableMaidCountByType(true)

return "{storage="..storage..",market="..market..",}"

]])

local str = Retlua(code)

local b = load("return " .. str)

return b()

end



function OpenDialogType(idx)

	local code =

string.format([[

local ret = 0

local dialogData = ToClient_GetCurrentDialogData()

local funcButton = nil

local funcButtonType = nil

local has = false

for i = 0, 5 do 

	funcButton = dialogData:getFuncButtonAt(i)

	if funcButton then 

		has = true 

		funcButtonType = tonumber(funcButton._param)

		if funcButtonType == %i then

			ret = 1

			HandleEventLUp_DialogMain_All_FuncButton(i)

		end

	end

end

if not has then

	HandleEventEnter_DialogQuest_All_SelectConfirmReward()

end

return ret

]],idx)

	local str = tonumber(Retlua(code))

	if str == 1 then

		return true

	else

		return false

	end

end



function ClickKnowledgeBtn()

	local code = [[

local ret = 0

local dialogData = ToClient_GetCurrentDialogData()

local count = dialogData:getDialogButtonCount()

for i =0,count-1 do

	local dialogButton = dialogData:getDialogButtonAt(i)

	local type = dialogButton._dialogButtonType

	if type == 1 then

		ret = 1

		HandleEventLUp_DialogList_All_ButtonClick(i)

		break

	end

end

return ret

]]

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function SaveItem(amount,pos)

	local code = string.format([[

			PaGlobal_Warehouse_All_PushFromInventoryItemXXX(%i, %i, whereType)

		]], amount,pos)

	Dolua(code)

end



function SaveList(list)

	local code = "local list ={"

	for i=1,#list do

		code = code..list[i]..","

	end

	code = code.."}"

	code = code..string.format([[

for i =2,192 do

	local name = nil

	local itemId = 0

	local count = 0

	local itemWrapper = getInventoryItem(i)

	if itemWrapper then

		itemId = ((itemWrapper:get()):getKey()):getItemKey()

		for a=1,#list do

			if list[a] == itemId then

				count = Int64toInt32((itemWrapper:get()):getCount_s64())

				local itemSSW = itemWrapper:getStaticStatus()

				name = itemSSW:getName()

				if itemSSW:isStackable() then

					PaGlobal_Warehouse_All_PushFromInventoryItemXXX(count,i, whereType)

				else

					HandleEventRUp_Inventory_All_RUpEvent(i-2)

					HandleEventLUp_NumberPad_All_ConfirmButton_Click()

					HandleEventLUp_NumberPad_All_CancelButton_Click()

				end

			end

		end

	end

end

]])

Dolua(code)

end





function SaveStorage(list,npc,dontexit)

	--if Bot.IsGatherBot then

		local bag = GetBagList()

		for i =1,#bag do

			if bag[i].type == 8 or bag[i].type == 18 or bag[i].type == 19 or bag[i].type == 4 or bag[i].id == 5960 or bag[i].id == 5651 or bag[i].id == 820014 or bag[i].id == 15668 then

				if not table.find(Bot.SaveList,bag[i].id) then

					table.insert(Bot.SaveList,bag[i].id)

				end

			end

		end

	--end

	local dialog,opensave = false,false

	local tick,saveT = 0,nil

	while not ScriptStop() do

		Tp(Path[AS].x,Path[AS].y,Path[AS].z)

		if Flyx then

			Tp(Flyx,Flyy,Flyz)

		end

		local dinfo = DialogInfo()

		if GetTime() - tick >= 50 then

			if not dialog then

				if not dinfo.dialogopen then

					OpenNpc(npc)

				else

					OpenNpc(npc)

					dialog = true

				end

			else

				if not dinfo.dialogopen or (dinfo.talker ~= npc and dinfo.talkerid ~= npc) then

					OpenNpc(npc)

				end

				if not opensave then

					if not dinfo.warehouseopen then

						OpenDialogType(7)

					else

						opensave = true

					end

				else

					if not dinfo.warehouseopen then

						OpenDialogType(7)

					end

					local bag = GetBagListId()

					local has = false

					for i =1,#list do

						if table.find(bag,list[i]) then

							has = true

						end

					end

					if not saveT then

						saveT = GetTime()

					else

						if GetTime() - saveT <= 16000 then

							if has then

								SaveList(Bot.SaveList)

							else

								if not dontexit then

									ExitDialog()

								end

								break

							end

						else

							if not dontexit then

								ExitDialog()

							end

							break

						end

					end

				end

			end

			tick = GetTime()

		end

	end

	print("Save storage end")

end



function GetTalkerName()

	return Retlua("return dialog_getTalker():getName()")

end



function ExitDialog()

	Dolua("HandleEventLUp_DialogMain_All_ExitClick()")

end



function SellSlot(slot)

	local code = string.format([[

PaGlobalFunc_Inventory_All_SlotRClickXXX(%i)

HandleEventLUp_NumberPad_All_AllButton_Click(0)

HandleEventLUp_NumberPad_All_ConfirmButton_Click()

messageBox_YesButtonUp()

]],slot)

	Dolua(code)

end



function SellTrader(npc)

	local dialog,opentrade = false,false

	while not ScriptStop() do

		local d= DialogInfo()

		if not dialog then

			if not d.dialogopen then

				OpenNpc(npc)

			else

				dialog = true

			end

		else

			if not opentrade then

				if not d.tradeopen then

					OpenDialogType(2)

				else

					opentrade = true

				end

			else

				if d.tradeopen then

					Dolua("PaGlobalFunc_TradeMyBasket_All_SellAllContinue()")

					Delay(500)

					Dolua("HandleEventLUp_TradeFunction_All_Close()")

				else

					ExitDialog()

					break

				end

			end

		end

		Delay(500)

	end

	State = -1

end



function JoinBA()

	local code = [[

getSelfPlayer():setActionChart('WAIT')

PaGlobalFunc_FreeBaettleField_All_Open()

PaGlobalFunc_FreeBaettleField_All_Close()

ToClient_FindForJoinPrivateRoomForAll(__eInstanceContentsType_FreeBattleField,0)

]]

Dolua(code)

end



function ExitBA()

	Dolua("ToClient_UnJoinPvpBattleGround()")

end



function CallBlackSprite()

	Dolua("ToClient_AddBlackSpiritFlush()")

end



function GetFreeSlot()

	return tonumber(Retlua("return getInventoryFreeCount()"))

end



function AutoSaveNewBie()

	if GetTime() - saveNewbieT >= 5000 then

		if #Bot.SaveNewbie > 0 then

local code = "local list = {"

for i=1,#Bot.SaveNewbie do

	code = code..Bot.SaveNewbie[i]..","

end

code = code.."}"

code = code..[[



local temporaryWrapper = getTemporaryInformationWrapper()

local userType = temporaryWrapper:getMyAdmissionToSpeedServer()

if userType == 2 then

local actorProxy = getSelfPlayer():get()

local invenSize= actorProxy:getInventoryByType(1):size()

invenSize = invenSize-1

for i =1,#list do

	for a=2,invenSize do

		local itemWrapper = getInventoryItem(a)

		if itemWrapper then

			local itemId = ((itemWrapper:get()):getKey()):getItemKey()

			if itemId == list[i] then

				local count = Int64toInt32((itemWrapper:get()):getCount_s64())

				local freeCount = getSelfPlayer():get():getInventoryByType(CppEnums.ItemWhereType.eNewbieInventory):getFreeCount()

				if freeCount >= 1 then

					ToClient_PushBlackSpiritInventoryFromInventory(0,a,count)

				end

			end

		end

	end

end

end

]]

Dolua(code)

		end

		saveNewbieT = GetTime()

	end

end



function IsFishingStance()

	local code = [[if PaGlobal_Fishing_All_GetShowPanel() then return 1 else return 2 end]]

	local str = tonumber(Retlua(code))

	if str == 1 then return true else return false end

end



function Sell(list,npc,dontexit)

	local dialog,opensell,sold,repair,exit = false,false,false,false,false

	local tick = 0

	while not ScriptStop() and GetHp() > 0 do

		if #Path>0 and AS then

			Tp(Path[AS].x,Path[AS].y,Path[AS].z)

		end

		if GetTime() - tick >= 500 then

			local dinfo = DialogInfo()

			local p = PlayerInfo()

			if not dialog then

				if not dinfo.dialogopen then

					OpenNpc(npc)

				else

					OpenNpc(npc)

					dialog = true

				end

			else

				if not dinfo.dialogopen or (dinfo.talker ~= npc and dinfo.talkerid ~= npc) then

					OpenNpc(npc)

				end

				if not opensell then

					if not dinfo.sellopen then

						OpenDialogType(2)

					else

						opensell = true

					end

				else

					if not sold then

						SellJunk()

						SellItem(Bot.SellList)

						sold = true

						Delay(200)

						BuyPetFeed()

						Delay(100)

					else

						if not repair then

							if not dinfo.repairopen then

								OpenDialogType(4)

							else

								repair = true

								Repair()

							end

						else

							if dinfo.repairopen then

								Repair()

							else

								if dinfo.dialogopen then

									if not dontexit then

										ExitDialog()

										break

									else

										break

									end

								else

									break

								end

							end

						end

					end

				end

			end

			tick = GetTime()

		end

		Delay(1)

	end

end



function SellJunk()

	Dolua("PaGlobalFunc_NPCShop_ALL_SellAllEtcItem()")

end



function TakeMarketPlace(name)

	local dialog,market,wallet,tookitem,exitwall = false,false,false,false,false

	while not ScriptStop() do

		local d = DialogInfo()

		if not dialog then

			if not d.dialogopen then

				OpenNpc(name)

			else

				dialog = true

			end

		else

			if not market then

				if not d.marketplaceopen then

					OpenDialogType(35)

				else

					market = true

				end

			else

				if not wallet then

					if not d.marketwalletopen then

						if not d.marketplaceopen then

							OpenDialogType(35)

						else

							OpenMarketWallet()

						end

					else

						wallet = true

					end

				else

					if not tookitem then

						TakeMarketItem(Bot.TakeFromMarketPlace)

						tookitem = true

					else

						if d.marketwalletopen then

							ExitMarketPlace()

						else

							ExitDialog()

							break

						end

					end

				end

			end

		end

		Delay(100)

	end

end



function MarketWalletInfo()

	local code = string.format([[

	local ret = "{"

local self = PaGlobal_InvenAutoSort

if not self then

    return

end

local panelInfo = self:getPanelInfo(5)

self._currentPanelIndex = 5

local isCheck = panelInfo._ui._checkButton:IsCheck()

if isCheck then

	self:toggleUseSort(5,true)

end

local walletItemCount = getWorldMarketMyWalletListCount()

local isSorted = PaGlobalFunc_AutoSortFunctionPanel_IsSorted(InvenSortLinkPanelIndex.MarketPlaceWallet)

if isSorted then

	PaGlobal_InvenAutoSort:toggleUseSort(5,true)

end

for i=0, walletItemCount - 1 do

	local slotNo = i

	if isSorted then

	  slotNo = selfPlayer:getRealInventorySlotNoNew(__eInventorySortWhereType_MarketPlaceWallet, slotNo)

	end

	local itemMyWalletInfo = getWorldMarketMyWalletListByIdx(slotNo)

	if itemMyWalletInfo then

		local itemCount =  itemMyWalletInfo:getItemCount()

		itemCount = tonumber(tostring(itemCount))

		local itemId =  itemMyWalletInfo:getItemKeyRaw()

		local itemWrapper = itemMyWalletInfo:getItemEnchantStaticStatusWrapper()

		local itemName = itemWrapper:getName()

		local itemEnchantKey = itemMyWalletInfo:getEnchantKey()

		local isSealed = itemMyWalletInfo:isSealed()

		ret = ret.."{name="..'"'..itemName..'"'..",id="..itemId..",count="..itemCount.."},"

	end

end

ret=ret.."}"

return ret

]])

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	return b()

else

	return nil

end

end



function TakeMarketItem(list)

local tick,tick2 = GetTime(),0

while not ScriptStop() do

	local code = "local list ={"

	for i=1,#list do

		code = code..'"'..list[i]..'"'..","

	end

	code = code.."}"

	code = code..string.format([[

local walletItemCount = getWorldMarketMyWalletListCount()

local isSorted = PaGlobalFunc_AutoSortFunctionPanel_IsSorted(InvenSortLinkPanelIndex.MarketPlaceWallet)

if isSorted then

	PaGlobal_InvenAutoSort:toggleUseSort(5,true)

end

for i=0, walletItemCount-1 do

	local slotNo = i

	if isSorted then

	  slotNo = selfPlayer:getRealInventorySlotNoNew(__eInventorySortWhereType_MarketPlaceWallet, slotNo)

	end

	local itemMyWalletInfo = getWorldMarketMyWalletListByIdx(slotNo)

	if itemMyWalletInfo then

		local itemWrapper = itemMyWalletInfo:getItemEnchantStaticStatusWrapper()

		local itemId =  itemMyWalletInfo:getItemKeyRaw()

		local itemName = itemWrapper:getName()

		for a=1,#list do

			if itemId == tonumber(list[a]) or itemName == list[a] then

				local itemCount =  itemMyWalletInfo:getItemCount()

				itemCount = tonumber(tostring(itemCount))

				local itemEnchantKey = itemMyWalletInfo:getEnchantKey()

				local isSealed = itemMyWalletInfo:isSealed()

				InputMRUp_MarketWallet_Withdraw(itemCount, itemEnchantKey, isSealed)

			end

		end

	end

end

]])

if GetTime() - tick2 >= 700 then

	Dolua(code)

	tick2 = GetTime()

end

Delay(1)

if GetTime() - tick >= (#list+1)*1000 then

	break

end

end

end



function CheckShit()

	local code = string.format([[

local shit = getSelfPlayer()

local questInfo = questList_getQuestStatic(21133,2)

local mt = getmetatable(questInfo)

	if mt then

		local ret = ""

		for k, v in pairs(mt) do

			ret=ret..k..'\n'

		end

		local file = io.open(BotPath.."\\record.txt", "w")

		if file then

			file:write(ret)

			file:close()

		end

	end

	io.popen(BotPath.."\\temp.bat")

]])

Dolua(code)

end



function HaveCamp()

	local code = [[

return tostring(ToClient_isCampingReigsted())

]]

local str = Retlua(code)

if str == "true" then

	return true

else

	return false

end

end



function IsCampSet()

	local str = Retlua("return tostring(ToClient_requestCheckHasServantCampingTent())")

	if str == "true" then

		return true

	else

		return false

	end

end



function SetCamp()

	Dolua("HandleClickedLUp_Camp_All_UnsealTent()")

end



function UnSetCamp()

	Dolua("ToClient_requestServantCompulsionSealCampingTent()")

end



function SetCampNavi()

	Dolua("ToClient_requestCampingNavi()")

end



function CloseCamp()

	Dolua("PaGlobalFunc_Camp_All_Close()")

end



function CloseShop()

	Dolua("HandleEventLUp_NPCShop_ALL_Close(true)")

end



function OpenCampStorage()

	Dolua("ToClient_requestCampingInventoryOpen()")

end



function OpenCampRepair()

	--Dolua("ToClient_requestCampingRepairOpen() HandleEventLUp_RepairFunc_All_RepairAll() messageBox_YesButtonUp() PaGlobalFunc_RepairFunc_All_Close()")

	Dolua("HandleEventLUp_RepairFunc_All_RepairAll() messageBox_YesButtonUp() PaGlobalFunc_RepairFunc_All_Close()")

end



function OpenCampShop()

	Dolua("ToClient_requestCampingShopOpen()")

	--ToClient_openCampingInfo()

	--FromClient_NPCShop_ALL_Open(true)

end



function BuyFromCamp(idx,count)

	local code = string.format([[

local fromWhereType = CppEnums.ItemWhereType.eMoneyInventory

local toWhereType = CppEnums.ItemWhereType.eMoneyInventory

npcShop_doBuy(%i,%i,fromWhereType,0,PaGlobal_NPCShop_ALL._value._isCamping)

]],idx-1,count)

	Dolua(code)

end



function BuyVillaBuff(idx)

	local code = string.format([[

ToClient_ApplyBuildingBuff(0, %i, true)

]],idx)

Dolua(code)

end



function OpenCampVilla()

	Dolua("HandleClickedLUp_Camp_All_OpenVilla()")

end



function CloseCampVilla()

	Dolua("PaGlobalFunc_BuildingBuff_All_Close()")

end



function DoCamp()

	if Bot.ACFlagHold then Areset() end

	if HaveCamp() then

		local campIsSet,buyopen,buybuff,buychurch,villaopen,buyvillabuff,repairshit = false,false,false,false,false,false,false

		print("Begin camp")

		DOAction("WAIT")

		while not ScriptStop() do

			if IsCampSet() then

				UnSetCamp()

			else

				DOAction("WAIT")

				break

			end

			Delay(10)

		end

		local tick = GetTime()

		while not ScriptStop() do

			local d = DialogInfo()

			if not IsCampSet() then

				SetCamp()

				if not CheckAT("CAMP") then

					if GetTime() - tick >= 1000 then

						print("Failed to open Tent because of terrain")

						break

					end

				else

					tick = GetTime()

				end

			else

				if not repairshit then

					if not d.repairopen then

						Dolua("ToClient_requestCampingRepairOpen()")

					else

						OpenCampRepair()

						print("repair shit")

						repairshit = true

					end

				else

					if State ~= 10 then

						if Bot.TentBuff then

							if not buybuff then

								if Bot.BuyCampBuff then

									if #Bot.CampBuffBuy > 0 then

										if not d.sellopen then

											OpenCampShop()

										else

											print("Camp Buff Buy:")

											PT(Bot.CampBuffBuy)

											for i =1,#Bot.CampBuffBuy do

												if not HasBuff(Bot.CampBuffBuy[i].id) then

													BuyFromCamp(Bot.CampBuffBuy[i].idx,1)

													print("buy camp buff:"..Bot.CampBuffBuy[i].id)

												else

													print("has camp buff:"..Bot.CampBuffBuy[i].id)

												end

											end

											buybuff = true

										end

									else

										print("no need to buy camp buff")

										buybuff = true

									end

								else

									buybuff = true

								end

							else

								if not buychurch then

									if Bot.AutoChurch then

										if #Bot.ChurchBuff > 0 then

											print("Church Buff Buy:")

											PT(Bot.ChurchBuff)

											if not d.sellopen then

												OpenCampShop()

											else

												for i =1,#Bot.ChurchBuff do

													if not HasBuff(Bot.ChurchBuff[i].id) then

														BuyFromCamp(Bot.ChurchBuff[i].idx,1)

														print("buy chruch buff:"..Bot.ChurchBuff[i].id)

													else

														print("has chruch buff:"..Bot.ChurchBuff[i].id)

													end

												end

												buychurch = true

											end

										else

											print("no need to buy chruch buff")

											buychurch = true

										end

									else

										print("no need to buy chruch buff")

										buychurch = true

									end

								else

									if not buyvillabuff then

										if Bot.BuyVillaBuff then

											if OldMoonRemainTime() > 0 or HasVillaInvite() then

												print("Villa Buff buy:")

												TT(Bot.VillaBuffBuy)

												if Bot.VillaBuffBuy.id then

													if not HasBuff(Bot.VillaBuffBuy.id) then

														if not d.villaopen then

															OpenCampVilla()

														else

															print("buy villa buff:"..Bot.VillaBuffBuy.id)

															BuyVillaBuff(Bot.VillaBuffBuy.idx)

															buyvillabuff = true

														end

													else

														print("has villa buff:"..Bot.VillaBuffBuy.id)

														buyvillabuff = true

													end

												else

													print("no need to buy villa buff")

													buyvillabuff = true

												end

											else

												print("Dont have villa contract")

												buyvillabuff = true

											end

										else

											buyvillabuff = true

										end

									else

										break

									end

								end

							end

						else

							break

						end

					else

						break

					end

				end

			end

			if GetTime() - tick >= 2300 then

				break

			end

			Delay(10)

		end

		CloseCampVilla() CloseShop() CloseCamp()

		print("Camp Done")

	end

end



function TalkUnknownNpc()

	local tick = GetTime()

	local drawed = {}

	while not ScriptStop() do

		local d = DialogInfo()

		if d.dialogopen then

			ExitDialog()

		end

		local list = EntityListLua(38)

		local dist,idx = math.huge,nil

		for i =1,#list do

			local top = Dist2P3D(list[i].mx,list[i].my,list[i].mz)

			print(top.." "..list[i].name)

			if not table.find(drawed,list[i].uid) then

				DrawPos(list[i].mx,list[i].my,list[i].mz)

				table.insert(drawed,list[i].uid)

			end

			if top <= 900 then

				if dist > top then

					dist = top

					idx = i

				end

			end

		end

		if idx then

			OpenNpc(list[idx].uid)

		end

		Delay(100)

		if GetTime() - tick >= 7000 then

			DeleteDraw()

			tick = GetTime()

		end

	end

end



local VERSION = 20141223.14
local AUTHOR_NOTE = "-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json) version 20141223.14 ]-"
JSON = {
   VERSION      = VERSION,
   AUTHOR_NOTE  = AUTHOR_NOTE,
}
local default_pretty_indent  = "  "
local default_pretty_options = { pretty = true, align_Authors = false, indent = default_pretty_indent }
local isArray  = { __tostring = function() return "JSON array"  end }    isArray.__index  = isArray
local isObject = { __tostring = function() return "JSON object" end }    isObject.__index = isObject
function JSON:newArray(tbl)
   return setmetatable(tbl or {}, isArray)
end
function JSON:newObject(tbl)
   return setmetatable(tbl or {}, isObject)
end
local function unicode_codepoint_as_utf8(codepoint)
   if codepoint <= 127 then
      return string.char(codepoint)
   elseif codepoint <= 2047 then
      local highpart = math.floor(codepoint / 0x40)
      local lowpart  = codepoint - (0x40 * highpart)
      return string.char(0xC0 + highpart,
                         0x80 + lowpart)

   elseif codepoint <= 65535 then
      local highpart  = math.floor(codepoint / 0x1000)
      local remainder = codepoint - 0x1000 * highpart
      local midpart   = math.floor(remainder / 0x40)
      local lowpart   = remainder - 0x40 * midpart
      highpart = 0xE0 + highpart
      midpart  = 0x80 + midpart
      lowpart  = 0x80 + lowpart
      if ( highpart == 0xE0 and midpart < 0xA0 ) or
         ( highpart == 0xED and midpart > 0x9F ) or
         ( highpart == 0xF0 and midpart < 0x90 ) or
         ( highpart == 0xF4 and midpart > 0x8F )
      then
         return "?"
      else
         return string.char(highpart,
                            midpart,
                            lowpart)
      end

   else
      local highpart  = math.floor(codepoint / 0x40000)
      local remainder = codepoint - 0x40000 * highpart
      local midA      = math.floor(remainder / 0x1000)
      remainder       = remainder - 0x1000 * midA
      local midB      = math.floor(remainder / 0x40)
      local lowpart   = remainder - 0x40 * midB
      return string.char(0xF0 + highpart,
                         0x80 + midA,
                         0x80 + midB,
                         0x80 + lowpart)
   end
end

function JSON:onDecodeError(message, text, location, etc)
   if text then
      if location then
         message = string.format("%s at char %d of: %s", message, location, text)
      else
         message = string.format("%s: %s", message, text)
      end
   end

   if etc ~= nil then
      message = message .. " (" .. JSON:encode(etc) .. ")"
   end

   if self.assert then
      self.assert(false, message)
   else
      assert(false, message)
   end
end

JSON.onDecodeOfNilError  = JSON.onDecodeError
JSON.onDecodeOfHTMLError = JSON.onDecodeError

function JSON:onEncodeError(message, etc)
   if etc ~= nil then
      message = message .. " (" .. JSON:encode(etc) .. ")"
   end

   if self.assert then
      self.assert(false, message)
   else
      assert(false, message)
   end
end

local function grok_number(self, text, start, etc)
   local integer_part = text:match('^-?[1-9]%d*', start)
                     or text:match("^-?0",        start)

   if not integer_part then
      self:onDecodeError("expected number", text, start, etc)
   end

   local i = start + integer_part:len()
   local decimal_part = text:match('^%.%d+', i) or ""
   i = i + decimal_part:len()
   local exponent_part = text:match('^[eE][-+]?%d+', i) or ""
   i = i + exponent_part:len()
   local full_number_text = integer_part .. decimal_part .. exponent_part
   local as_number = tonumber(full_number_text)
   if not as_number then
      self:onDecodeError("bad number", text, start, etc)
   end
   return as_number, i
end

local function grok_string(self, text, start, etc)
   if text:sub(start,start) ~= '"' then
      self:onDecodeError("expected string's opening quote", text, start, etc)
   end
   local i = start + 1
   local text_len = text:len()
   local VALUE = ""
   while i <= text_len do
      local c = text:sub(i,i)
      if c == '"' then
         return VALUE, i + 1
      end
      if c ~= '\\' then
         VALUE = VALUE .. c
         i = i + 1
      elseif text:match('^\\b', i) then
         VALUE = VALUE .. "\b"
         i = i + 2
      elseif text:match('^\\f', i) then
         VALUE = VALUE .. "\f"
         i = i + 2
      elseif text:match('^\\n', i) then
         VALUE = VALUE .. "\n"
         i = i + 2
      elseif text:match('^\\r', i) then
         VALUE = VALUE .. "\r"
         i = i + 2
      elseif text:match('^\\t', i) then
         VALUE = VALUE .. "\t"
         i = i + 2
      else
         local hex = text:match('^\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)
         if hex then
            i = i + 6 
            local codepoint = tonumber(hex, 16)
            if codepoint >= 0xD800 and codepoint <= 0xDBFF then
               local lo_surrogate = text:match('^\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)
               if lo_surrogate then
                  i = i + 6
                  codepoint = 0x2400 + (codepoint - 0xD800) * 0x400 + tonumber(lo_surrogate, 16)
               else
               end
            end
            VALUE = VALUE .. unicode_codepoint_as_utf8(codepoint)

         else
            VALUE = VALUE .. text:match('^\\(.)', i)
            i = i + 2
         end
      end
   end

   self:onDecodeError("unclosed string", text, start, etc)
end

local function skip_whitespace(text, start)
   local _, match_end = text:find("^[ \n\r\t]+", start) -- [http://www.ietf.org/rfc/rfc4627.txt] Section 2
   if match_end then
      return match_end + 1
   else
      return start
   end
end
local grok_one
local function grok_object(self, text, start, etc)
   if text:sub(start,start) ~= '{' then
      self:onDecodeError("expected '{'", text, start, etc)
   end

   local i = skip_whitespace(text, start + 1)

   local VALUE = self.strictTypes and self:newObject { } or { }

   if text:sub(i,i) == '}' then
      return VALUE, i + 1
   end
   local text_len = text:len()
   while i <= text_len do
      local Author, new_i = grok_string(self, text, i, etc)

      i = skip_whitespace(text, new_i)

      if text:sub(i, i) ~= ':' then
         self:onDecodeError("expected colon", text, i, etc)
      end

      i = skip_whitespace(text, i + 1)

      local new_val, new_i = grok_one(self, text, i)

      VALUE[Author] = new_val
      i = skip_whitespace(text, new_i)

      local c = text:sub(i,i)

      if c == '}' then
         return VALUE, i + 1
      end

      if text:sub(i, i) ~= ',' then
         self:onDecodeError("expected comma or '}'", text, i, etc)
      end

      i = skip_whitespace(text, i + 1)
   end

   self:onDecodeError("unclosed '{'", text, start, etc)
end

local function grok_array(self, text, start, etc)
   if text:sub(start,start) ~= '[' then
      self:onDecodeError("expected '['", text, start, etc)
   end

   local i = skip_whitespace(text, start + 1) -- +1 to skip the '['
   local VALUE = self.strictTypes and self:newArray { } or { }
   if text:sub(i,i) == ']' then
      return VALUE, i + 1
   end

   local VALUE_INDEX = 1

   local text_len = text:len()
   while i <= text_len do
      local val, new_i = grok_one(self, text, i)
      VALUE[VALUE_INDEX] = val
      VALUE_INDEX = VALUE_INDEX + 1

      i = skip_whitespace(text, new_i)

      local c = text:sub(i,i)
      if c == ']' then
         return VALUE, i + 1
      end
      if text:sub(i, i) ~= ',' then
         self:onDecodeError("expected comma or '['", text, i, etc)
      end
      i = skip_whitespace(text, i + 1)
   end
   self:onDecodeError("unclosed '['", text, start, etc)
end


grok_one = function(self, text, start, etc)
   start = skip_whitespace(text, start)

   if start > text:len() then
      self:onDecodeError("unexpected end of string", text, nil, etc)
   end

   if text:find('^"', start) then
      return grok_string(self, text, start, etc)

   elseif text:find('^[-0123456789 ]', start) then
      return grok_number(self, text, start, etc)

   elseif text:find('^%{', start) then
      return grok_object(self, text, start, etc)

   elseif text:find('^%[', start) then
      return grok_array(self, text, start, etc)

   elseif text:find('^true', start) then
      return true, start + 4

   elseif text:find('^false', start) then
      return false, start + 5

   elseif text:find('^null', start) then
      return nil, start + 4

   else
      self:onDecodeError("can't parse JSON", text, start, etc)
   end
end

function JSON:decode(text, etc)
   if type(self) ~= 'table' or self.__index ~= JSON then
      JSON:onDecodeError("JSON:decode must be called in method format", nil, nil, etc)
   end

   if text == nil then
      self:onDecodeOfNilError(string.format("nil passed to JSON:decode()"), nil, nil, etc)
   elseif type(text) ~= 'string' then
      self:onDecodeError(string.format("expected string argument to JSON:decode(), got %s", type(text)), nil, nil, etc)
   end

   if text:match('^%s*$') then
      return nil
   end

   if text:match('^%s*<') then
      self:onDecodeOfHTMLError(string.format("html passed to JSON:decode()"), text, nil, etc)
   end
   if text:sub(1,1):byte() == 0 or (text:len() >= 2 and text:sub(2,2):byte() == 0) then
      self:onDecodeError("JSON package groks only UTF-8, sorry", text, nil, etc)
   end

   local success, value = pcall(grok_one, self, text, 1, etc)

   if success then
      return value
   else
      if self.assert then
         self.assert(false, value)
      else
         assert(false, value)
      end
      return nil, value
   end
end

local function backslash_replacement_function(c)
   if c == "\n" then
      return "\\n"
   elseif c == "\r" then
      return "\\r"
   elseif c == "\t" then
      return "\\t"
   elseif c == "\b" then
      return "\\b"
   elseif c == "\f" then
      return "\\f"
   elseif c == '"' then
      return '\\"'
   elseif c == '\\' then
      return '\\\\'
   else
      return string.format("\\u%04x", c:byte())
   end
end

local chars_to_be_escaped_in_JSON_string
   = '['
   ..    '"'   
   ..    '%\\'
   ..    '%z' 
   ..    '\001' .. '-' .. '\031'
   .. ']'

local function json_string_literal(value)
   local newval = value:gsub(chars_to_be_escaped_in_JSON_string, backslash_replacement_function)
   return '"' .. newval .. '"'
end

local function object_or_array(self, T, etc)
   local string_Authors = { }
   local number_Authors = { }
   local number_Authors_must_be_strings = false
   local maximum_number_Author
   for Author in pairs(T) do
      if type(Author) == 'string' then
         table.insert(string_Authors, Author)
      elseif type(Author) == 'number' then
         table.insert(number_Authors, Author)
         if Author <= 0 or Author >= math.huge then
            number_Authors_must_be_strings = true
         elseif not maximum_number_Author or Author > maximum_number_Author then
            maximum_number_Author = Author
         end
      else
         self:onEncodeError("can't encode table with a Author of type " .. type(Author), etc)
      end
   end

   if #string_Authors == 0 and not number_Authors_must_be_strings then
      if #number_Authors > 0 then
         return nil, maximum_number_Author -- an array
      elseif tostring(T) == "JSON array" then
         return nil
      elseif tostring(T) == "JSON object" then
         return { }
      else
         return nil
      end
   end

   table.sort(string_Authors)

   local map
   if #number_Authors > 0 then
      if self.noAuthorConversion then
         self:onEncodeError("a table with both numeric and string Authors could be an object or array; aborting", etc)
      end
      map = { }
      for Author, val in pairs(T) do
         map[Author] = val
      end

      table.sort(number_Authors)
      for _, number_Author in ipairs(number_Authors) do
         local string_Author = tostring(number_Author)
         if map[string_Author] == nil then
            table.insert(string_Authors , string_Author)
            map[string_Author] = T[number_Author]
         else
            self:onEncodeError("conflict converting table with mixed-type Authors into a JSON object: Author " .. number_Author .. " exists both as a string and a number.", etc)
         end
      end
   end

   return string_Authors, nil, map
end

local encode_value
function encode_value(self, value, parents, etc, options, indent)

   if value == nil then
      return 'null'

   elseif type(value) == 'string' then
      return json_string_literal(value)

   elseif type(value) == 'number' then
      if value ~= value then
         return "null"
      elseif value >= math.huge then
         return "1e+9999"
      elseif value <= -math.huge then
         return "-1e+9999"
      else
         return tostring(value)
      end

   elseif type(value) == 'boolean' then
      return tostring(value)

   elseif type(value) ~= 'table' then
      self:onEncodeError("can't convert " .. type(value) .. " to JSON", etc)

   else
      local T = value

      if type(options) ~= 'table' then
         options = {}
      end
      if type(indent) ~= 'string' then
         indent = ""
      end

      if parents[T] then
         self:onEncodeError("table " .. tostring(T) .. " is a child of itself", etc)
      else
         parents[T] = true
      end

      local result_value

      local object_Authors, maximum_number_Author, map = object_or_array(self, T, etc)
      if maximum_number_Author then
         --
         -- An array...
         --
         local ITEMS = { }
         for i = 1, maximum_number_Author do
            table.insert(ITEMS, encode_value(self, T[i], parents, etc, options, indent))
         end

         if options.pretty then
            result_value = "[ " .. table.concat(ITEMS, ", ") .. " ]"
         else
            result_value = "["  .. table.concat(ITEMS, ",")  .. "]"
         end

      elseif object_Authors then
         local TT = map or T

         if options.pretty then

            local AuthorS = { }
            local max_Author_length = 0
            for _, Author in ipairs(object_Authors) do
               local encoded = encode_value(self, tostring(Author), parents, etc, options, indent)
               if options.align_Authors then
                  max_Author_length = math.max(max_Author_length, #encoded)
               end
               table.insert(AuthorS, encoded)
            end
            local Author_indent = indent .. tostring(options.indent or "")
            local subtable_indent = Author_indent .. string.rep(" ", max_Author_length) .. (options.align_Authors and "  " or "")
            local FORMAT = "%s%" .. string.format("%d", max_Author_length) .. "s: %s"

            local COMBINED_PARTS = { }
            for i, Author in ipairs(object_Authors) do
               local encoded_val = encode_value(self, TT[Author], parents, etc, options, subtable_indent)
               table.insert(COMBINED_PARTS, string.format(FORMAT, Author_indent, AuthorS[i], encoded_val))
            end
            result_value = "{\n" .. table.concat(COMBINED_PARTS, ",\n") .. "\n" .. indent .. "}"

         else

            local PARTS = { }
            for _, Author in ipairs(object_Authors) do
               local encoded_val = encode_value(self, TT[Author],       parents, etc, options, indent)
               local encoded_Author = encode_value(self, tostring(Author), parents, etc, options, indent)
               table.insert(PARTS, string.format("%s:%s", encoded_Author, encoded_val))
            end
            result_value = "{" .. table.concat(PARTS, ",") .. "}"

         end
      else
         result_value = "[]"
      end

      parents[T] = false
      return result_value
   end
end

function JSON:encode(value, etc, options)
   if type(self) ~= 'table' or self.__index ~= JSON then
      JSON:onEncodeError("JSON:encode must be called in method format", etc)
   end
   return encode_value(self, value, {}, etc, options or nil)
end

function JSON:encode_pretty(value, etc, options)
   if type(self) ~= 'table' or self.__index ~= JSON then
      JSON:onEncodeError("JSON:encode_pretty must be called in method format", etc)
   end
   return encode_value(self, value, {}, etc, options or default_pretty_options)
end

function JSON.__tostring()
   return "JSON encode/decode package"
end

JSON.__index = JSON

function JSON:new(args)
   local new = { }

   if args then
      for Author, val in pairs(args) do
         new[Author] = val
      end
   end

   return setmetatable(new, JSON)
end

Path = {}

CS,AS,Dir = nil,nil,nil

PDinfo = ""

Flyx,Flyy,Flyz = nil,nil,nil

StuckX,StuckY,StuckZ,StuckT,StuckStep,CheckStuckT,StuckAngle,StuckAtX,StuckAtY,StuckAtZ,StuckPreT,InStuckT,NotStuckT,InStuck = nil,nil,nil,nil,0,0,4.71,nil,nil,nil,nil,nil,nil,false

local walktick = 0

local drawT = 0

local PDTick = 0

local HasNearPlayer = false

local Bfx,Bfy,Bfz = nil,nil,nil

local TempPath = {}

local TpRecord = {}

local CheckCST = 0

local TPStucktime = 0

local TpReachT = nil

local checkWalkStuckT = 0

local SetCameraT = 0

local TurnOffItemCollectScrollT = 0

local StartWalkT = nil

PathStartT = GetTime()



function ResetWalkT()

	StartWalkT = nil

	ResetStuck()

end



function PosBack(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx - dist*100 * math.cos(-(angle+1.57))

	local ny = my - dist*100 * math.sin(-(angle+1.57))

	return nx,ny,mz

end



function PosLeft(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx - dist*100 * math.cos(-(angle+3.14))

	local ny = my - dist*100 * math.sin(-(angle+3.14))

	return nx,ny,mz

end



function PosRight(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx + dist*100 * math.cos(-(angle+3.14))

	local ny = my + dist*100 * math.sin(-(angle+3.14))

	return nx,ny,mz

end



function PosFront(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx + dist*100 * math.cos(-(angle+1.57))

	local ny = my + dist*100 * math.sin(-(angle+1.57))

	return nx,ny,mz

end



function PosFrontLeft(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx + dist*100 * math.cos(-(angle+0.78))

	local ny = my + dist*100 * math.sin(-(angle+0.78))

	return nx,ny,mz

end



function PosFrontRight(p,dist,x,y,z,angle)

	local mx,my,mz

	if not angle then angle = p.Face end

	if x then

		mx,my,mz = x,y,z

	else

		mx,my,mz = Pos()

	end

	local nx = mx + dist*100 * math.cos(-(angle+2.35))

	local ny = my + dist*100 * math.sin(-(angle+2.35))

	return nx,ny,mz

end



function ResetStuck()

	StuckX,StuckY,StuckZ,StuckT,StuckStep,CheckStuckT,StuckAngle,StuckAtX,StuckAtY,StuckAtZ,StuckPreT,InStuckT,NotStuckT,InStuck = nil,nil,nil,nil,0,0,4.71,nil,nil,nil,nil,nil,nil,false

end



function Nav(x,y,z)

	local code = string.format([[

worldmapNavigatorStart(float3(%f,%f,%f), NavigationGuideParam(),true, true, false)

ToClient_SetCanMoveFast(true)

]],x,z,y)

	Dolua(code)

end



function DrawPos(x,y,z)

	 local code = string.format([[

        worldmapNavigatorStart(float3(%f,%f,%f), NavigationGuideParam(),false, true, false)

    ]],x,z,y)

	Dolua(code)

end



function DeleteDraw()

	Dolua("ToClient_DeleteNaviGuideByGroup(0)")

end



function DrawNewPos(x,y,z)

	 local code = string.format([[

ToClient_DeleteNaviGuideByGroup(0)

for i =1,3 do

worldmapNavigatorStart(float3(%f,%f,%f), NavigationGuideParam(), false, true, false)

end

]],x,z,y)

Dolua(code)

end



function DrawWayPoint(X,H,Y)

	 local code = string.format([[

        worldmapNavigatorStart(float3(%f,%f,%f), NavigationGuideParam(), false, true, false)

    ]],X,H,Y)

	Dolua(tostring(code))

end



function ClearDrawWayPoint()

	Dolua('ToClient_DeleteNaviGuideByGroup(0)')

end





function WalkTickReset()

	walktick = GetTime() - 800

end



function PathMoveMent(p,x,y,z)

	if not CheckAT("Swim") and not CheckAT("EMERGENCY") then

		if Bot.AfterGrindT and not Bot.IsNav then

			if GetTime() - Bot.AfterGrindT >= 200 then

				if not CheckAT("BT") then

					if p.Class == 9 then

						Ainput(AT_W+AT_C)

					else	

						Ainput(AT_W+AT_LMB)

					end

					

				end

				if State ~= 10 then

					if p.Class == 26 then

						if State ~= 2 then

							NinjaDemoPath(p,x,y,z)

						else

							if not CheckAT("BT_DC_DASH_") and not CheckAT("BT_Skill_FastSwing") then

								if Dist2P(x,y) >= 300 then

									if SkillCDOK(5004) then

										Ainput(AT_W+AT_RMB)

									elseif SkillCDOK(4507) then

										if p.Sp >= 600 then

											Bot.SkillRushBack = true

											local mx,my,mz = Pos()

											local angle = math.atan(-(x-mx), -(y-my))

											SetFace(angle+3.14)

											setYaw(angle+3.14)

											Ainput(AT_S+AT_Shift)

										end

									end

								end

							end

						end

					elseif p.Class == 30 then

						if State ~= 2 then

							WoosaPath(p,x,y,z)

						end

					elseif p.Class == 11 then

						if State ~= 2 then

							if p.CombatType == 1 then

								LahnSuccPath(p,x,y,z)

							else

								LahnAwkPath(p,x,y,z)

							end

						end

					elseif p.Class == 1 then

						if State ~= 2 then

							HasasinAwkPath(p,x,y,z)

						end

					elseif p.Class == 16 then

						if State ~= 2 then

							TamerPath(p,x,y,z)

						else

							if SkillCDOK(2570) then Ainput(AT_Shift+AT_Space) end

						end

					elseif p.Class == 33 then

						if State ~= 2 then

							DosaPath(p,x,y,z)

						else

							if CheckAT("BT_Skill_Combo_C_") then

								if SkillCDOK(14134) then

									Ainput(AT_RMB)

								elseif SkillCDOK(14168) then

									Ainput(AT_Space)

								end

							else

								if SkillCDOK(14141) then

									if p.Sp >= 250 then

										Ainput(AT_W+AT_Shift)

									end

								elseif SkillGroupCDOK({14120,14119}) then

									if p.Sp >= 100 then

										Ainput(AT_W+AT_F)

									end

								end

							end

						end

					elseif p.Class == 29 then

						if State ~= 2 then

							ArcherPath(p,x,y,z)

						end

					elseif p.Class == 17 then

						if State ~= 2 then

							ShaiPath(p,x,y,z)

						end

					elseif p.Class == 0 then

						if State ~= 2 then

							WarriorPath(p,x,y,z)

						end

					elseif p.Class == 7 then

						if p.CombatType == 1 then

							if State ~= 2 then

								DrakaniaAwkPath(p,x,y,z)

							end

						end

					elseif p.Class == 27 then

						if State ~= 2 then

							DarkKnightPath(p,x,y,z)

						end

					elseif  p.Class == 6 then

						if State ~= 2 then

							ScholarPath(p,x,y,z)

						end

					elseif p.Class == 4 then

						if State ~= 2 then

							RangerAwkPath(p,x,y,z)

						end

					elseif p.Class == 5 then

						if State ~= 2 then

							if p.CombatType == 2 or p.CombatType == 0 then

								GuardianPath(p,x,y,z)

							elseif p.CombatType == 1 then

								GuardianAwkPath(p,x,y,z)

							end

						end

					elseif p.Class == 12 then

						if Dist2P(x,y) >= 550 then

							SmashMoveSlot()

						end

						if State ~= 2 then

							ZerkerPath(p,x,y,z)

						end

					elseif p.Class == 23 then

						if State ~= 2 then

							MySticAwkPath(p,x,y,z)

						end

					elseif p.Class == 31 or p.Class == 28 then

						if CheckAT("_Meteor") or CheckAT("BT_UP_Skill_Blizzard_CastIng") or CheckAT("_Lightning_Bolt_Cast") then

							Ainput(AT_LMB)

						end

						if State ~= 2 then

							WitchPath(p,x,y,z)

						end

					elseif p.Class == 15 then

						if State ~= 2 then

							MeaguPath(p,x,y,z)

						end

					elseif p.Class == 9 then

						if State ~= 2 then

							NovaPath(p,x,y,z)

						end

					elseif p.Class == 19 then

						if State ~= 2 then

							StrikerPath(p,x,y,z)

						end

					elseif p.Class == 20 then

						if State ~= 2 then

							MusaPath(p,x,y,z)

						end

					elseif p.Class == 21 then

						if State ~= 2 then

							MeahuaPath(p,x,y,z)

						end

					else

						if Dist2P(x,y) >= 500 then

							SmashMoveSlot()

						end

					end

				end

			end

		else

			Bot.AfterGrindT = GetTime()

		end

	end

end



function Tp(x,y,z)

	if not Bot.TpFromMesh then

		print("Tp not from mesh pos:"..x..","..y..","..z)

	end

   change_RoleFly(x,y,z)

end



function WalkTo(x,y,z,p)

	LootAround()

	if not p then p = PlayerInfo() end

	OrcShit(p)

	local mx,my,mz = Pos()

	if not Bot.SkillRushBack then

		if not Bot.Lastx then

			Bot.Lastx,Bot.Lasty,Bot.Lastz = x,y,z

			local angle = math.atan(-(x-mx), -(y-my))

			setYaw(angle)

		else

			if Bot.Lastx ~= x and Bot.Lasty ~= y  and Bot.Lastz ~= z then

				local angle = math.atan(-(x-mx), -(y-my))

				setYaw(angle)

				Bot.Lastx,Bot.Lasty,Bot.Lastz = x,y,z

			end

		end

	end

	if not Bot.SkillRushBack then

		Walk(x,y,z)

	else

		if CheckAT("BT_DC_DASH_B3_1") or not CheckAT("BT_DC_DASH_") then

			Bot.SkillRushBack = false

		end

	end

	if Bot.playerdetection and not Bot.IsKnowledgeBot then

		if GetTime() - PDTick >= 800 then

			local tempx,tempy,tempz = Pos()

			local tempplayer = GetPlayer(tempx,tempy,tempz,100)

			if tempplayer then

				PDinfo = " 	NearestPlayer:"..tempplayer.name.." dist:"..tempplayer.dist

				HasNearPlayer = true

			else

				PDinfo = ""

				HasNearPlayer = false

			end

			PDTick = GetTime()

		end

	else

		HasNearPlayer = false

	end

	if not StuckX then

		--if CheckAT("RUN") or CheckAT("SPRINT") or CheckAT("SpirintDash") or CheckAT("DASH") or CheckAT("Dash") or p.Speed >= 150 then

		if p.IsStuck then

			StuckX,StuckY,StuckZ = Pos()

			StuckT = GetTime()

		end

	else

		--if CheckAT("RUN") or CheckAT("SPRINT") or CheckAT("SpirintDash") or CheckAT("DASH") or CheckAT("Dash") or p.Speed >= 150 then

		if not CheckAT("WALL") and not CheckAT("JUMP") then

			StuckPreT = nil

			if not StuckT then

				StuckT = GetTime()

			else

				local stucktimer = 800

				if GetTime() - StuckT >= stucktimer then

					local stdist = Dist2P(StuckX,StuckY)

					if p.IsStuck and stdist <= 120 then

						print("Stuck dist:"..stdist.."/"..tostring(p.IsStuck))

						local matchcondition = false

						if State ~= 2 and State ~= 100 and not Bot.SM then

							local tx,ty,tz = PosFront(p,2)

							local mob = GetAllMob(tx,ty,tz,4,nil,p)

							if mob then matchcondition = true end

						end

						if not matchcondition then

							if StuckStep == 0 then

								if State == 2 then

									local i=math.random(1,2) if i == 1 then Ainput(AT_A+AT_W) else Ainput(AT_D+AT_W) end

								else

									Ainput(AT_Space+AT_W)

								end

								StuckStep = 1

								StuckX,StuckY,StuckZ = Pos()

							elseif StuckStep == 1 then

								Ainput(AT_Space+AT_W)

								StuckStep = 2

								StuckX,StuckY,StuckZ = Pos()

							elseif StuckStep == 2 then

								Ainput(AT_A,500)

								StuckStep = 3

								StuckX,StuckY,StuckZ = Pos()

							elseif StuckStep == 3 then

								Ainput(AT_D,800)

								StuckStep = 4

								StuckX,StuckY,StuckZ = Pos()

							else

								if Bot.TpOnStuck then

									mx,my,mz = Pos()

									local nx = mx + 200 * math.cos(-(p.Face+4.71))

									local ny = my + 200 * math.sin(-(p.Face+4.71))

									Tp(nx,ny,mz+300)

									Delay(50)

									mx,my,mz = Pos()

									local nx = mx - 500 * math.cos(-(p.Face+4.71))

									local ny = my - 500 * math.sin(-(p.Face+4.71))

									Tp(nx,ny,mz+400)

								end

								StuckStep = 0

							end

						else

							Ainput(AT_Space+AT_W)

							print("Stuck Grind")

							local mx,my,mz = Pos()

							Bot.TempGrind = true

							Grind(mx,my,mz,5)

						end

					else

						StuckX,StuckY,StuckZ = Pos()

					end

					StuckT = GetTime()

				else

					if not p.IsStuck then

						StuckT = GetTime()

					end

				end

			end

		else

			StuckStep = 0

			StuckX,StuckY,StuckZ = Pos()

		end

	end

	if GetTime() - PathStartT >= 200 then

		local dontSprint = false

		if (p.Class == 5 and p.CombatType == 1) then

			dontSprint = true

		end

		if not dontSprint then

			if not Bot.AFlagUpT then

				Bot.AFlagUpT = GetTime()

			else

				if GetTime() - Bot.AFlagUpT >= 800 then

					if not CheckAT("EMERGENCY") and not CheckAT("Swim") then

						if not CheckAT("SPRINT") then

							if p.SpPrc >= 55 then

								Ahold(AT_Shift)

								if Bot.AFlagT then

									if GetTime() - Bot.AFlagT >= 1000 then

										Areset()

									end

								end

							end

						else

							if Bot.ACFlagHold then

								Areset()

							end

						end

					end

				end

			end

		end

		if not Bot.needRegenSp then

			if p.SpPrc > 10 then

				PathMoveMent(p,x,y,z)

			else

				Bot.needRegenSp = true

			end

		else

			if p.SpPrc >= 25 then

				Bot.needRegenSp = false

			end

		end

	end

	if p then

		if p.Hp == 0 then

			local file = io.open(DllPath().."\\newmsg.txt", "w")

			if file then

				file:write("Player dead!")

				file:close()

			end

			if Bot.ReviveSwapChannel then

				ReviveNode()

				print("Revive local")

				State = 19

			end

		end

	end

	if not Bot.DisableWaterEscape then

		if Bot.EscapeAtSwim then

			if CheckAT("Swimming") then

				print("fall into water, escape")

				State = 20

			end

		end

	end

end



function Walk2(x,y,z,timeout,r,justwalk)

	local tick = GetTime()

	if not r then r = 1 end

	while not ScriptStop() do

		local tod = Dist2P(x,y)/100

		if tod > r then

			if not justwalk then

				WalkTo(x,y,z)

			else

				Walk(x,y,z)

			end

		else

			break

		end

		if timeout then

			if GetTime() - tick >= timeout then

				break

			end

		end

		--p = PlayerInfo()

		tod = tod-tod%0.01

		Out_Title("Dist:"..tod)

		if HasGM() then State = -3 break end

		Delay(1)

	end

end



function GeneratePath(x1,y1,z1,x2,y2,z2)

	local dist = Dist2DCal(x1,y1,x2,y2)

	local deltax = x2-x1

	local deltay = y2-y1

	local deltaz = z2-z1

	local nextx = 300*(deltax/dist) + x1

	local nexty = 300*(deltay/dist) + y1

	local nextz = z1

	if z2 > z1 then

		nextz = z2

	end

	local count = math.floor(dist/100)

	local list = {}

	table.insert(list,{No=1,x=nextx,y=nexty,z=nextz,act="fly"})

	for i =1,count do

		nextx = 100*(deltax/dist) + nextx

		nexty = 100*(deltay/dist) + nexty

		nextz = z1

		if z2 > z1 then

			nextz = z2+5000

		end

		table.insert(list,{No=i+1,x=nextx,y=nexty,z=nextz,act="fly"})

	end

	table.insert(list,{No=1,x=x2,y=y2,z=z2,act="fly"})

	--[[for i =1,#list do

		print("{No="..i..",x="..list[i].x..",y="..list[i].y..",z="..list[i].z.."},")

	end--]]

	return list

end



function GetCSByPath(tb,D2)

	local dist,idx = math.huge,1

	if #tb > 0 then

		for i =1,#tb do

			local top = Dist2P3D(tb[i].x,tb[i].y,tb[i].z)

			if D2 then top = Dist2P(tb[i].x,tb[i].y) end

			if dist > top then

				dist,idx = top,i

			end

		end

		return idx

	else

		return 1

	end

end



function GetASByNpcFromPath(tb)

	if #tb > 0 then

		for i =1,#tb do

			if tb[i].npc then

				return i

			end

		end

		return nil

	else

		return 1

	end

end



function Dist2DCal(x1,y1,x2,y2)

	local i = math.abs(math.sqrt((x1 - x2)^2 +  (y1 - y2)^2))

	return i-i%0.01

end



function Dist3DCal(x1,y1,z1,x2,y2,z2)

	local i =math.abs(math.sqrt((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))

	return i-i%0.01

end



function Dist2P(x,y)

	local i = math.abs(math.sqrt((PosX() - x)^2 +  (PosY() - y)^2))

	return i-i%0.01

end



function Dist2P3D(x,y,z)

	local i = math.abs(math.sqrt((PosX() - x)^2 + (PosY() - y)^2 + (PosZ() - z)^2))

	return i-i%0.01

end



function NavTo(x,y,z,r,q,hasquest)

	if x ~= 0 and y ~= 0 and z ~= 0 then

	local dist1,dist2 = 500,250

	if r then dist1,dist2 = r*100,r*100 end

	if Dist2P3D(x,y,z) > dist1 then

		Walk(0,0,0)

		local tick = GetTime()

		print("Begin Navi")

		local mx,my,mz = Pos()

		local beginT = GetTime()

		local tx,ty,tz = nil,nil,nil

		local checkT = 0

		Bot.IsNav = true

		local talkeT = 0

		local resetStuckT = nil

		local stanceT = 0

		change_MousePosition(0)

		while not ScriptStop() do

			if q then

				if hasquest then

					if q.hasquest then

						print("has quest")

						break

					end

				end

			end

			LootAround()

			if not Bot.DisableWaterEscape then

				if Bot.EscapeAtSwim then

					if CheckAT("Swimming") then

						print("fall into water, escape")

						State = 20

						break

					end

				end

			end

			--ShowActionChange()

			Out_Title(Bot.QuestInfo.." Nav Dist:"..Dist2P3D(x,y,z).."      "..x..","..y..","..z)

			local p = PlayerInfo()

			if p.Hp == 0 then

				local file = io.open(DllPath().."\\newmsg.txt", "w")

				if file then

					file:write("Player dead!")

					file:close()

				end

				if Bot.ReviveSwapChannel then

					ReviveNode()

					print("Revive local")

					State = 19

					break

				end

			end

			if CheckAT("STOP_AT_CLIFF") then

				Ainput(AT_W+AT_Shift,500)

			end

			local d = DialogInfo()

			if not tx then

				tx,ty,tz = Pos()

				checkT = GetTime()

			else

				if GetTime() - checkT >= 200 then

					if Dist2P3D(tx,ty,tz) >= 1500 then

						print(Dist2P3D(tx,ty,tz))

						print("Teleport Happened")

						break

					else

						tx = nil

					end

				end

			end

			if d.dialogopen then

				ExitDialog()

			end

			OnPulseShit()

			if Dist2P3D(x,y,z) > dist1 then

				if not p.IsMov then

					--[[if Bot.MyMount then

						local p = PlayerInfo()

						if not p.InMount then

							Dolua("servant_callServant()")

							Delay(1000)

							while not ScriptStop() do

								p = PlayerInfo()

								if not p.InMount then

									if Rideable() then

										Dolua("Interaction_ButtonPushed(5)")

									else

										local mx,my,mz = Pos()

										local mob = GetMount(mx,my,mz,80)

										if mob then

											Tp(mob.mx,mob.my,mob.mz)

										end

									end

								else

									break

								end

							end

						end

					end--]]

					Nav(x,y,z)

				else

					if Bot.IsKnowledgeBot then

						if GetTime() - talkeT >= 200 then

							if Bot.IsKnowledgeBot then

								PrintBotStatus("KnowledgeBot")

							else

								PrintBotStatus("QuestNav")

							end

							local d = DialogInfo()

							if not d.dialogopen then

								TalkNearNpc()

							else

								ExitDialog()

							end

							talkeT = GetTime()

						end

					end

					setYaw(p.Face)

					if Dist2P3D(x,y,z) > 500 then

						if not CheckAT("RUN_F_AUTO") and not CheckAT("BT") then

							if not StartWalkT then

								if CheckAT("RUN") or CheckAT("SPRINT") or CheckAT("SpirintDash") or CheckAT("DASH") or CheckAT("Dash") or p.Speed >= 100 then

									StartWalkT = GetTime()

								else

									ResetWalkT()

								end

							else

								if GetTime() - StartWalkT >= 800 then

									if not InStuck then

										if CheckAT("RUN") or CheckAT("SPRINT") or CheckAT("SpirintDash") or CheckAT("DASH") or CheckAT("Dash") then

											if p.IsStuck then

												if not InStuckT then

													InStuckT = GetTime()

												else

													if GetTime() - InStuckT >= 500 then

														InStuck = true

														InStuckT = GetTime()

													end

												end

											else

												InStuckT = nil

											end

										end

									else

										if not CheckAT("WALL") then

											if GetTime() - InStuckT >= 500 then

												NotStuckT = nil

												local tx,ty,tz = PosFront(p,2)

												local mob = GetAllMob(tx,ty,tz,4,nil,p)

												if Bot.DontTempGrind then

													mob = nil

												end

												if not mob then

													if StuckStep == 0 then

														Ainput(AT_Space+AT_W)

														StuckStep = 1

														StuckX =nil

													elseif StuckStep == 1 then

														Ainput(AT_Space+AT_W)

														if not WaitAction("WALL",800) then

															Ainput(AT_A,500)

														end

														StuckStep = 2

														StuckX = nil

													elseif StuckStep == 2 then

														Ainput(AT_Space+AT_W)

														if not WaitAction("WALL",800) then

															Ainput(AT_D,800)

														end

														StuckStep = 3

														StuckX = nil

													elseif StuckStep == 3 then

														if Bot.TpOnStuck then

															mx,my,mz = Pos()

															local nx = mx + 200 * math.cos(-(p.Face+4.71))

															local ny = my + 200 * math.sin(-(p.Face+4.71))

															Tp(nx,ny,mz+300)

															Delay(50)

															mx,my,mz = Pos()

															local nx = mx - 500 * math.cos(-(p.Face+4.71))

															local ny = my - 500 * math.sin(-(p.Face+4.71))

															Tp(nx,ny,mz+400)

														end

														StuckStep = 0

													end

													InStuckT = nil

													InStuck = false

												else

													print("Stuck Grind")

													Bot.TempGrind = true

													Grind(tx,ty,tz,5)

													ResetWalkT()

												end

											else

												if not p.IsStuck then

													if not NotStuckT then

														NotStuckT = GetTime()

													else

														if GetTime() - NotStuckT >= 200 then

															InStuck = false

															InStuckT = nil

														end

													end

												else

													NotStuckT = nil

												end

											end

										else

											StartWalkT = nil

											InStuck,InStuckT,NotStuckT = false,nil,nil

										end

									end

								else

									if not p.IsStuck then

										if not NotStuckT then

											NotStuckT = GetTime()

										else

											if GetTime() - NotStuckT >= 200 then

												ResetWalkT()

											end

										end

									else

										NotStuckT = nil

									end

								end

							end

						else

							ResetWalkT()

						end

					else

						ResetWalkT()

					end

					if not p.InMount then

						if not string.match(ActionName(),"SPRINT") then

							Dolua("ToClient_SetCanMoveFast(true)")

						end

					end

					if Bot.TpNavi then

						if Bot.playerdetection then

							if GetTime() - PDTick >= 200 then

								local tempx,tempy,tempz = Pos()

								local tempplayer = GetPlayer(tempx,tempy,tempz,100)

								if tempplayer then

									PDinfo = " 	NearestPlayer:"..tempplayer.name.." dist:"..tempplayer.dist

									HasNearPlayer = true

								else

									PDinfo = ""

									HasNearPlayer = false

								end

								PDTick = GetTime()

							end

						else

							HasNearPlayer = false

						end

						if not HasNearPlayer then

							if GetTime() - beginT >= 800 then

								if string.match(ActionName(),"AUTO_RUN") or string.match(ActionName(),"RUN_SPRINT") then

									if GetTime() - tick >= 100 then

										mx,my,mz = Pos()

										nx = mx - 50 * math.cos(-(p.Face+4.71))

										ny = my - 50 * math.sin(-(p.Face+4.71))

										Tp(nx,ny,mz+5)

										tick = GetTime()

									end

								else

									if string.match(ActionName(),"STANCE_CHANGE") then

										tick = GetTime()

									end

								end

							end

						end

					end

				end

			else

				if not r then

					if Dist2P3D(x,y,z) > dist2 then

						local angle = math.atan(-(x-mx), -(y-my))

						setYaw(angle)

						change_MousePosition(0)

						WalkTo(x,y,z)

					else

						if not Bot.IsQuestBot then

							Tp(x,y,z)

						end

						if not Bot.IsFishingBot then

							State = 1

						end

						print("End Navi")

						break

					end

				else

					break

				end

			end

			LoadBotSetting()

			OnPulseShit()

			if MovieSkiped() then Dolua("MovieBreaked = false") Delay(3500) break end

			if HasGM() then State = -3 break end

			Delay(10)

			if GetTime() - stanceT >= 2000 then

				if IsFishingStance() then

					Ainput(AT_S)

					Delay(1000)

					Dolua("PaGlobalFunc_ServantIcon_ChangeLifeEquip(2)")

					Delay(1000)

				end

				stanceT = GetTime()

			end

		end

		Walk(x,y,z)

	end

	end

	Walk(0,0,0)

	PrintBotStatus("")

	Bot.IsNav = false

	Areset()

	ResetStuck()

end



function FaceTp(Dist,interval,WpX1,WpY1,WpH1,WpX2,WpY2,WpH2)

	local TPTick = 0

	local xiebian,Xbian,Ybian,CurrentX,CurrentY,CurrentH =nil,nil,nil,nil,nil,nil,nil

	local DAT = 0

	while not ScriptStop() do

		if GetTime() - TPTick > interval then

			if not xiebian then

				xiebian = Dist3DCal(WpX1,WpY1,WpH1,WpX2,WpY2,WpH2)

				Xbian = WpX2 - WpX1

				Ybian = WpY2 - WpY1

				Hbian = WpH2 - WpH1

				CurrentX = (Dist*100)*(Xbian/xiebian) + WpX1

				CurrentY = (Dist*100)*(Ybian/xiebian) + WpY1

			else

				CurrentX = (Dist*100)*(Xbian/xiebian) + CurrentX

				CurrentY = (Dist*100)*(Ybian/xiebian) + CurrentY

				CurrentH = WpH1

			end

			Tp(CurrentX,CurrentY,CurrentH)

			TPTick = GetTime()

			if GetTime() - DAT >= 500 then

				--DOAction("WAIT")

				DAT = GetTime()

			end

		end

	end

end



function WaitTo(x,y,z,tout)

	local tick = GetTime()

	while not ScriptStop() do

		if Dist2P3D(x,y,z) <= 600 then

			break

		end

		if tout then

			if GetTime() - tick >= tout then

				break

			end

		end

	end

end



function TPFront(h)

	local mx,my,mz = Pos()

	local p = PlayerInfo()

	local tick = 0

	local nx,ny = 0,0

	local nz = mz+h*100

	DOAction("TUTORIAL_WAIT_STEP1")

	Out_Title("Fly like a mtfker m3?")

	while not ScriptStop() do

		if GetTime() - tick >= 20 then

			mx,my,mz = Pos()

			p = PlayerInfo()

			tick = GetTime()

		end

		nx = mx - 100 * math.cos(-(p.Face+4.71))

		ny = my - 100 * math.sin(-(p.Face+4.71))

		Tp(nx,ny,nz)

		DOAction("TUTORIAL_WAIT_STEP1")

		Delay(1)

	end

	DOAction("WAIT")

end



function StopWalk()

	Areset()

	Walk(0,0,0)

	ResetStuck()

end



function FastNav()

	local tick = GetTime()

	while not ScriptStop() do

		local p = PlayerInfo()

		if p.IsMov then

			if GetTime() - tick >= 15 then

				local mx,my,mz = Pos()

				nx = mx - 50 * math.cos(-(p.Face+4.71))

				ny = my - 50 * math.sin(-(p.Face+4.71))

				Tp(nx,ny,mz+10)

				tick = GetTime()

			end

		end

		Delay(1)

	end

end



function DrawPath(tb)

	for i =1,#tb do

		DrawPos(tb[i].x,tb[i].y,tb[i].z)

	end

end



function TpPath(path)

	local cs,as = GetCSByPath(path),nil

	if not dir then dir = 1 end

	if dir == 1 then as = #path else as = 1 end

	if Dist2P(path[cs].x,path[cs].y) >= 1500 then

		cs = 1

		NavTo(path[cs].x,path[cs].y,path[cs].z)

	end

	local ReachT = nil

	while not ScriptStop() do

		if Dist2P3D(path[cs].x,path[cs].y,path[cs].z) > 100 then

			local d = DialogInfo()

			if d.dialogopen then

				ExitDialog()

			end

			DOAction("TUTORIAL_WAIT_STEP1")

			Tp(path[cs].x,path[cs].y,path[cs].z)

		else

			if not ReachT then

				ReachT = GetTime()

			else

				if GetTime() - ReachT >= 500 then

					cs = cs+dir 

					ReachT = nil

					if cs > #path or cs <= 0 then

						break

					end

				end

			end

		end

	end

	DOAction("WAIT")

	Areset()

end



function GoPath(path,dir)

	local cs,as = GetCSByPath(path),nil

	if not dir then dir = 1 end

	if dir == 1 then as = #path else as = 1 end

	if dir == 1 then

		if Dist2P3D(path[cs].x,path[cs].y,path[cs].z) >= 1500 then

			cs = 1

			print("Navi To CS:"..cs)

			NavTo(path[cs].x,path[cs].y,path[cs].z)

		end

	else

		if Dist2P3D(path[cs].x,path[cs].y,path[cs].z) >= 1500 then

			cs = #path

			print("Navi To CS:"..cs)

			NavTo(path[cs].x,path[cs].y,path[cs].z)

		end

	end

	local lastdist,lastcs = nil,nil

	while not ScriptStop() do

		if HasGM() then State = -3 break end

		Out_Title("cs/as:"..tostring(cs).."/"..tostring(as))

		local top = Dist2P(path[cs].x,path[cs].y)

		if top >= 50 then

			if not lastdist then lastdist = top end

			if not lastcs then 

				lastcs = cs

			else

				if lastcs == cs then

					if lastdist ~= top then

						if top > lastdist then

							cs = cs+dir 

							if cs > #path or cs <= 0 then

								break

							end

						else

							lastdist = top

						end

					end

				else

					lastdist,lastcs = nil,nil

				end

			end

			WalkTo(path[cs].x,path[cs].y,path[cs].z)

		else

			cs = cs+dir 

			if cs > #path or cs <= 0 then

				break

			end

		end

	end

	Areset()

end



function DoPath(path,direction,interval,nofix)

	local cs,as,dir = GetCSByPath(path,1),nil,nil

	if direction == 1 then as = #path else as = 1 end

	local tptick,rtick = 0,nil

	TpRecord = {}

	local samecount = 0

	while not ScriptStop() do

		Out_Title("cs/as/dir:"..tostring(cs).."/"..tostring(as).."/"..tostring(dir))

		if not dir then

			if cs < as then dir = 1 end

			if cs > as then dir = -1 end

			if cs == as then dir = 1 end

		else

			local match = false

			if tostring(path[cs].act) == "fly" then

				if Dist2P3D(path[cs].x,path[cs].y,path[cs].z) >= 300 then

					rtick = nil

					match = true

				end

			else

				if string.match(ActionName(),"TUTORIAL") then

					DOAction("WAIT")

				end

				if Dist2P(path[cs].x,path[cs].y) >= 200 then

					match = true

				end

			end

			if match then

				if tostring(path[cs].act) == "fly" then

					if not nofix then

						if #TpRecord > 0 then

							if GetTime() - TpRecord[1].time >= 60000 then

								TpRecord = {}

							end

						end

						local mx,my,mz = Pos(1)

						local hassame = false

						for i =1,#TpRecord do

							if TpRecord[i].tx == mx and TpRecord[i].ty == my then

								if GetTime() - TpRecord[i].time <= 10000 then

									hassame = true

									samecount = samecount + 1

									break

								end

							end

						end

						if not hassame then

							table.insert(TpRecord,{tx=mx,ty=my,tz=mz,time = GetTime()})

							Tp(path[cs].x,path[cs].y,path[cs].z)

						else

							if samecount >= 5 then

								samecount = 0

								print("±»¿¨»ØÁË,ÐÞÕý2")

								Delay(300)

								cs = GetCSByPath(path)

								dir = nil

								TpRecord = {}

							else

								Tp(path[cs].x,path[cs].y,path[cs].z)

							end

						end

					else

						Tp(path[cs].x,path[cs].y,path[cs].z)

					end

				else

					WalkTo(path[cs].x,path[cs].y,path[cs].z)

				end

			else

				WalkTickReset()

				local csact = tostring(path[cs].act)

				if csact == "callBS" then

					if not DialogOpened() then

						CallBlackSprite()

					end

				elseif csact == "SetWait" then

					DOAction("WAIT")

				elseif csact == "Storage" then

					Flyx,Flyy,Flyz = path[cs].x,path[cs].y,path[cs].z

					SaveStorage(Bot.SaveList,path[cs].npc)

				elseif csact == "StorageBA" then

					Flyx,Flyy,Flyz = path[cs].x,path[cs].y,path[cs].z

					SaveStorage(Bot.SaveList,path[cs].npc,1)

				elseif csact == "Sell" then

					Flyx,Flyy,Flyz = path[cs].x,path[cs].y,path[cs].z

					Sell(Bot.SellList,path[cs].npc)

				elseif csact == "SellBA" then

					Flyx,Flyy,Flyz = path[cs].x,path[cs].y,path[cs].z

					Sell(Bot.SellList,path[cs].npc,1)

				elseif csact == "ExitBA" then

					ExitBA()

				end

				local timer = 10

				if interval then timer = interval end

				if path[cs].timer then timer = path[cs].timer end

				if csact == "fly" then

					Tp(path[cs].x,path[cs].y,path[cs].z)

					DOAction("TUTORIAL_WAIT_STEP1")

					if not rtick then

						rtick = GetTime()

					else

						if GetTime() - rtick >= timer then

							print("cs1:"..cs.."/"..dir)

							cs = cs + dir 

							local atend = false

							if dir == 1 then

								if cs > as then

									atend = true

								end

							else

								if cs < 0 then

									atend = true

								end

							end

							if atend then

								break

							end

							print("cs:"..cs)

							dir = nil

							rtick = nil

						end

					end

				else

					cs = cs + dir 

					local atend = false

					if dir == 1 then

						if cs > as then

							atend = true

						end

					else

						if cs < 0 then

							atend = true

						end

					end

					if atend then

						break

					end

					dir = nil

				end

			end

		end

		if HasGM() then State = -3 break end

		Delay(1)

	end

	Areset()

end



function PathFinder()

	local function AtReach()

		Bot.Randomx,Bot.Randomy = 0,0

		if Path[CS].r then

			if not CheckAT("EMERGENCY") then

				Bot.tx,Bot.ty,Bot.tz,Bot.tr = Path[CS].x,Path[CS].y,Path[CS].z,Path[CS].r

				State = 2

			end

		end

		if Path[CS].act then

			if Path[CS].act == "Pull" then

				Bot.GrindPullTimer = 1500 

				Grind(Path[CS].x,Path[CS].y,Path[CS].z,12)

				Bot.GrindPullTimer = nil

			end

		end

		ResetStuck()

		CS = CS + Dir

		local atend = false

		if Dir == 1 then

			if CS > AS then

				atend = true

			end

		else

			if CS < 0 then

				atend = true

			end

		end

		if atend then

			if LastState == 2 or LastState == 4 then

				if Dist3DCal(Path[1].x,Path[1].y,Path[1].z,Path[#Path].x,Path[#Path].y,Path[#Path].z) <= 3000 then

					print("Loop1")

					CS = 1

				else

					print("Turn back")

					if AS == #Path then

						CS = #Path-1

						AS = 1

					else

						AS = #Path

						CS = 1

					end

				end

				print("Waypoint Circle1")

			else

				if LastState == 5 then

					if not Bot.DontRestock then

						State = 0

					else

						if Dist3DCal(Path[1].x,Path[1].y,Path[1].z,Path[#Path].x,Path[#Path].y,Path[#Path].z) <= 3000 then

							print("Loop2")

							CS = 1

						else

							print("Turn back")

							if AS == #Path then

								CS = #Path-1

								AS = 1

							else

								AS = #Path

								CS = 1

							end

						end

						print("Waypoint Circle2")

					end

				else

					State = 0

				end

			end

		end

		Dir = nil

	end

	if not Dir then

		if CS > AS then Dir = -1 end

		if CS < AS then Dir = 1 end

		if CS == AS then Dir = 1 end

	else

		if State == 1 then

			if Bot.RandomPath then

				if Bot.Randomx == 0 then

					local ran = Bot.Randomizer

					Bot.Randomx,Bot.Randomy = math.random(-ran,ran),math.random(-ran,ran)

				end

			else

				Bot.Randomx,Bot.Randomy = 0,0

			end

		end

		local top = Dist2P(Path[CS].x+Bot.Randomx,Path[CS].y+Bot.Randomy)

		if top >= 180 then

			if not Bot.LastTop then Bot.LastTop = top end

			if not Bot.LastCS then 

				Bot.LastCS = CS

			else

				if Bot.LastCS == CS then

					if Bot.LastTop ~= top then

						if top > Bot.LastTop then

							AtReach()

						else

							Bot.LastTop = top

						end

					end

				else

					Bot.LastCS,Bot.LastTop = nil,nil

				end

			end

			if Path[CS] then

				WalkTo(Path[CS].x+Bot.Randomx,Path[CS].y+Bot.Randomy,Path[CS].z)

			end

		else

			AtReach()

		end

	end

	if LastState == 6 or LastState == 7 then

		if GetTime() - TurnOffItemCollectScrollT >= 5000 then

			TurnOffItemCollectScroll()

			TurnOffAlchemyStone()

			TurnOffItemCollectScrollT = GetTime()

		end

	end

	if not Bot.StartT then 

		Bot.StartT = GetTime() 

	else 

		if not Bot.Click2 then 

			if GetTime() - Bot.StartT >= 500 then

				if CheckAT("RUN") or CheckAT("SPRINT") then

					BDO_mouse()

					Bot.Click2  = true

				end

			end

		end

	end

end



function Recorder(r,h,range)

	if not r then r = 100 end

	local tx,ty,tz = nil

	local n = 1

	while not ScriptStop() do

		if not tx then

			tx,ty,tz = Pos()

			DrawPos(tx+100,ty+100,tz)

			PosTable(n,h,range)

		else

			if Dist2P(tx,ty) >= r*100 then

				tx,ty,tz = Pos()

				n = n + 1

				DrawPos(tx+100,ty+100,tz)

				PosTable(n,h,range)

			end

		end

		Delay(100)

	end

	if not h then

		PosTable(n,h,10)

	end

end

function PlayerInfo()

	-- ToClient_IsMyselfInArena() --ÔÚ°¢ÀÕÉ³¾º¼¼³¡ÖÐ

	local code = string.format([[

local FamillyName = ""

local invenSize= 192

local Name = "nil"

local IsInHF = false

local IsInBA = false

local Mp = 100

local MaxMp = 100

local MpPrc = 100

local Energy = 0

local MaxEnergy = 0

local Speed = 0

local Sp = 0

local MaxSp = 0

local SpPrc = 0

local Lv = 0

local Hp = 0

local MaxHp = 0

local HpPrc = 0

local IsMov = false

local Freeslot = 100

local Weight = 0

local MaxWeight = 0

local WeightPrc = 0

local Face = 0

local IsWaitAction = false

local Nodeid = -1

local myRegionKey = -1

local InMount = false

local mx,my,mz = 0,0,0

local MinDura = 100

local StorageMaid = 0

local MarketMaid = 0

local Class = 0

local Rage = 0

local userid = 0

local CombatType = 0

local IsStuck = false

local BodyHeight = 0

local BodySize = 0

local SummonCount = 0

if isLuaLoadingComplete then

	if getSelfPlayer() then

		--FamillyName = getFamilyName()

		local actorProxy = getSelfPlayer():get()

		if actorProxy then

			SummonCount = getSelfPlayer():getSummonListCount()

			BodyHeight = actorProxy:getBodyHeight()

			BodySize = actorProxy:getBodySize()

			if ToClient_pushStuckPostion() then IsStuck = true end

			CombatType =  ToClient_GetCurrentPlayerSkillType() --¼Ì³Ð2 ¾õÐÑ1 ÎÞ0

			userid = actorProxy:getUserNo()

			userid = tonumber(tostring(userid))

			Rage = getSelfPlayer():getAdrenalin()/100

			Class = getSelfPlayer():getClassType()

			invenSize= actorProxy:getInventoryByType(1):size()

			invenSize = invenSize - 1

			--Name = getSelfPlayer():getName()

			if ToClient_IsEnterHadumField() then IsInHF = true end

			IsInBA = actorProxy:isBattleGroundDefine()

			Mp = actorProxy:getMp()

			MaxMp = actorProxy:getMaxMp()

			MpPrc = Mp/MaxMp*100

			Energy = getSelfPlayer():getWp()

			MaxEnergy = getSelfPlayer():getMaxWp()

			Speed = ToClient_getPhysicalSpeedforFIndway()

			Sp = actorProxy:getStamina():getSp()

			MaxSp = actorProxy:getStamina():getMaxSp()

			SpPrc=Sp/MaxSp*100

			Lv = actorProxy:getLevel()

			Hp = actorProxy:getHp()

			MaxHp = actorProxy:getMaxHp()

			HpPrc = Hp/MaxHp*100

			IsMov = getSelfPlayer():isNavigationMoving()

			Freeslot = getInventoryFreeCount()

			Weight = Int64toInt32(getSelfPlayer():get():getCurrentWeight_s64())

			MaxWeight = Int64toInt32(getSelfPlayer():get():getPossessableWeight_s64())

			WeightPrc = Weight/MaxWeight*100

			WeightPrc = math.floor(WeightPrc)

			Face = actorProxy:getRotation()

			IsWaitAction = IsSelfPlayerWaitAction()

			myRegionKey = getSelfPlayer():getRegionKey():get()

			if myRegionKey then

				local myRegionInfoWrapper = getRegionInfoWrapper(myRegionKey)

				Nodeid = myRegionInfoWrapper:getExplorationKey()

			end

			if actorProxy:getRideVehicleActorKeyRaw() ~= 0 then

				InMount = true

			end

			mx,my,mz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

			local Slot = {0,1,3,4,5,6,7,8,9,10,11,12,29}

			for i = 1,#Slot do

				local EquipInfo = ToClient_getEquipmentItem(Slot[i])

				if EquipInfo then

					local EquipProxy = EquipInfo:get()

					if EquipProxy then

						local Dura = EquipProxy:getEndurance()

						if Dura then

							local MaxDura = EquipProxy:getMaxEndurance()

							local DuraPrc = Dura/MaxDura*100

							if MinDura > DuraPrc then

								MinDura = DuraPrc

							end

						end

					end

				end

			end

			MinDura = math.floor(MinDura)

			StorageMaid = ToClient_getUsableMaidCountByType(false)

			MarketMaid = ToClient_getUsableMaidCountByType(true)

		end

	end

end

ret = "{Lv="..Lv..",SummonCount="..SummonCount..",IsStuck="..tostring(IsStuck)..",RegionID="..myRegionKey..",Nodeid="..Nodeid..",Speed="..Speed..",Sp="..Sp..",MaxSp="..MaxSp..",SpPrc="..SpPrc..",Energy="..Energy..",MaxEnergy="..MaxEnergy..",Mp="..Mp..",MaxMp="..MaxMp..",MpPrc="..MpPrc..",Hp="..Hp..",MaxHp="..MaxHp..",HpPrc="..HpPrc..",IsMov="..tostring(IsMov)..",Freeslot="..Freeslot..",WeightPrc="..WeightPrc..",DuraPrc="..MinDura..",StorageMaid="..StorageMaid..",MarketMaid="..MarketMaid..",mx="..mx..",my="..mz..",mz="..my..",InMount="..tostring(InMount)..",Face="..Face..",InvenSize="..invenSize..",IsInBA="..tostring(IsInBA)..",IsInHF="..tostring(IsInHF)..",Class="..Class..",Rage="..Rage..",userid="..userid..",CombatType="..CombatType.."}"

return ret

]])

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	if type(b) == "function" then

		return b()

	else

		return nil

	end

else

	return nil

end

end



function AwkDura()

	local code = [[

local EquipInfo = ToClient_getEquipmentItem(29)

if EquipInfo then

	local EquipProxy = EquipInfo:get()

	if EquipProxy then

		local Dura = EquipProxy:getEndurance()

		return Dura

	end

else

	return 0

end

]]

local str = tonumber(Retlua(code))

return str

end



function SelfActor()

	local str = tostring(Retlua("return tostring(getSelfPlayer())"))

	if str == "nil" then

		return false

	else

		return true

	end

end



function GetBuffList()

	local code = string.format([[

local ret = "{"

for i =1,100 do

	for a=0,100 do

		local appliedBuff = getSelfPlayer():getAppliedBuffByIndexByOrder(i-1, a)

		if appliedBuff then

			ret=ret.."{"

			local desc = appliedBuff:getBuffDesc()

			desc = string.gsub(desc, "<[^>]+>", "")

			desc = string.gsub(desc, "\n", "")

			local id = appliedBuff:getBuffKey()

			local isDebuff = appliedBuff:isDebuff()

			local type = appliedBuff:getBuffType()

			local u64_calc_time1 = appliedBuff:getRemainedTime_u64() / Defines.u64_const.u64_1000

			local remainT = appliedBuff:getRemainedTime_u64() / Defines.u64_const.u64_1000

			remainT = tostring(Util.Time.inGameTimeFormattingTop(u64_calc_time1))

			ret = ret.."desc="..'"'..desc..'"'..",id="..id..",isDebuff="..tostring(isDebuff)..",type="..type..",remainT="..'"'..remainT..'"'.."},"

		end

	end

end

ret = ret.."}"

return ret

]])

	local str = Retlua(code)

	local b = load("return " .. str)

	if type(b) == "function" then

		return b()

	else

		return nil

	end

end



function HasBuff(id,buff)

	if not buff then buff = GetBuffList() end

	if buff then

		for i =1,#buff do

			if buff[i].id == id then

				return true

			end

		end

	end

	return false

end



function GetLv()

	local i = tonumber(Retlua('return getSelfPlayer():get():getLevel()'))

	if i ~= nil then

		return i

	else

		return -1

	end

end



function IsMoving()

	local code = string.format([[

if getSelfPlayer():isNavigationMoving() then

	return 1

else

	return 2

end

]])

	local str = tonumber(Retlua(code))

	if str == 1 then

		return true

	else

		return false

	end

end



function GetMpPrc()

local code = string.format([[

local actorProxy = getSelfPlayer():get()

local mp = actorProxy:getMp()

local mmp = actorProxy:getMaxMp()

return mp/mmp*100

]])

local str = tonumber(Retlua(code))

return str

end



function GetName()

	return Retlua("return getSelfPlayer():getName()")

end



function GetHp()

	local i = tonumber(Retlua('return getSelfPlayer():get():getHp()'))

	if i ~= nil then

		return i

	else

		return -1

	end

end



function GetHpPrc()

local code = string.format([[

local actorProxy = getSelfPlayer():get()

local hp = actorProxy:getHp()

local mhp = actorProxy:getMaxHp()

return hp/mhp*100

]])

local str = tonumber(Retlua(code))

return str

end



function Revive()

	Dolua('deadMessage_Revival(PaGlobal_DeadMessage_All._eRespawnType.respawnType_Immediate, 0, CppEnums.ItemWhereType.eCashInventory, getSelfPlayer():getRegionKey(), false, toInt64(0, 0))')

end



function ReviveLocal()

	--Dolua('deadMessage_Revival(PaGlobal_DeadMessage_All._eRespawnType.respawnType_Immediate, 0, CppEnums.ItemWhereType.eCashInventory, getSelfPlayer():getRegionKey(), false, toInt64(0, 0))')

	Dolua("PaGlobalFunc_DeadMessage_All_ButtonPushEvent_Immediate()")

end



function ReviveNode()

	Dolua('PaGlobalFunc_DeadMessage_All_ButtonPushEvent_Exploration() messageBox_YesButtonUp()')

end

function ReviveTown()

	Dolua('deadMessage_Revival(PaGlobal_DeadMessage_All._eRespawnType.respawnType_NearTown, 255, 0, getSelfPlayer():getRegionKey(), false, toInt64(0, 0), PaGlobal_DeadMessage_All._ui.btn_useFairyCheck:IsCheck())')

end



function WatchAction()

	while not ScriptStop() do

		print(ActionName())

		Delay(100)

	end

end



function LogAction()

	local myact,lastact = "",""

	while not ScriptStop() do

		local curact = ActionName()

		if not string.match(myact,curact) then

			myact=myact..curact

			print('elseif CheckAT("'..curact..'") then')

			if lastact ~= curact then

				lastact = curact

			end

		else

			if lastact ~= curact then

				print('elseif CheckAT("'..curact..'") then')

				lastact = curact

			end

		end

		Delay(1)

	end

end



function CheckAT(name)

	if string.match(ActionName(),name) then

		return true

	else

		return false

	end

end



function DOAction(actionname)

	 local code = string.format([[

getSelfPlayer():setActionChart('%s')

]], actionname)

Dolua(code)	

end



function WaitLayDown()

	local myact = ActionName()

	if not string.match(myact,"SOCIAL") then

		DOAction("WAIT")

		Delay(1500)

		while not ScriptStop() do

			myact = ActionName()

			if not string.match(myact,"SOCIAL") then

				Laydown()

			else

				if myact == "SOCIAL_LIE_DOWN_ING" then

					break

				end

			end

			Delay(500)

		end

	end

end



function WaitAction(str,time)

	local myact = ActionName()

	local tick = GetTime()

	while not ScriptStop() do

		myact = ActionName()

		if string.match(myact,str) then

			return true

		end

		if time then

			if GetTime() - tick >= time then

				if string.match(myact,str) then

					return true

				else

					return false

				end

			end

		end

		Delay(1)

	end

end



function TgMobInfo(gid)

	local code = string.format([[

BotStatus="Grinding"

local ret = "{hp="

local shithp = 0

local maxhp = 0

local face = 0

local mx,my,mz = 0,0,0

local tgKeyRaw=  %i

local dead = 0

if tgKeyRaw then

	local tgactor = getActor(tgKeyRaw)

	if tgactor then

		local actorProxy = tgactor:get()

		shithp = actorProxy:getHp()

		maxhp = math.floor(actorProxy:getMaxHp())

		face = actorProxy:getRotation()

		mx,my,mz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

		local isdead = tgactor:isDead()

		if isdead then

			dead = 1

		end

	end

end

ret = ret..shithp..",maxhp="..maxhp..",dead="..dead..",face="..face..",mx="..mx..",my="..mz..",mz="..my.."}"

return ret

]],gid)

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	return b()

else

	return {hp=0,aggr=false}

end

end



function GetLootPos(gid)

	local code = string.format([[

local ret = "{x="

local gid = %i

local tgactor = getActor(gid)

local loot = tgactor:isSetInteracatbleFrag(7)

local collect = tgactor:get():isCollect()

local pos=tgactor:get():getPosition()

ret = ret..pos.x..",y="..pos.z..",z="..pos.y..",loot="..tostring(loot)..",collect="..tostring(collect).."}"

return ret

]],gid)

local str = Retlua(code)

local b = load("return " .. str)

if type(b) == "function" then

	return b()

else

	return nil

end

end



function EntityListLua(Type)

	local code = string.format([[

--ToClient_DeleteNaviGuideByGroup(0)

local mob = FromClient_getRadarIconActorList(%i)

local ret = "{"

for key, control in pairs(mob) do

	local actorProxy = mob[key]

	local actorProxyWrapper = getActor(actorProxy:getActorKeyRaw())

	local isdeadbody = actorProxy:isDeadBody()

	local isdead = actorProxyWrapper:isDead()

	local uid = actorProxyWrapper:getCharacterStaticStatusWrapper():getCharacterKey()

	local name = actorProxyWrapper:getCharacterStaticStatusWrapper():getName()

	local interactflag = tostring(actorProxyWrapper:getInteractableFrag())

	local Lv = actorProxyWrapper:get():getCharacterStaticStatus().level

	local curHP = actorProxyWrapper:get():getHp()

	local maxHP = actorProxyWrapper:get():getMaxHp()

	local pos = actorProxyWrapper:get():getPosition()

	local isloot = actorProxyWrapper:get():isLoot()

	--worldmapNavigatorStart(float3(pos.x,pos.y,pos.z), NavigationGuideParam(),false, true, false)

	ret = ret.."{name="..'"'..name..'"'..",isdead="..tostring(isdead)..",isdeadbody="..tostring(isdeadbody)..",uid="..uid..",lv="..Lv..",hp="..curHP..",maxhp="..maxHP..",mx="..pos.x..",my="..pos.z..",mz="..pos.y..",isloot="..tostring(isloot).."},"

end

ret=ret.."}"

return ret

]],Type)

local str = Retlua(code)

local b = load("return " .. str)

local list = b()

return list

end



function EntityListLuaFull()

	local code = string.format([[

--ToClient_DeleteNaviGuideByGroup(0)

local ret = "{"

for i=0,67 do

	local mob = FromClient_getRadarIconActorList(i)

	if mob then

		for key, control in pairs(mob) do

			local actorProxy = mob[key]

			local actorProxyWrapper = getActor(actorProxy:getActorKeyRaw())

			local isdeadbody = actorProxy:isDeadBody()

			local isdead = actorProxyWrapper:isDead()

			local uid = actorProxyWrapper:getCharacterStaticStatusWrapper():getCharacterKey()

			local name = actorProxyWrapper:getCharacterStaticStatusWrapper():getName()

			local interactflag = tostring(actorProxyWrapper:getInteractableFrag())

			local Lv = actorProxyWrapper:get():getCharacterStaticStatus().level

			local curHP = actorProxyWrapper:get():getHp()

			local maxHP = actorProxyWrapper:get():getMaxHp()

			local pos = actorProxyWrapper:get():getPosition()

			local isloot = actorProxyWrapper:get():isLoot()

			--worldmapNavigatorStart(float3(pos.x,pos.y,pos.z), NavigationGuideParam(),false, true, false)

			ret = ret.."{name="..'"'..name..'"'..",isdead="..tostring(isdead)..",isdeadbody="..tostring(isdeadbody)..",uid="..uid..",lv="..Lv..",hp="..curHP..",maxhp="..maxHP..",mx="..pos.x..",my="..pos.z..",mz="..pos.y..",sign="..i..",isloot="..tostring(isloot).."},"

		end

	end

end

ret=ret.."}"

return ret

]])

local str = Retlua(code)

local b = load("return " .. str)

local list = b()

return list

end



function NovaResource()

	local code = [[

local selfPlayer = getSelfPlayer():get()

local maxResourceCount = selfPlayer:getMaxSubResourcePoint(0)

local resourceCount = math.floor(selfPlayer:getSubResourcePoint(0))

local showCount = resourceCount / maxResourceCount * 100

return showCount

]]

local str = tonumber(Retlua(code))

return str

end



function GetSkillList()

	local code = string.format([[

local strinfo = ""

local selfPlayerWrapper = getSelfPlayer()

local tableWrapper = ToClient_getSkillGroupCellTableWrapper(0, selfPlayerWrapper:getClassType())

--µÚÒ»¸ö²ÎÊý 0-2 ´ú±í¼¼ÄÜÑ¡ÏîÒ³

local colMaxCount = tableWrapper:sizeX()

local rowMaxCount = tableWrapper:sizeY()

local subGroupSize = tableWrapper:getSubGroupSize()

for index = 0, subGroupSize - 1 do

	local strKey = PAGetString(Defines.StringSheet_GAME, tableWrapper:getAtSubGroupStringKey(index))

	for row = 0, rowMaxCount - 1 do

		for col = 0, colMaxCount - 1 do

			cellWrapper = tableWrapper:atWrapper(col, row)

			if nil ~= cellWrapper and true == cellWrapper:isDefined() then

				local key = cellWrapper:getSkillGroupNo()

				local cellType = cellWrapper:getType(0)

				local skillKey = ToClient_getSkillKeyBySkillGroupNo(key, 1)

				local skillNo = skillKey:getSkillNo()

				local skillTypeSSW = getSkillTypeStaticStatus(skillNo)

				if nil ~= skillTypeSSW then

					local skillTypeStaticWrapper = getSkillTypeStaticStatus(skillNo)

					local learnedSkillLevel = getLearnedSkillLevel(skillTypeStaticWrapper)

					if learnedSkillLevel >= 1 then

						local skillName = skillTypeSSW:getName()

						strinfo = strinfo..skillName.." "..key.."\n"

					end

				end

			end

		end

	end

end

local file = io.open("c:\\log.txt", "w+");

file:write(strinfo);

file:close()

]])

local str = Retlua(code)

if str then

	local b = load("return " .. str)

	return b()

else

	return nil

end

end



function AutoHorse()

	local rightT = false

	while not ScriptStop() do

		if CheckAT("ATTACK_DASH") then

			Delay(800)

			if not rightT then

				Ainput(AT_A+AT_S)

				rightT = true

			else

				Ainput(AT_D+AT_S)

				rightT = false

			end

		elseif CheckAT("DRIFT") then

			Ainput(AT_W+AT_F)

		elseif CheckAT("MOVE_ACCELERATE") then

			if not CheckAT("LV2") then

				Ainput(AT_F)

			else

				Delay(800)

				if not rightT then

					Ainput(AT_A+AT_S)

					rightT = true

				else

					Ainput(AT_D+AT_S)

					rightT = false

				end

			end

		else

			if CheckAT("WAIT") or CheckAT("JUMP_LAND") or (CheckAT("MOVE_LV") and not CheckAT("DRIFT")) then

				Ainput(AT_Q)

			end

		end

	end

end

Loadlib("\\Script\\lib\\json.lua")
Key_LMB = 1
Key_RMB = 2
Key_CANCEL = 3
Key_MBUTTON = 4
Key_MBACK_BUTTON = 5
Key_MFRONT_BUTTON = 6
Key_BACK = 8
Key_TAB = 9
Key_CLEAR = 12
Key_RETURN = 13
Key_SHIFT = 16
Key_CONTROL = 17
Key_MENU = 18
Key_PAUSE = 19
Key_CAPITAL = 20
Key_ESCAPE = 27
Key_SPACE = 32
Key_PGUP = 33
Key_PGDN = 34
Key_END = 35
Key_HOME = 36
Key_LEFT = 37
Key_UP = 38
Key_RIGHT = 39
Key_DOWN = 40
Key_SELECT = 41
Key_PRINT = 42
Key_EXECUTE = 43
Key_SNAPSHOT = 44
Key_INSERT = 45
Key_DELETE = 46
Key_HELP = 47
Key_0 = 48
Key_1 = 49
Key_2 = 50
Key_3 = 51
Key_4 = 52
Key_5 = 53
Key_6 = 54
Key_7 = 55
Key_8 = 56
Key_9 = 57
Key_A = 65
Key_B = 66
Key_C = 67
Key_D = 68
Key_E = 69
Key_F = 70
Key_G = 71
Key_H = 72
Key_I = 73
Key_J = 74
Key_K = 75
Key_L = 76
Key_M = 77
Key_N = 78
Key_O = 79
Key_P = 80
Key_Q = 81
Key_R = 82
Key_S = 83
Key_T = 84
Key_U = 85
Key_V = 86
Key_W = 87
Key_X = 88
Key_Y = 89
Key_Z = 90
Key_NUMPAD0 = 96
Key_NUMPAD1 = 97
Key_NUMPAD2 = 98
Key_NUMPAD3 = 99
Key_NUMPAD4 = 100
Key_NUMPAD5 = 101
Key_NUMPAD6 = 102
Key_NUMPAD7 = 103
Key_NUMPAD8 = 104
Key_NUMPAD9 = 105
Key_MULTIPLY = 106
Key_ADD = 107
Key_SEPARATOR = 108
Key_SUBTRACT = 109
Key_DECIMAL = 110
Key_DIVIDE = 111
Key_F1 = 112
Key_F2 = 113
Key_F3 = 114
Key_F4 = 115
Key_F5 = 116
Key_F6 = 117
Key_F7 = 118
Key_F8 = 119
Key_F9 = 120
Key_F10 = 121
Key_F11 = 122
Key_F12 = 123
Key_F13 = 124
Key_F14 = 125
Key_F15 = 126
Key_F16 = 127
Key_F17 = 128
Key_F18 = 129
Key_F19 = 130
Key_F20 = 131
Key_F21 = 132
Key_F22 = 133
Key_F23 = 134
Key_F24 = 135
Key_OEM_2 = 191
Key_OEM_3 = 192
Key_OEM_4 = 219
Key_OEM_6 = 221
Key_OEM_7 = 222
Key_OEM_8 = 219
Key_OEM_9 = 221
Key_OEM_EQUAL = 187
Key_OEM_MINUS = 189
Key_OEM_PERIOD = 190
Key_OEM_NUMPADPERIOD = 110

function GetDistToTbCenter(tb)
	local sumx,sumy,sumz = 0,0,0
	for i =1,#tb do
		sumx,sumy,sumz = sumx+tb[i].x,sumy+tb[i].y,sumz+tb[i].z
	end
	sumx,sumy,sumz = sumx/#tb,sumy/#tb,sumz/#tb
	return Dist2P3D(sumx,sumy,sumz)
end

function GetDistToTbMin(tb,x,y,z)
	if not x then x,y,z = Pos() end
	local dist,idx = math.huge,1
	for i =1,#tb do
		local top = Dist2DCal(x,y,tb[i].x,tb[i].y)
		if dist > top then
			idx = i
			dist = top
		end
	end
	return dist,idx
end

function GetCloestPathFromTb(tb)
	local dist,idx = math.huge,nil
	for i =1,#tb do
		if #tb[i] > 0 then
			local top = GetDistToTbCenter(tb[i])
			if dist > top then
				dist = top
				idx = i
			end
		end
	end
	if idx then
		return tb[idx]
	else
		return nil
	end
end

function GetCloestPathFromTb2(tb)
	local dist,idx = math.huge,nil
	for i =1,#tb do
		if #tb[i] > 0 then
			local top = table.GetDistToTable(tb[i])
			if dist > top then
				dist = top
				idx = i
			end
		end
	end
	if idx then
		return tb[idx]
	else
		return nil
	end
end

function GetPathFromTb(tb,group,id,pathidx)
	local list = tb
	for i =1,#list do
		if list[i].group == group then
			if list[i].id == id then
				if not pathidx then
					return list[i].path
				end
			end
		end
	end
end

function TT(M)
	if type(M) == "table" then
		local W="";
		for k, v in pairs(M) do
			if type(v) ~= table then
				W=W.." "..tostring(k)..":"..tostring(v)
			end
		end
		print(W,1)
	else
		print(M,1)
	end
end

function PT(M)
	print("table length:"..#M)
	for i=1,#M do
		TT(M[i])
	end
end


function print16(str)
	print(string.format("%#x",str))
end

function table.length(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function table.sortMintoMax(t)
	local tempT = {}
	local TCount = #t
	local tempmin = nil
	local TempIndex = nil
	local VarT = t
	for i = 1,TCount do 
		tempmin = table.findMin(VarT)
		tempIndex = table.findMinIndex(VarT)
		table.remove(VarT,tempIndex)
		table.insert(tempT,tempmin)
	end
	return tempT
end

function table.sortMintoMaxIndex(t)
	local tempT = {}
	local TCount = #t
	local tempmin = nil
	local TempIndex = nil
	local VarT = t
	for i = 1,TCount do 
		tempmin = table.findMin(VarT)
		tempIndex = table.findMinIndex(VarT)
		table.remove(VarT,tempIndex)
		table.insert(tempT,tempIndex)
	end
	return tempT
end

function table.findtb(t,tb)
	if #t == 0 then
		return false
	else
		for i = 1,#t do 
			if t[i]~= nil then
				for a=1,#tb do
					if t[i] == tb[a] then
						return true
					end
				end
			else
				break
			end
		end
		return false
	end
end

function table.find(t, value)
	if #t == 0 then
		return false
	else
		for i = 1,#t do 
			if t[i]~= nil then
				if t[i]== value then
					return true
				end
			else
				break
			end
		end
		return false
	end
end

function table.findObj(t, value)
	if #t == 0 then
		return false
	else
		for i = 1,#t do 
			if t[i].Obj ~= nil then
				if t[i].Obj == value then
					return true
				end
			else
				break
			end
		end
		return false
	end
end

function table.match(t,value)
	if #t == 0 then
		return false
	else
		for i = 1,#t do 
			if t[i]~= nil then
				if string.match(value,t[i]) ~= nil then
					return true
				end
			else
				break
			end
		end
		return false
	end
end

function table.match2(t,value)
	if #t == 0 then
		return false
	else
		for i = 1,#t do 
			if t[i]~= nil then
				if string.match(t[i],value) ~= nil then
					return true
				end
			else
				break
			end
		end
		return false
	end
end

function table.index(t,value)
	local Author
		for k,v in pairs(tab) do 
			if v==value then 
				Author = k
			return k
			end 
		end
end



function table.findIndex(t, value)
   local index = nil
    for k,v in pairs(t) do
        if v ~= value then
            index = nil
        end
		if v == value then
			index = k
		end
    end
   return index
end

function table.findMin(t)
    local min = nil
    for i=1,#t  do
        if min == nil then
           min  = t[i]
        end
        if min > t[i] then
		min = t[i]	
		
		end
    end
    return min
end


function table.findMinIndex(t)
    local min = nil
	local index = 1
    for i=1,#t  do
        if min == nil then
           min  = t[i]
        end
        if min > t[i] then
		min = t[i]	
		index = i
		end
    end
    return index
end

function table.findMax(t)
    local max = nil
    for i=1,#t  do
        if max == nil then
           max  = t[i]
        end
        if max < t[i] then
		max = t[i]	
		end
    end
    return max
end

function table.merge(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        for k,v in pairs(b) do if type(v)=='table' and type(a[k] or false)=='table' then table.merge(a[k],v) else a[k]=v end end
    end
    return a
end

function table.GetClosestASfromT1ToT2(t1,t2)
	local min,idx = math.huge,1
	for i =1,#t1 do
		local dist = Dist2DCal(t1[i].x,t1[i].y,t2[1].x,t2[1].y)
		if min > dist then
			min = dist
			idx = i
		end
	end
	return idx
end

function table.print ( t )  
    local print_r_cache={}
    local function sub_print_r(t,indent)
        if (print_r_cache[tostring(t)]) then
            print(indent.."*"..tostring(t))
        else
            print_r_cache[tostring(t)]=true
            if (type(t)=="table") then
                for pos,val in pairs(t) do
                    if (type(val)=="table") then
                        print(indent.."["..pos.."] => "..tostring(t).." {")
                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
                        print(indent..string.rep(" ",string.len(pos)+6).."}")
                    elseif (type(val)=="string") then
                        print(indent.."["..pos..'] => "'..val..'"')
                    else
                        print(indent.."["..pos.."] => "..tostring(val))
                    end
                end
            else
                print(indent..tostring(t))
            end
        end
    end
    if (type(t)=="table") then
        print(tostring(t).." {")
        sub_print_r(t,"  ")
        print("}")
    else
        sub_print_r(t,"  ")
    end
    print()
end

function table.GetClosestTable(tb)
	local dist,idx = math.huge,1
	for i =1,#tb do
		for a=1,#tb[i] do
			local top = Dist2P3D(tb[i][a].x,tb[i][a].y,tb[i][a].z)
			if dist > top then
				dist = top
				idx = i
			end
		end
	end
	return tb[idx]
end

function table.GetCorpseClosestTable(t1,t2)
	local DistList1 = {}
	local DistList2 = {}
	local DistToPlayer = nil
	for i = 1, #t1 do 
		DistToPlayer = 尸体距离(t1[i].x,t1[i].y,t1[i].z)
		table.insert(DistList1,DistToPlayer)
	end
	for i = 1, #t2 do 
		DistToPlayer = 尸体距离(t2[i].x,t2[i].y,t2[i].z)
		table.insert(DistList2,DistToPlayer)
	end
	local shit1 = table.findMin(DistList1)
	local shit2 = table.findMin(DistList2)
	if shit1 <= shit2 then
		return t1
	else
		return t2
	end
end

function chsize(char)
	if not char then
		print("not char")
		return 0
	elseif char > 240 then
		return 4
	elseif char > 225 then
		return 3
	elseif char > 192 then
		return 2
	else
		return 1
	end
end

function utf8len(str)
    local len = 0
    local currentIndex = 1
    while currentIndex <= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    len = len +1
    end
    return len
end

function utf8sub(str, startChar, numChars)
    local startIndex = 1
    while startChar > 1 do
	    local char = string.byte(str, startIndex)
	    startIndex = startIndex + chsize(char)
	    startChar = startChar - 1
    end

    local currentIndex = startIndex
    
    while numChars > 0 and currentIndex <= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    numChars = numChars -1
    end
    return str:sub(startIndex, currentIndex - 1)
end

function getUrlFileName( strurl, strchar, bafter)  
  
    local ts = string.reverse(strurl)  
    local param1, param2 = string.find(ts, strchar)  -- 这里以"/"为例  
    local m = string.len(strurl) - param2 + 1     
    local result  
    if (bafter == true) then  
        result = string.sub(strurl, m+1, string.len(strurl))   
    else  
        result = string.sub(strurl, 1, m-1)   
    end  
  
    return result  
end  

function secondsToTime(ts)
    local seconds = math.fmod(ts, 60)
    local min = math.floor(ts/60)
    local hour = math.floor(min/60) 
    local day = math.floor(hour/24)
    local str = ""
    if tonumber(seconds) > 0 and tonumber(seconds) < 60 then
        str = ""..seconds.."秒" ..str
    end
    if tonumber(min - hour*60)>0 and tonumber(min - hour*60)<60 then
        str = ""..(min - hour*60).."分"..str
    end
    if tonumber(hour - day*24)>0 and tonumber(hour - day*60)<24 then
        str = (hour - day*24).."时"..str
    end
    if tonumber(day) > 0 then
        str = day.."天"..str
    end
    return str
end

function table.GetDistToTable(tb)
	local mx,my,mz = Pos()
	local dist = math.huge
	for i =1,#tb do
		local top = Dist2DCal(mx,my,tb[i].x,tb[i].y)
		if top < dist then
			dist = top
		end
	end
	return dist
end

function table.GetDistByCenter(t1)
	local xsum1,ysum1,zsum1= 0,0,0
	local avgx1,avgy1,avgz1 = 0,0,0
	for i =1,#t1 do
		xsum1 = xsum1+t1[i].x
		ysum1 = ysum1+t1[i].y
		zsum1 = zsum1+t1[i].z
	end
	avgx1=xsum1/#t1
	avgy1=ysum1/#t1
	avgz1=zsum1/#t1
	return Dist2PExact3D(avgx1,avgy1,avgz1)
end

function table.GetClosestTableByCenter(t1,t2)
	local xsum1,ysum1,zsum1,xsum2,ysum2,zsum2 = 0,0,0,0,0,0
	local avgx1,avgy1,avgz1,avgx2,avgy2,avgz2 = 0,0,0,0,0,0
	for i =1,#t1 do
		xsum1 = xsum1+t1[i].x
		ysum1 = ysum1+t1[i].y
		zsum1 = zsum1+t1[i].z
	end
	for i =1,#t2 do
		xsum2 = xsum2+t2[i].x
		ysum2 = ysum2+t2[i].y
		zsum2 = zsum2+t2[i].z
	end
	avgx1=xsum1/#t1
	avgy1=ysum1/#t1
	avgz1=zsum1/#t1
	avgx2=xsum2/#t2
	avgy2=ysum2/#t2
	avgz2=zsum2/#t2
	if Dist2PExact3D(avgx1,avgy1,avgz1) <= Dist2PExact3D(avgx2,avgy2,avgz2) then
		return t1
	else
		return t2
	end
end

function table.GetCSTableFromTable(tb)
	local dist,idx = math.huge,1
	for i =1,#tb do
		local toc = table.GetDistByCenter(tb[i])
		if dist > toc then
			dist = toc
			idx = i
		end
	end
	return tb[idx]
end

Theme = {}

Theme.List = {}

Theme.BlackList = {}



function HasKnowledge(num)

	local code = string.format([[

local card = ToClinet_getMentalCardStaticStatus(%i)

local has = card:isHasCard()

--ToClient_IsLearnedKnowledge()

if has then return 1 else return 2 end

]],num)

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function GetKnowledge(theme,blacklist)

	local code = "local blacklist = {"

for i =1,#blacklist do

	code = code..blacklist[i]..","

end

code = code.."}"

code = code.." local themelist={"

for i =1,#theme do

	code = code..theme[i].id..","

end

code = code.."}"

code = code..string.format([[

local ret = nil

local list = {}

local actorProxy = getSelfPlayer():get()

local knowledge = actorProxy:getMentalKnowledge()

local mx,my,mz = actorProxy:getPositionX(),actorProxy:getPositionY(),actorProxy:getPositionZ()

for a=1,#themelist do

	local theme = knowledge:getThemeByKeyRaw(themelist[a])

	if theme then

		local count = theme:getChildCardCount()

		for i =0,count-1 do

			local child = theme:getChildCardByIndex(i)

			if child then

				local childid = child:getKey()

				if not table.find(blacklist,childid) then

					local card = ToClinet_getMentalCardStaticStatus(childid)

					local characterKey = ToClient_getCharacterKeyByMentalCardKey(childid)

					local cardname = card:getName()

					local has = card:isHasCard()

					if not has then

						pos = card:getPosition()

						if pos then

							if pos.x ~= 0 and pos.y ~= 0 and pos.z ~= 0 then

								local top = Dist3DCal(mx,my,mz,pos.x,pos.y,pos.z)

								table.insert(list,{x=pos.x,y=pos.z,z=pos.y,dist=top,themeid=themelist[a],themeidx=a,id=childid,name=cardname,uid=characterKey})

							end

						end

					end

				end

			end

		end

	end

end



for i=0,67 do

	local mob = FromClient_getRadarIconActorList(i)

	if mob then

		for key, control in pairs(mob) do

			local actorProxy = mob[key]

			local actorProxyWrapper = getNpcActor(actorProxy:getActorKeyRaw())

			if actorProxyWrapper then

				local pos = actorProxyWrapper:get():getPosition()

				local characterKey = actorProxyWrapper:getCharacterStaticStatusWrapper():getCharacterKey()

				local name = actorProxyWrapper:getCharacterStaticStatusWrapper():getName()

				if actorProxyWrapper:get():getFirstTalkable() then

					local top = Dist3DCal(mx,my,mz,pos.x,pos.y,pos.z)

					table.insert(list,{x=pos.x,y=pos.z,z=pos.y,dist=top,themeid=1,themeidx=1,id=1,name=name,uid=characterKey})

				end

			end

		end

	end

end



if #list > 0 then

	table.sort(list, function(a, b)

    return a.dist < b.dist

end)



ret = "{"

for i =1,#list do

	ret = ret.."{x="..list[i].x..",y="..list[i].y..",z="..list[i].z..",uid="..list[i].uid..",dist="..list[i].dist..",themeid="..tostring(list[i].themeid)..",themeidx="..tostring(list[i].themeidx)..",id="..tostring(list[i].id)..",name="..'"'..tostring(list[i].name)..'"'.."},"

end

ret = ret.."}"

end

return ret

]],theme)

local str = Retlua(code)

local b = load("return " .. str)

if type(b) == "function" then

	return b()

else

	return nil

end

end



function IsFirstTalk(gid)

	local code = string.format([[

local gid = %i 

local actorProxyWrapper = getNpcActor(gid)

if actorProxyWrapper then

	if actorProxyWrapper:get():getFirstTalkable() then

		return 1

	else

		return 2

	end

else

	return 2

end

]],gid)

local str = tonumber(Retlua(code))

if str == 1 then

	return true

else

	return false

end

end



function AutoKnowledgeBot()

AutoRegisteWatchDog()

local theme = Theme.List 

local tick = 0

local lasttg,lastT = nil,nil

local blacklist = Theme.BlackList

	while not ScriptStop() do

		Bot.LastNpcGid = nil

		local pos = GetKnowledge(theme,blacklist)

		if pos then

			if GetTime() - tick >= 20000 then

				DeleteDraw()

				tick = GetTime()

			end

			print(pos[1].x..","..pos[1].y..","..pos[1].z)

			Bot.QuestInfo = "Theme:"..theme[pos[1].themeidx].name.." theme id:"..pos[1].themeid.." target:"..pos[1].name.."  targetID:"..pos[1].id.." uid:"..pos[1].uid

			NavTo(pos[1].x,pos[1].y,pos[1].z,9)

			local d = DialogInfo()

			if not d.dialogopen then

				if not pos[1].name then

					OpenNpc(nil,pos[1].x,pos[1].y,pos[1].z)

				else

					if pos[1].uid ~= 0 then

						OpenNpc(pos[1].uid,pos[1].x,pos[1].y,pos[1].z)

					else

						OpenNpc(pos[1].name,pos[1].x,pos[1].y,pos[1].z)

					end

				end

			else

				if OpenDialogType(38) then

					Delay(300)

					if not ClickKnowledgeBtn() then

						ExitDialog()

					end

				else

					ExitDialog()

				end

			end

			Out_Title(Bot.QuestInfo)

			if not lasttg then

				lasttg = pos[1].id

				lastT =nil

			else

				if pos[1].id == lasttg then

					if not lastT then

						lastT = GetTime()

					else

						if GetTime() - lastT >= 5000 then

							print("Failed to get this target knowledge. give up this shit:"..pos[1].name.." "..pos[1].id)

							table.insert(blacklist,pos[1].id)

							lastT = nil

						end

					end

				else

					lasttg = pos[1].id

					lastT = nil

				end

			end

			if Bot.LastNpcGid then

				if not IsFirstTalk(Bot.LastNpcGid) then

					Bot.LastNpcGid = nil

					pos = nil

				end

			end

		end

		Delay(1)

	end

	Out_Title("Script Stop")

end



function GetSelectTheme()

	local code = [[

local ret = "{"

local knowledge = getSelfPlayer():get():getMentalKnowledge()

local theme = knowledge:getCurrentTheme() --È¡µ±Ç°Ñ¡ÖÐµÄÖªÊ¶Ö÷Ìâ

local count = theme:getChildThemeCount()

for i =0,count-1 do

	local subtheme = theme:getChildThemeByIndex(i)

	if subtheme then

		local id = subtheme:getKey()

		local name = subtheme:getName()

		ret = ret.."{name="..'"'..name..'"'..",id="..id.."},"

	end

end

ret = ret.."}"

return ret

]]

local str = Retlua(code)

local b = load("return " .. str)

local dang = nil

if type(b) == "function" then

	dang = b()

end

if dang then

	for i =1,#dang do

		print("{name="..'"'..dang[i].name..'"'..",id="..dang[i].id.."},")

	end

end

end

